/-
Copyright (c) 2022 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/

import measure_theory.function.conditional_expectation.basic

/-!

# Conditional expectation of indicator functions

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file proves some results about the conditional expectation of an indicator function and
as a corollary, also proves several results about the behaviour of the conditional expectation on
a restricted measure.

## Main result

* `measure_theory.condexp_indicator`: If `s` is a `m`-measurable set, then the conditional
  expectation of the indicator function of `s` is almost everywhere equal to the indicator
  of `s` of the conditional expectation. Namely, `ùîº[s.indicator f | m] = s.indicator ùîº[f | m]` a.e.

-/

noncomputable theory
open topological_space measure_theory.Lp filter continuous_linear_map
open_locale nnreal ennreal topology big_operators measure_theory

namespace measure_theory

variables {Œ± ùïú E : Type*} {m m0 : measurable_space Œ±}
  [normed_add_comm_group E] [normed_space ‚Ñù E] [complete_space E]
  {Œº : measure Œ±} {f : Œ± ‚Üí E} {s : set Œ±}

lemma condexp_ae_eq_restrict_zero (hs : measurable_set[m] s) (hf : f =·µê[Œº.restrict s] 0) :
  Œº[f | m] =·µê[Œº.restrict s] 0 :=
begin
  by_cases hm : m ‚â§ m0,
  swap, { simp_rw condexp_of_not_le hm, },
  by_cases hŒºm : sigma_finite (Œº.trim hm),
  swap, { simp_rw condexp_of_not_sigma_finite hm hŒºm, },
  haveI : sigma_finite (Œº.trim hm) := hŒºm,
  haveI : sigma_finite ((Œº.restrict s).trim hm),
  { rw ‚Üê restrict_trim hm _ hs,
    exact restrict.sigma_finite _ s, },
  by_cases hf_int : integrable f Œº,
  swap, { rw condexp_undef hf_int, },
  refine ae_eq_of_forall_set_integral_eq_of_sigma_finite' hm _ _ _ _ _,
  { exact Œª t ht hŒºt, integrable_condexp.integrable_on.integrable_on, },
  { exact Œª t ht hŒºt, (integrable_zero _ _ _).integrable_on, },
  { intros t ht hŒºt,
    rw [measure.restrict_restrict (hm _ ht), set_integral_condexp hm hf_int (ht.inter hs),
      ‚Üê measure.restrict_restrict (hm _ ht)],
    refine set_integral_congr_ae (hm _ ht) _,
    filter_upwards [hf] with x hx h using hx, },
  { exact strongly_measurable_condexp.ae_strongly_measurable', },
  { exact strongly_measurable_zero.ae_strongly_measurable', },
end

/-- Auxiliary lemma for `condexp_indicator`. -/
lemma condexp_indicator_aux (hs : measurable_set[m] s) (hf : f =·µê[Œº.restrict s·∂ú] 0) :
  Œº[s.indicator f | m] =·µê[Œº] s.indicator (Œº[f | m]) :=
begin
  by_cases hm : m ‚â§ m0,
  swap, { simp_rw [condexp_of_not_le hm, set.indicator_zero'], },
  have hsf_zero : ‚àÄ g : Œ± ‚Üí E, g =·µê[Œº.restrict s·∂ú] 0 ‚Üí s.indicator g =·µê[Œº] g,
    from Œª g, indicator_ae_eq_of_restrict_compl_ae_eq_zero (hm _ hs),
  refine ((hsf_zero (Œº[f | m]) (condexp_ae_eq_restrict_zero hs.compl hf)).trans _).symm,
  exact condexp_congr_ae (hsf_zero f hf).symm,
end

/-- The conditional expectation of the indicator of a function over an `m`-measurable set with
respect to the œÉ-algebra `m` is a.e. equal to the indicator of the conditional expectation. -/
lemma condexp_indicator (hf_int : integrable f Œº) (hs : measurable_set[m] s) :
  Œº[s.indicator f | m] =·µê[Œº] s.indicator (Œº[f | m]) :=
begin
  by_cases hm : m ‚â§ m0,
  swap, { simp_rw [condexp_of_not_le hm, set.indicator_zero'], },
  by_cases hŒºm : sigma_finite (Œº.trim hm),
  swap, { simp_rw [condexp_of_not_sigma_finite hm hŒºm, set.indicator_zero'], },
  haveI : sigma_finite (Œº.trim hm) := hŒºm,
  -- use `have` to perform what should be the first calc step because of an error I don't
  -- understand
  have : s.indicator (Œº[f|m]) =·µê[Œº] s.indicator (Œº[s.indicator f + s·∂ú.indicator f|m]),
    by rw set.indicator_self_add_compl s f,
  refine (this.trans _).symm,
  calc s.indicator (Œº[s.indicator f + s·∂ú.indicator f|m])
      =·µê[Œº] s.indicator (Œº[s.indicator f|m] + Œº[s·∂ú.indicator f|m]) :
    begin
      have : Œº[s.indicator f + s·∂ú.indicator f|m] =·µê[Œº] Œº[s.indicator f|m] + Œº[s·∂ú.indicator f|m],
        from condexp_add (hf_int.indicator (hm _ hs)) (hf_int.indicator (hm _ hs.compl)),
      filter_upwards [this] with x hx,
      classical,
      rw [set.indicator_apply, set.indicator_apply, hx],
    end
  ... = s.indicator (Œº[s.indicator f|m]) + s.indicator (Œº[s·∂ú.indicator f|m]) :
    s.indicator_add' _ _
  ... =·µê[Œº] s.indicator (Œº[s.indicator f|m]) + s.indicator (s·∂ú.indicator (Œº[s·∂ú.indicator f|m])) :
    begin
      refine filter.eventually_eq.rfl.add _,
      have : s·∂ú.indicator (Œº[s·∂ú.indicator f|m]) =·µê[Œº] Œº[s·∂ú.indicator f|m],
      { refine (condexp_indicator_aux hs.compl _).symm.trans _,
        { exact indicator_ae_eq_restrict_compl (hm _ hs.compl), },
        { rw [set.indicator_indicator, set.inter_self], }, },
      filter_upwards [this] with x hx,
      by_cases hxs : x ‚àà s,
      { simp only [hx, hxs, set.indicator_of_mem], },
      { simp only [hxs, set.indicator_of_not_mem, not_false_iff], },
    end
  ... =·µê[Œº] s.indicator (Œº[s.indicator f|m]) :
    by rw [set.indicator_indicator, set.inter_compl_self, set.indicator_empty', add_zero]
  ... =·µê[Œº] Œº[s.indicator f|m] :
    begin
      refine (condexp_indicator_aux hs _).symm.trans _,
      { exact indicator_ae_eq_restrict_compl (hm _ hs), },
      { rw [set.indicator_indicator, set.inter_self], },
    end
end

lemma condexp_restrict_ae_eq_restrict (hm : m ‚â§ m0) [sigma_finite (Œº.trim hm)]
  (hs_m : measurable_set[m] s) (hf_int : integrable f Œº) :
  (Œº.restrict s)[f | m] =·µê[Œº.restrict s] Œº[f | m] :=
begin
  haveI : sigma_finite ((Œº.restrict s).trim hm),
  { rw ‚Üê restrict_trim hm _ hs_m, apply_instance, },
  rw ae_eq_restrict_iff_indicator_ae_eq (hm _ hs_m),
  swap, { apply_instance, },
  refine eventually_eq.trans _ (condexp_indicator hf_int hs_m),
  refine ae_eq_condexp_of_forall_set_integral_eq hm (hf_int.indicator (hm _ hs_m)) _ _ _,
  { intros t ht hŒºt,
    rw [‚Üê integrable_indicator_iff (hm _ ht), set.indicator_indicator, set.inter_comm,
      ‚Üê set.indicator_indicator],
    suffices h_int_restrict : integrable (t.indicator ((Œº.restrict s)[f|m])) (Œº.restrict s),
    { rw [integrable_indicator_iff (hm _ hs_m), integrable_on],
      rw [integrable_indicator_iff (hm _ ht), integrable_on] at h_int_restrict ‚ä¢,
      exact h_int_restrict, },
    exact integrable_condexp.indicator (hm _ ht), },
  { intros t ht hŒºt,
    calc ‚à´ x in t, s.indicator ((Œº.restrict s)[f|m]) x ‚àÇŒº
        = ‚à´ x in t, ((Œº.restrict s)[f|m]) x ‚àÇ(Œº.restrict s) :
      by rw [integral_indicator (hm _ hs_m), measure.restrict_restrict (hm _ hs_m),
        measure.restrict_restrict (hm _ ht), set.inter_comm]
    ... = ‚à´ x in t, f x ‚àÇ(Œº.restrict s) : set_integral_condexp hm hf_int.integrable_on ht
    ... = ‚à´ x in t, s.indicator f x ‚àÇŒº :
      by rw [integral_indicator (hm _ hs_m), measure.restrict_restrict (hm _ hs_m),
        measure.restrict_restrict (hm _ ht), set.inter_comm], },
  { exact (strongly_measurable_condexp.indicator hs_m).ae_strongly_measurable', },
end

/-- If the restriction to a `m`-measurable set `s` of a œÉ-algebra `m` is equal to the restriction
to `s` of another œÉ-algebra `m‚ÇÇ` (hypothesis `hs`), then `Œº[f | m] =·µê[Œº.restrict s] Œº[f | m‚ÇÇ]`. -/
lemma condexp_ae_eq_restrict_of_measurable_space_eq_on {m m‚ÇÇ m0 : measurable_space Œ±}
  {Œº : measure Œ±} (hm : m ‚â§ m0) (hm‚ÇÇ : m‚ÇÇ ‚â§ m0)
  [sigma_finite (Œº.trim hm)] [sigma_finite (Œº.trim hm‚ÇÇ)]
  (hs_m : measurable_set[m] s) (hs : ‚àÄ t, measurable_set[m] (s ‚à© t) ‚Üî measurable_set[m‚ÇÇ] (s ‚à© t)) :
  Œº[f | m] =·µê[Œº.restrict s] Œº[f | m‚ÇÇ] :=
begin
  rw ae_eq_restrict_iff_indicator_ae_eq (hm _ hs_m),
  have hs_m‚ÇÇ : measurable_set[m‚ÇÇ] s,
  { rwa [‚Üê set.inter_univ s, ‚Üê hs set.univ, set.inter_univ], },
  by_cases hf_int : integrable f Œº,
  swap, { simp_rw condexp_undef hf_int, },
  refine ((condexp_indicator hf_int hs_m).symm.trans _).trans (condexp_indicator hf_int hs_m‚ÇÇ),
  refine ae_eq_of_forall_set_integral_eq_of_sigma_finite' hm‚ÇÇ
    (Œª s hs hŒºs, integrable_condexp.integrable_on)
    (Œª s hs hŒºs, integrable_condexp.integrable_on) _ _
    strongly_measurable_condexp.ae_strongly_measurable',
  swap,
  { have : strongly_measurable[m] (Œº[s.indicator f | m]) := strongly_measurable_condexp,
    refine this.ae_strongly_measurable'.ae_strongly_measurable'_of_measurable_space_le_on
      hm hs_m (Œª t, (hs t).mp) _,
    exact condexp_ae_eq_restrict_zero hs_m.compl (indicator_ae_eq_restrict_compl (hm _ hs_m)), },
  intros t ht hŒºt,
  have : ‚à´ x in t, Œº[s.indicator f|m] x ‚àÇŒº = ‚à´ x in s ‚à© t, Œº[s.indicator f|m] x ‚àÇŒº,
  { rw ‚Üê integral_add_compl (hm _ hs_m) integrable_condexp.integrable_on,
    suffices : ‚à´ x in s·∂ú, Œº[s.indicator f|m] x ‚àÇŒº.restrict t = 0,
      by rw [this, add_zero, measure.restrict_restrict (hm _ hs_m)],
    rw measure.restrict_restrict (measurable_set.compl (hm _ hs_m)),
    suffices : Œº[s.indicator f|m] =·µê[Œº.restrict s·∂ú] 0,
    { rw [set.inter_comm, ‚Üê measure.restrict_restrict (hm‚ÇÇ _ ht)],
      calc ‚à´ (x : Œ±) in t, Œº[s.indicator f|m] x ‚àÇŒº.restrict s·∂ú
          = ‚à´ (x : Œ±) in t, 0 ‚àÇŒº.restrict s·∂ú : begin
            refine set_integral_congr_ae (hm‚ÇÇ _ ht) _,
            filter_upwards [this] with x hx h using hx,
          end
      ... = 0 : integral_zero _ _, },
    refine condexp_ae_eq_restrict_zero hs_m.compl _,
    exact indicator_ae_eq_restrict_compl (hm _ hs_m), },
  have hst_m : measurable_set[m] (s ‚à© t) := (hs _).mpr (hs_m‚ÇÇ.inter ht),
  simp_rw [this, set_integral_condexp hm‚ÇÇ (hf_int.indicator (hm _ hs_m)) ht,
    set_integral_condexp hm (hf_int.indicator (hm _ hs_m)) hst_m,
    integral_indicator (hm _ hs_m), measure.restrict_restrict (hm _ hs_m),
    ‚Üê set.inter_assoc, set.inter_self],
end

end measure_theory
