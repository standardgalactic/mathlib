/-
Copyright ¬© 2022 Nicol√≤ Cavalleri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicol√≤ Cavalleri, S√©bastien Gou√´zel, Heather Macbeth, Floris van Doorn
-/
import topology.fiber_bundle.basic

/-!
# Standard constructions on fiber bundles

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file contains several standard constructions on fiber bundles:

* `bundle.trivial.fiber_bundle ùïú B F`: the trivial fiber bundle with model fiber `F` over the base
  `B`

* `fiber_bundle.prod`: for fiber bundles `E‚ÇÅ` and `E‚ÇÇ` over a common base, a fiber bundle structure
  on their fiberwise product `E‚ÇÅ √ó·µá E‚ÇÇ` (the notation stands for `Œª x, E‚ÇÅ x √ó E‚ÇÇ x`).

* `fiber_bundle.pullback`: for a fiber bundle `E` over `B`, a fiber bundle structure on its
  pullback `f *·µñ E` by a map `f : B' ‚Üí B` (the notation is a type synonym for `E ‚àò f`).

## Tags

fiber bundle, fibre bundle, fiberwise product, pullback

-/
open topological_space filter set bundle
open_locale topology classical bundle

/-! ### The trivial bundle -/

namespace bundle
namespace trivial

variables (B : Type*) (F : Type*)

instance [I : topological_space F] : ‚àÄ x : B, topological_space (trivial B F x) := Œª x, I

instance [t‚ÇÅ : topological_space B] [t‚ÇÇ : topological_space F] :
  topological_space (total_space (trivial B F)) :=
induced total_space.proj t‚ÇÅ ‚äì induced (trivial.proj_snd B F) t‚ÇÇ

variables [topological_space B] [topological_space F]

/-- Local trivialization for trivial bundle. -/
def trivialization : trivialization F (œÄ (bundle.trivial B F)) :=
{ to_fun := Œª x, (x.fst, x.snd),
  inv_fun := Œª y, ‚ü®y.fst, y.snd‚ü©,
  source := univ,
  target := univ,
  map_source' := Œª x h, mem_univ (x.fst, x.snd),
  map_target' := Œª y h,  mem_univ ‚ü®y.fst, y.snd‚ü©,
  left_inv' := Œª x h, sigma.eq rfl rfl,
  right_inv' := Œª x h, prod.ext rfl rfl,
  open_source := is_open_univ,
  open_target := is_open_univ,
  continuous_to_fun := by { rw [‚Üêcontinuous_iff_continuous_on_univ, continuous_iff_le_induced],
    simp only [prod.topological_space, induced_inf, induced_compose], exact le_rfl, },
  continuous_inv_fun := by { rw [‚Üêcontinuous_iff_continuous_on_univ, continuous_iff_le_induced],
    simp only [bundle.total_space.topological_space, induced_inf, induced_compose],
    exact le_rfl, },
  base_set := univ,
  open_base_set := is_open_univ,
  source_eq := rfl,
  target_eq := by simp only [univ_prod_univ],
  proj_to_fun := Œª y hy, rfl }

@[simp]
lemma trivialization_source : (trivialization B F).source = univ := rfl

@[simp]
lemma trivialization_target : (trivialization B F).target = univ := rfl

/-- Fiber bundle instance on the trivial bundle. -/
instance fiber_bundle : fiber_bundle F (bundle.trivial B F) :=
{ trivialization_atlas := {bundle.trivial.trivialization B F},
  trivialization_at := Œª x, bundle.trivial.trivialization B F,
  mem_base_set_trivialization_at := mem_univ,
  trivialization_mem_atlas := Œª x, mem_singleton _,
  total_space_mk_inducing := Œª b, ‚ü®begin
    have : (Œª (x : trivial B F b), x) = @id F, by { ext x, refl },
    simp only [total_space.topological_space, induced_inf, induced_compose, function.comp,
      total_space.proj, induced_const, top_inf_eq, trivial.proj_snd, id.def,
      trivial.topological_space, this, induced_id],
  end‚ü© }

lemma eq_trivialization (e : _root_.trivialization F (œÄ (bundle.trivial B F)))
  [i : mem_trivialization_atlas e] :
  e = trivialization B F :=
i.out

end trivial
end bundle

/-! ### Fibrewise product of two bundles -/

section prod

variables {B : Type*}

section defs
variables (E‚ÇÅ : B ‚Üí Type*) (E‚ÇÇ : B ‚Üí Type*)
variables [topological_space (total_space E‚ÇÅ)] [topological_space (total_space E‚ÇÇ)]

/-- Equip the total space of the fiberwise product of two fiber bundles `E‚ÇÅ`, `E‚ÇÇ` with
the induced topology from the diagonal embedding into `total_space E‚ÇÅ √ó total_space E‚ÇÇ`. -/
instance fiber_bundle.prod.topological_space : topological_space (total_space (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
topological_space.induced
  (Œª p, ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ)))
  (by apply_instance : topological_space (total_space E‚ÇÅ √ó total_space E‚ÇÇ))

/-- The diagonal map from the total space of the fiberwise product of two fiber bundles
`E‚ÇÅ`, `E‚ÇÇ` into `total_space E‚ÇÅ √ó total_space E‚ÇÇ` is `inducing`. -/
lemma fiber_bundle.prod.inducing_diag : inducing
  (Œª p, (‚ü®p.1, p.2.1‚ü©, ‚ü®p.1, p.2.2‚ü©) :
    total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ) :=
‚ü®rfl‚ü©

end defs

open fiber_bundle

variables [topological_space B]
  (F‚ÇÅ : Type*) [topological_space F‚ÇÅ] (E‚ÇÅ : B ‚Üí Type*) [topological_space (total_space E‚ÇÅ)]
  (F‚ÇÇ : Type*) [topological_space F‚ÇÇ] (E‚ÇÇ : B ‚Üí Type*) [topological_space (total_space E‚ÇÇ)]

namespace trivialization
variables {F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ} (e‚ÇÅ : trivialization F‚ÇÅ (œÄ E‚ÇÅ)) (e‚ÇÇ : trivialization F‚ÇÇ (œÄ E‚ÇÇ))

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for fiber bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the forward
function for the construction `trivialization.prod`, the induced
trivialization for the fiberwise product of `E‚ÇÅ` and `E‚ÇÇ`. -/
def prod.to_fun' : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí B √ó (F‚ÇÅ √ó F‚ÇÇ) :=
Œª p, ‚ü®p.1, (e‚ÇÅ ‚ü®p.1, p.2.1‚ü©).2, (e‚ÇÇ ‚ü®p.1, p.2.2‚ü©).2‚ü©

variables {e‚ÇÅ e‚ÇÇ}

lemma prod.continuous_to_fun : continuous_on (prod.to_fun' e‚ÇÅ e‚ÇÇ)
  (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set)) :=
begin
  let f‚ÇÅ : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ :=
    Œª p, ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ)),
  let f‚ÇÇ : total_space E‚ÇÅ √ó total_space E‚ÇÇ ‚Üí (B √ó F‚ÇÅ) √ó (B √ó F‚ÇÇ) := Œª p, ‚ü®e‚ÇÅ p.1, e‚ÇÇ p.2‚ü©,
  let f‚ÇÉ : (B √ó F‚ÇÅ) √ó (B √ó F‚ÇÇ) ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := Œª p, ‚ü®p.1.1, p.1.2, p.2.2‚ü©,
  have hf‚ÇÅ : continuous f‚ÇÅ := (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous,
  have hf‚ÇÇ : continuous_on f‚ÇÇ (e‚ÇÅ.source √óÀ¢ e‚ÇÇ.source) :=
    e‚ÇÅ.to_local_homeomorph.continuous_on.prod_map e‚ÇÇ.to_local_homeomorph.continuous_on,
  have hf‚ÇÉ : continuous f‚ÇÉ :=
    (continuous_fst.comp continuous_fst).prod_mk (continuous_snd.prod_map continuous_snd),
  refine ((hf‚ÇÉ.comp_continuous_on hf‚ÇÇ).comp hf‚ÇÅ.continuous_on _).congr _,
  { rw [e‚ÇÅ.source_eq, e‚ÇÇ.source_eq],
    exact maps_to_preimage _ _ },
  rintros ‚ü®b, v‚ÇÅ, v‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©,
  simp only [prod.to_fun', prod.mk.inj_iff, eq_self_iff_true, and_true],
  rw e‚ÇÅ.coe_fst,
  rw [e‚ÇÅ.source_eq, mem_preimage],
  exact hb‚ÇÅ,
end

variables (e‚ÇÅ e‚ÇÇ) [Œ† x, has_zero (E‚ÇÅ x)] [‚àÄ x, has_zero (E‚ÇÇ x)]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for fiber bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the inverse
function for the construction `trivialization.prod`, the induced
trivialization for the fiberwise product of `E‚ÇÅ` and `E‚ÇÇ`. -/
noncomputable def prod.inv_fun' (p : B √ó (F‚ÇÅ √ó F‚ÇÇ)) : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) :=
‚ü®p.1, e‚ÇÅ.symm p.1 p.2.1, e‚ÇÇ.symm p.1 p.2.2‚ü©

variables {e‚ÇÅ e‚ÇÇ}

lemma prod.left_inv {x : total_space (E‚ÇÅ √ó·µá E‚ÇÇ)}
  (h : x ‚àà @total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set)) :
  prod.inv_fun' e‚ÇÅ e‚ÇÇ (prod.to_fun' e‚ÇÅ e‚ÇÇ x) = x :=
begin
  obtain ‚ü®x, v‚ÇÅ, v‚ÇÇ‚ü© := x,
  obtain ‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü© := h,
  simp only [prod.to_fun', prod.inv_fun', symm_apply_apply_mk, h‚ÇÅ, h‚ÇÇ]
end

lemma prod.right_inv {x : B √ó F‚ÇÅ √ó F‚ÇÇ}
  (h : x ‚àà (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ (univ : set (F‚ÇÅ √ó F‚ÇÇ))) :
  prod.to_fun' e‚ÇÅ e‚ÇÇ (prod.inv_fun' e‚ÇÅ e‚ÇÇ x) = x :=
begin
  obtain ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü© := x,
  obtain ‚ü®‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü©, -‚ü© := h,
  simp only [prod.to_fun', prod.inv_fun', apply_mk_symm, h‚ÇÅ, h‚ÇÇ]
end

lemma prod.continuous_inv_fun :
  continuous_on (prod.inv_fun' e‚ÇÅ e‚ÇÇ) ((e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ univ) :=
begin
  rw (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous_on_iff,
  have H‚ÇÅ : continuous (Œª p : B √ó F‚ÇÅ √ó F‚ÇÇ, ((p.1, p.2.1), (p.1, p.2.2))) :=
    (continuous_id.prod_map continuous_fst).prod_mk (continuous_id.prod_map continuous_snd),
  refine (e‚ÇÅ.continuous_on_symm.prod_map e‚ÇÇ.continuous_on_symm).comp H‚ÇÅ.continuous_on _,
  exact Œª x h, ‚ü®‚ü®h.1.1, mem_univ _‚ü©, ‚ü®h.1.2, mem_univ _‚ü©‚ü©
end

variables (e‚ÇÅ e‚ÇÇ e‚ÇÅ e‚ÇÇ)

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for bundle types `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the induced
trivialization for the fiberwise product of `E‚ÇÅ` and `E‚ÇÇ`, whose base set is
`e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set`. -/
noncomputable def prod : trivialization (F‚ÇÅ √ó F‚ÇÇ) (œÄ (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
{ to_fun := prod.to_fun' e‚ÇÅ e‚ÇÇ,
  inv_fun := prod.inv_fun' e‚ÇÅ e‚ÇÇ,
  source := (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ)) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set),
  target := (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ set.univ,
  map_source' := Œª x h, ‚ü®h, set.mem_univ _‚ü©,
  map_target' := Œª x h, h.1,
  left_inv' := Œª x, prod.left_inv,
  right_inv' := Œª x, prod.right_inv,
  open_source := begin
    convert (e‚ÇÅ.open_source.prod e‚ÇÇ.open_source).preimage
      (fiber_bundle.prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous,
    ext x,
    simp only [trivialization.source_eq] with mfld_simps,
  end,
  open_target := (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).prod is_open_univ,
  continuous_to_fun := prod.continuous_to_fun,
  continuous_inv_fun := prod.continuous_inv_fun,
  base_set := e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set,
  open_base_set := e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set,
  source_eq := rfl,
  target_eq := rfl,
  proj_to_fun := Œª x h, rfl }

@[simp] lemma base_set_prod : (prod e‚ÇÅ e‚ÇÇ).base_set = e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set :=
rfl

lemma prod_symm_apply (x : B) (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) : (prod e‚ÇÅ e‚ÇÇ).to_local_equiv.symm (x, w‚ÇÅ, w‚ÇÇ)
  = ‚ü®x, e‚ÇÅ.symm x w‚ÇÅ, e‚ÇÇ.symm x w‚ÇÇ‚ü© :=
rfl

end trivialization

open trivialization

variables [Œ† x, has_zero (E‚ÇÅ x)] [‚àÄ x, has_zero (E‚ÇÇ x)]
  [Œ† x : B, topological_space (E‚ÇÅ x)] [Œ† x : B, topological_space (E‚ÇÇ x)]
  [fiber_bundle F‚ÇÅ E‚ÇÅ] [fiber_bundle F‚ÇÇ E‚ÇÇ]

/-- The product of two fiber bundles is a fiber bundle. -/
noncomputable instance fiber_bundle.prod : fiber_bundle (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) :=
{ total_space_mk_inducing := Œª b,
  begin
    rw (prod.inducing_diag E‚ÇÅ E‚ÇÇ).inducing_iff,
    exact (total_space_mk_inducing F‚ÇÅ E‚ÇÅ b).prod_mk (total_space_mk_inducing F‚ÇÇ E‚ÇÇ b),
  end,
  trivialization_atlas :=
    {e |  ‚àÉ (e‚ÇÅ : trivialization F‚ÇÅ (œÄ E‚ÇÅ)) (e‚ÇÇ : trivialization F‚ÇÇ (œÄ E‚ÇÇ))
    [mem_trivialization_atlas e‚ÇÅ] [mem_trivialization_atlas e‚ÇÇ], by exactI
    e = trivialization.prod e‚ÇÅ e‚ÇÇ},
  trivialization_at := Œª b, (trivialization_at F‚ÇÅ E‚ÇÅ b).prod (trivialization_at F‚ÇÇ E‚ÇÇ b),
  mem_base_set_trivialization_at :=
    Œª b, ‚ü®mem_base_set_trivialization_at F‚ÇÅ E‚ÇÅ b, mem_base_set_trivialization_at F‚ÇÇ E‚ÇÇ b‚ü©,
  trivialization_mem_atlas := Œª b, ‚ü®trivialization_at F‚ÇÅ E‚ÇÅ b, trivialization_at F‚ÇÇ E‚ÇÇ b,
    by apply_instance, by apply_instance, rfl‚ü© }

instance {e‚ÇÅ : trivialization F‚ÇÅ (œÄ E‚ÇÅ)} {e‚ÇÇ : trivialization F‚ÇÇ (œÄ E‚ÇÇ)}
  [mem_trivialization_atlas e‚ÇÅ] [mem_trivialization_atlas e‚ÇÇ] :
  mem_trivialization_atlas (e‚ÇÅ.prod e‚ÇÇ : trivialization (F‚ÇÅ √ó F‚ÇÇ) (œÄ (E‚ÇÅ √ó·µá E‚ÇÇ))) :=
{ out := ‚ü®e‚ÇÅ, e‚ÇÇ, by apply_instance, by apply_instance, rfl‚ü© }

end prod

/-! ### Pullbacks of fiber bundles -/

section
variables {B : Type*} (F : Type*) (E : B ‚Üí Type*) {B' : Type*} (f : B' ‚Üí B)

instance [‚àÄ (x : B), topological_space (E x)] : ‚àÄ (x : B'), topological_space ((f *·µñ E) x) :=
by delta_instance bundle.pullback

variables [topological_space B'] [topological_space (total_space E)]

/-- Definition of `pullback.total_space.topological_space`, which we make irreducible. -/
@[irreducible] def pullback_topology : topological_space (total_space (f *·µñ E)) :=
induced total_space.proj ‚Äπtopological_space B'‚Ä∫ ‚äì
induced (pullback.lift f) ‚Äπtopological_space (total_space E)‚Ä∫

/-- The topology on the total space of a pullback bundle is the coarsest topology for which both
the projections to the base and the map to the original bundle are continuous. -/
instance pullback.total_space.topological_space : topological_space (total_space (f *·µñ E)) :=
pullback_topology E f

lemma pullback.continuous_proj (f : B' ‚Üí B) : continuous (@total_space.proj _ (f *·µñ E)) :=
begin
  rw [continuous_iff_le_induced, pullback.total_space.topological_space, pullback_topology],
  exact inf_le_left,
end

lemma pullback.continuous_lift (f : B' ‚Üí B) : continuous (@pullback.lift B E B' f) :=
begin
  rw [continuous_iff_le_induced, pullback.total_space.topological_space, pullback_topology],
  exact inf_le_right,
end

lemma inducing_pullback_total_space_embedding (f : B' ‚Üí B) :
  inducing (@pullback_total_space_embedding B E B' f) :=
begin
  constructor,
  simp_rw [prod.topological_space, induced_inf, induced_compose,
    pullback.total_space.topological_space, pullback_topology],
  refl
end

section fiber_bundle
variables (F) [topological_space F] [topological_space B]

lemma pullback.continuous_total_space_mk [‚àÄ x, topological_space (E x)]
  [fiber_bundle F E] {f : B' ‚Üí B} {x : B'} :
  continuous (@total_space_mk _ (f *·µñ E) x) :=
begin
  simp only [continuous_iff_le_induced, pullback.total_space.topological_space, induced_compose,
    induced_inf, function.comp, total_space_mk, total_space.proj, induced_const, top_inf_eq,
    pullback_topology],
  exact le_of_eq (fiber_bundle.total_space_mk_inducing F E (f x)).induced,
end

variables {E F} [‚àÄ b, has_zero (E b)] {K : Type*} [continuous_map_class K B' B]

/-- A fiber bundle trivialization can be pulled back to a trivialization on the pullback bundle. -/
noncomputable def trivialization.pullback (e : trivialization F (œÄ E)) (f : K) :
  trivialization F (œÄ ((f : B' ‚Üí B) *·µñ E)) :=
{ to_fun := Œª z, (z.proj, (e (pullback.lift f z)).2),
  inv_fun := Œª y, @total_space_mk _ (f *·µñ E) y.1 (e.symm (f y.1) y.2),
  source := pullback.lift f ‚Åª¬π' e.source,
  base_set := f ‚Åª¬π' e.base_set,
  target := (f ‚Åª¬π' e.base_set) √óÀ¢ univ,
  map_source' := Œª x h, by { simp_rw [e.source_eq, mem_preimage, pullback.proj_lift] at h,
    simp_rw [prod_mk_mem_set_prod_eq, mem_univ, and_true, mem_preimage, h] },
  map_target' := Œª y h, by { rw [mem_prod, mem_preimage] at h,
    simp_rw [e.source_eq, mem_preimage, pullback.proj_lift, h.1] },
  left_inv' := Œª x h, by { simp_rw [mem_preimage, e.mem_source, pullback.proj_lift] at h,
    simp_rw [pullback.lift, e.symm_apply_apply_mk h, total_space.eta] },
  right_inv' := Œª x h, by { simp_rw [mem_prod, mem_preimage, mem_univ, and_true] at h,
    simp_rw [total_space.proj_mk, pullback.lift_mk, e.apply_mk_symm h, prod.mk.eta] },
  open_source := by { simp_rw [e.source_eq, ‚Üê preimage_comp], exact ((map_continuous f).comp $
    pullback.continuous_proj E f).is_open_preimage _ e.open_base_set },
  open_target := ((map_continuous f).is_open_preimage _ e.open_base_set).prod is_open_univ,
  open_base_set := (map_continuous f).is_open_preimage _ e.open_base_set,
  continuous_to_fun := (pullback.continuous_proj E f).continuous_on.prod
    (continuous_snd.comp_continuous_on $
    e.continuous_on.comp (pullback.continuous_lift E f).continuous_on subset.rfl),
  continuous_inv_fun := begin
    dsimp only,
    simp_rw [(inducing_pullback_total_space_embedding E f).continuous_on_iff, function.comp,
      pullback_total_space_embedding, total_space.proj_mk],
    dsimp only [total_space.proj_mk],
    refine continuous_on_fst.prod (e.continuous_on_symm.comp
      ((map_continuous f).prod_map continuous_id).continuous_on subset.rfl)
  end,
  source_eq := by { dsimp only, rw e.source_eq, refl, },
  target_eq := rfl,
  proj_to_fun := Œª y h, rfl }

noncomputable instance fiber_bundle.pullback [‚àÄ x, topological_space (E x)]
  [fiber_bundle F E] (f : K) : fiber_bundle F ((f : B' ‚Üí B) *·µñ E) :=
{ total_space_mk_inducing := Œª x, inducing_of_inducing_compose
    (pullback.continuous_total_space_mk F E) (pullback.continuous_lift E f)
    (total_space_mk_inducing F E (f x)),
  trivialization_atlas :=
    {ef | ‚àÉ (e : trivialization F (œÄ E)) [mem_trivialization_atlas e], ef = e.pullback f},
  trivialization_at := Œª x, (trivialization_at F E (f x)).pullback f,
  mem_base_set_trivialization_at := Œª x, mem_base_set_trivialization_at F E (f x),
  trivialization_mem_atlas := Œª x, ‚ü®trivialization_at F E (f x), by apply_instance, rfl‚ü© }

end fiber_bundle
end
