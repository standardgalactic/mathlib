import category_theory.monoidal.braided
import category_theory.reflects_isomorphisms
import category_theory.monoidal.End
import combinatorics.quiver
import tactic

open category_theory
open category_theory.monoidal_category
open quiver

universes v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable theory

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] [monoidal_category C]

inductive word‚ÇÄ
| blank : word‚ÇÄ
| concat : word‚ÇÄ ‚Üí word‚ÇÄ ‚Üí word‚ÇÄ

open word‚ÇÄ
infixr ` ‚ñ° `:80 := concat

def word‚ÇÄ.interpret (x : C) : word‚ÇÄ ‚Üí C
| blank := x
| (u ‚ñ° v) := u.interpret ‚äó v.interpret

@[simp]
lemma concat_ne_right : ‚àÄ {u v : word‚ÇÄ}, u ‚ñ° v ‚â† v
| u blank h := word‚ÇÄ.no_confusion h
| u (v ‚ñ° w) h := concat.inj_arrow h (Œª _, concat_ne_right)

@[simp]
lemma concat_ne_left : ‚àÄ {u v : word‚ÇÄ}, u ‚ñ° v ‚â† u
| blank v h := word‚ÇÄ.no_confusion h
| (u ‚ñ° v) w h := concat.inj_arrow h (Œª h‚ÇÅ _, concat_ne_left h‚ÇÅ)

@[simp] lemma ne_concat_right {u v} : v ‚â† u ‚ñ° v := concat_ne_right.symm
@[simp] lemma ne_concat_left {u v} : u ‚â† u ‚ñ° v := concat_ne_left.symm

inductive hom‚ÇÄ : word‚ÇÄ ‚Üí word‚ÇÄ ‚Üí Sort*
| Œ±_hom : ‚àÄ (u v w : word‚ÇÄ), hom‚ÇÄ ((u ‚ñ° v) ‚ñ° w) (u ‚ñ° (v ‚ñ° w))
| Œ±_inv : ‚àÄ (u v w : word‚ÇÄ), hom‚ÇÄ (u ‚ñ° (v ‚ñ° w)) ((u ‚ñ° v) ‚ñ° w)
| tensor_id : ‚àÄ {u v} (w), hom‚ÇÄ u v ‚Üí hom‚ÇÄ (u ‚ñ° w) (v ‚ñ° w)
| id_tensor : ‚àÄ (u) {v w}, hom‚ÇÄ v w ‚Üí hom‚ÇÄ (u ‚ñ° v) (u ‚ñ° w)

def hom‚ÇÄ.interpret (x : C) : ‚àÄ {u v}, hom‚ÇÄ u v ‚Üí (u.interpret x ‚ü∂ v.interpret x)
| _ _ (hom‚ÇÄ.Œ±_hom u v w) := (Œ±_ _ _ _).hom
| _ _ (hom‚ÇÄ.Œ±_inv u v w) := (Œ±_ _ _ _).inv
| _ _ (hom‚ÇÄ.tensor_id w s) := s.interpret ‚äó ùüô _
| _ _ (hom‚ÇÄ.id_tensor w s) := ùüô _ ‚äó s.interpret

lemma hom‚ÇÄ.ne {u v} (s : hom‚ÇÄ u v) : u ‚â† v :=
by { induction s; simp * }

@[simp]
def special : ‚Ñï ‚Üí word‚ÇÄ
| 0 := blank
| (n+1) := blank ‚ñ° special n

@[simp]
def word‚ÇÄ.length : word‚ÇÄ ‚Üí ‚Ñï
| blank := 0
| (v ‚ñ° w) := v.length + w.length + 1

@[simp]
lemma special_length : ‚àÄ n, (special n).length = n
| 0 := by simp
| (n+1) := by simp [special_length n]

@[simp] lemma word‚ÇÄ.length_eq_zero_iff : ‚àÄ (u : word‚ÇÄ), u.length = 0 ‚Üî u = blank
| blank := by simp
| (u ‚ñ° v) := by simp

@[simp] lemma word‚ÇÄ.special_eq_blank_iff : ‚àÄ n, special n = blank ‚Üî n = 0
| 0 := by simp
| (n+1) := by simp

@[simp]
def word‚ÇÄ.rank : word‚ÇÄ ‚Üí ‚Ñï
| blank := 0
| (v ‚ñ° w) := v.rank + w.rank + v.length

lemma hom‚ÇÄ.same_length : ‚àÄ {u v : word‚ÇÄ} (s : hom‚ÇÄ u v), u.length = v.length
| _ _ (hom‚ÇÄ.Œ±_hom u v w) := by { dsimp, linarith }
| _ _ (hom‚ÇÄ.Œ±_inv u v w) := by { dsimp, linarith }
| (u ‚ñ° _) (v ‚ñ° _) (hom‚ÇÄ.tensor_id w s) := by { dsimp, linarith [s.same_length] }
| (_ ‚ñ° u) (_ ‚ñ° v) (hom‚ÇÄ.id_tensor w s) := by { dsimp, linarith [s.same_length] }

lemma word‚ÇÄ.rank_eq_zero_iff : ‚àÄ (u : word‚ÇÄ), u.rank = 0 ‚Üî u = special u.length
| blank := by simp
| (u ‚ñ° v) :=
  begin
    simp only [u.rank_eq_zero_iff, v.rank_eq_zero_iff, word‚ÇÄ.length, special, word‚ÇÄ.rank,
      add_eq_zero_iff, word‚ÇÄ.length_eq_zero_iff],
    rw and_comm,
    apply and_congr_right,
    rintro rfl,
    simp
  end

-- inductive hom‚ÇÄ.is_directed : ‚àÄ {v w : word‚ÇÄ}, hom‚ÇÄ v w ‚Üí Prop
-- | Œ± : ‚àÄ {u v w}, hom‚ÇÄ.is_directed (hom‚ÇÄ.Œ±_hom u v w)
-- | tensor_id : ‚àÄ (u) {v w} (s : hom‚ÇÄ v w), hom‚ÇÄ.is_directed s ‚Üí hom‚ÇÄ.is_directed (hom‚ÇÄ.tensor_id u s)
-- | id_tensor : ‚àÄ {u v} (w) (s : hom‚ÇÄ u v), hom‚ÇÄ.is_directed s ‚Üí hom‚ÇÄ.is_directed (hom‚ÇÄ.id_tensor w s)

@[simp]
def hom‚ÇÄ.is_directed : ‚àÄ {u v}, hom‚ÇÄ u v ‚Üí Prop
| _ _ (hom‚ÇÄ.Œ±_hom _ _ _) := true
| _ _ (hom‚ÇÄ.Œ±_inv _ _ _) := false
| _ _ (hom‚ÇÄ.tensor_id _ s) := s.is_directed
| _ _ (hom‚ÇÄ.id_tensor _ s) := s.is_directed

@[simp]
def hom‚ÇÄ.inv : ‚àÄ {u v}, hom‚ÇÄ u v ‚Üí hom‚ÇÄ v u
| _ _ (hom‚ÇÄ.Œ±_hom _ _ _) := hom‚ÇÄ.Œ±_inv _ _ _
| _ _ (hom‚ÇÄ.Œ±_inv _ _ _) := hom‚ÇÄ.Œ±_hom _ _ _
| _ _ (hom‚ÇÄ.tensor_id _ s) := hom‚ÇÄ.tensor_id _ s.inv
| _ _ (hom‚ÇÄ.id_tensor _ s) := hom‚ÇÄ.id_tensor _ s.inv

lemma hom‚ÇÄ.inv_inv : ‚àÄ {u v} (s : hom‚ÇÄ u v), s.inv.inv = s
| _ _ (hom‚ÇÄ.Œ±_hom _ _ _) := rfl
| _ _ (hom‚ÇÄ.Œ±_inv _ _ _) := rfl
| _ _ (hom‚ÇÄ.tensor_id _ s) := congr_arg (hom‚ÇÄ.tensor_id _) s.inv_inv
| _ _ (hom‚ÇÄ.id_tensor _ s) := congr_arg (hom‚ÇÄ.id_tensor _) s.inv_inv

lemma hom‚ÇÄ.inv_directed : ‚àÄ {u v} (s : hom‚ÇÄ u v), s.inv.is_directed ‚Üî ¬¨s.is_directed
| _ _ (hom‚ÇÄ.Œ±_hom _ _ _) := by simp
| _ _ (hom‚ÇÄ.Œ±_inv _ _ _) := by simp
| _ _ (hom‚ÇÄ.tensor_id _ s) := by simp [s.inv_directed]
| _ _ (hom‚ÇÄ.id_tensor _ s) := by simp [s.inv_directed]

def hom‚ÇÄ.is_directed.rank_lt_rank : ‚àÄ {u v : word‚ÇÄ} {s : hom‚ÇÄ u v}, s.is_directed ‚Üí v.rank < u.rank
| _ _ (hom‚ÇÄ.Œ±_hom u v w) hs := by { dsimp, linarith }
| _ _ (hom‚ÇÄ.Œ±_inv u v w) hs := hs.elim
| (u ‚ñ° _) (v ‚ñ° _) (hom‚ÇÄ.tensor_id w s) hs :=
    by { dsimp at hs, simpa [s.same_length] using hs.rank_lt_rank }
| (_ ‚ñ° u) (_ ‚ñ° v) (hom‚ÇÄ.id_tensor w s) hs :=
    by { dsimp at hs, simpa [s.same_length] using hs.rank_lt_rank }

def as_quiver : quiver word‚ÇÄ := ‚ü®hom‚ÇÄ‚ü©
instance : has_reverse as_quiver := ‚ü®Œª u v, hom‚ÇÄ.inv‚ü©

lemma hom‚ÇÄ.subsingleton_aux :
  ‚àÄ {u u' v v' : word‚ÇÄ} (s : hom‚ÇÄ u v) (s' : hom‚ÇÄ u' v') (hu : u = u') (hv : v = v'),
    s.is_directed ‚Üí s'.is_directed ‚Üí s == s'
| _ _ _ _ (hom‚ÇÄ.Œ±_hom _ _ _) (hom‚ÇÄ.Œ±_hom _ _ _) rfl _ _ _ := heq.rfl
| _ _ _ _ (hom‚ÇÄ.Œ±_hom _ _ _) (hom‚ÇÄ.tensor_id _ _) rfl hv _ _ :=
    concat.inj_arrow hv (Œª _ h‚ÇÇ, (concat_ne_right h‚ÇÇ).elim)
| _ _ _ _ (hom‚ÇÄ.Œ±_hom u v w) (hom‚ÇÄ.id_tensor _ _) rfl hv _ _ :=
    concat.inj_arrow hv (Œª h‚ÇÅ _, (ne_concat_left h‚ÇÅ).elim)
| _ _ _ _ (hom‚ÇÄ.tensor_id u' s) (hom‚ÇÄ.tensor_id _ s') rfl rfl hs hs' :=
    by rw eq_of_heq (s.subsingleton_aux s' rfl rfl hs hs')
| _ _ _ _ (hom‚ÇÄ.tensor_id _ s) (hom‚ÇÄ.Œ±_hom u v w) rfl hv _ _ :=
    concat.inj_arrow hv (Œª _ h‚ÇÇ, (ne_concat_right h‚ÇÇ).elim)
| _ _ _ _ (hom‚ÇÄ.tensor_id w s) (hom‚ÇÄ.id_tensor w' s') rfl hv _ _ :=
    concat.inj_arrow hv (Œª h‚ÇÅ _, (s.ne h‚ÇÅ.symm).elim)
| _ _ _ _ (hom‚ÇÄ.id_tensor _ s) (hom‚ÇÄ.id_tensor _ s') rfl rfl hs hs' :=
    by rw eq_of_heq (s.subsingleton_aux s' rfl rfl hs hs')
| _ _ _ _ (hom‚ÇÄ.id_tensor _ s) (hom‚ÇÄ.Œ±_hom u v w) rfl hv _ _ :=
    concat.inj_arrow hv (Œª h‚ÇÅ _, (concat_ne_left h‚ÇÅ).elim)
| _ _ _ _ (hom‚ÇÄ.id_tensor w s) (hom‚ÇÄ.tensor_id w' s') rfl hv _ _ :=
    concat.inj_arrow hv (Œª h‚ÇÅ _, (s'.ne h‚ÇÅ).elim)

lemma hom‚ÇÄ.subsingleton {u v} (s s' : hom‚ÇÄ u v) (hs : s.is_directed) (hs' : s'.is_directed) :
  s = s' :=
eq_of_heq (s.subsingleton_aux s' rfl rfl hs hs')

def id_tensor_path (w) :
  ‚àÄ {u v}, as_quiver.path u v ‚Üí as_quiver.path (w ‚ñ° u) (w ‚ñ° v)
| _ _ path.nil := path.nil
| u v (path.cons t h) := path.cons (id_tensor_path t) (hom‚ÇÄ.id_tensor w h)
using_well_founded {rel_tac := Œª _ _, `[exact ‚ü®_, measure_wf (Œª t, quiver.path.length t.2.2)‚ü©]}

def tensor_id_path (w) :
  ‚àÄ {u v}, as_quiver.path u v ‚Üí as_quiver.path (u ‚ñ° w) (v ‚ñ° w)
| _ _ path.nil := path.nil
| u v (path.cons t h) := path.cons (tensor_id_path t) (hom‚ÇÄ.tensor_id w h)
using_well_founded {rel_tac := Œª _ _, `[exact ‚ü®_, measure_wf (Œª t, quiver.path.length t.2.2)‚ü©]}

lemma ends_of_path {u : word‚ÇÄ} : ‚àÄ {v}, as_quiver.path u v ‚Üí u.length = v.length
| _ path.nil := rfl
| _ (path.cons h (t : hom‚ÇÄ _ _)) := by rw [ends_of_path h, t.same_length]

def path_of_eq : ‚àÄ {m n}, m = n ‚Üí as_quiver.path (special m) (special n)
| n _ rfl := path.nil

def canonical : ‚àÄ (u : word‚ÇÄ), as_quiver.path u (special u.length)
| blank := path.nil
| ((u ‚ñ° v) ‚ñ° w) :=
  path.comp
    (arrow.to_path (hom‚ÇÄ.Œ±_hom _ _ _))
    (path.comp (canonical (u ‚ñ° v ‚ñ° w))
               (path_of_eq (by { simp, linarith })))
| (blank ‚ñ° u) := id_tensor_path blank (path.comp (canonical u) (path_of_eq (by simp)))
using_well_founded {rel_tac := Œª _ _, `[exact ‚ü®_, measure_wf (Œª t, word‚ÇÄ.rank t + word‚ÇÄ.length t)‚ü©]}

def exists_path {u v : word‚ÇÄ} (h : u.length = v.length) : as_quiver.path u v :=
((canonical u).comp (path_of_eq h)).comp (canonical v).reverse

  -- quiver.path.comp (quiver.arrow.to_path (hom‚ÇÄ.Œ±_hom _ _ _)) sorry
-- | (blank ‚ñ° u) :=
--   begin
--     change as_quiver.path _ (blank ‚ñ° special (0 + u.length)),

--   end

-- inductive path {V} (G : quiver.{v u} V) (a : V) : V ‚Üí Sort (max (u+1) v)
-- | nil  : path a
-- | cons : Œ† {b c : V}, path b ‚Üí G.arrow b c ‚Üí path c


-- def hom‚ÇÄ.is_directed : ‚àÄ {v w : word‚ÇÄ}, hom‚ÇÄ v w ‚Üí Prop
-- | _ _ hom‚ÇÄ.Œ±_hom := true
-- | _ _ hom‚ÇÄ.Œ±_inv := false
-- | _ _ (hom‚ÇÄ.tensor_id _ s) := s.is_directed
-- | _ _ (hom‚ÇÄ.id_tensor _ s) := s.is_directed

-- #reduce special 8
