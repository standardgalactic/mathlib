/-
Copyright (c) 2020 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/
import order.basic
import data.equiv.encodable.basic
import order.atoms

/-!
# Order ideals, cofinal sets, and the Rasiowa‚ÄìSikorski lemma

## Main definitions

Throughout this file, `P` is at least a preorder, but some sections require more
structure, such as a bottom element, a top element, or a join-semilattice structure.
- `order.ideal P`: the type of nonempty, upward directed, and downward closed subsets of `P`.
  Dual to the notion of a filter on a preorder.
- `order.is_ideal P`: a predicate for when a `set P` is an ideal.
- `order.ideal.principal p`: the principal ideal generated by `p : P`.
- `order.ideal.is_proper P`: a predicate for proper ideals.
  Dual to the notion of a proper filter.
- `order.ideal.is_maximal`: a predicate for maximal ideals.
  Dual to the notion of an ultrafilter.
- `ideal_inter_nonempty P`: a predicate for when the intersection of any two ideals of
  `P` is nonempty.
- `order.cofinal P`: the type of subsets of `P` containing arbitrarily large elements.
  Dual to the notion of 'dense set' used in forcing.
- `order.ideal_of_cofinals p ùíü`, where `p : P`, and `ùíü` is a countable family of cofinal
  subsets of P: an ideal in `P` which contains `p` and intersects every set in `ùíü`. (This a form
  of the Rasiowa‚ÄìSikorski lemma.)

## References

- <https://en.wikipedia.org/wiki/Ideal_(order_theory)>
- <https://en.wikipedia.org/wiki/Cofinal_(mathematics)>
- <https://en.wikipedia.org/wiki/Rasiowa%E2%80%93Sikorski_lemma>

Note that for the Rasiowa‚ÄìSikorski lemma, Wikipedia uses the opposite ordering on `P`,
in line with most presentations of forcing.

## Tags

ideal, cofinal, dense, countable, generic

-/

namespace order

variables {P : Type*}

/-- An ideal on a preorder `P` is a subset of `P` that is
  - nonempty
  - upward directed (any pair of elements in the ideal has an upper bound in the ideal)
  - downward closed (any element less than an element of the ideal is in the ideal). -/
structure ideal (P) [preorder P] :=
(carrier   : set P)
(nonempty  : carrier.nonempty)
(directed  : directed_on (‚â§) carrier)
(mem_of_le : ‚àÄ {x y : P}, x ‚â§ y ‚Üí y ‚àà carrier ‚Üí x ‚àà carrier)

/-- A subset of a preorder `P` is an ideal if it is
  - nonempty
  - upward directed (any pair of elements in the ideal has an upper bound in the ideal)
  - downward closed (any element less than an element of the ideal is in the ideal). -/
@[mk_iff] structure is_ideal {P} [preorder P] (I : set P) : Prop :=
(nonempty : I.nonempty)
(directed : directed_on (‚â§) I)
(mem_of_le : ‚àÄ {x y : P}, x ‚â§ y ‚Üí y ‚àà I ‚Üí x ‚àà I)

/-- Create an element of type `order.ideal` from a set satisfying the predicate
`order.is_ideal`. -/
def is_ideal.to_ideal [preorder P] {I : set P} (h : is_ideal I) : ideal P :=
‚ü®I, h.1, h.2, h.3‚ü©

/-- A preorder `P` has the `ideal_inter_nonempty` property if the
    intersection of any two ideals is nonempty.
    Most importantly, a `semilattice_sup` preorder with this property
    satisfies that its ideal poset is a lattice.
-/
class ideal_inter_nonempty (P) [preorder P] : Prop :=
(inter_nonempty : ‚àÄ (I J : ideal P), (I.carrier ‚à© J.carrier).nonempty)

lemma inter_nonempty [preorder P] [ideal_inter_nonempty P] :
‚àÄ (I J : ideal P), (I.carrier ‚à© J.carrier).nonempty :=
ideal_inter_nonempty.inter_nonempty

namespace ideal

section preorder
variables [preorder P] {x y : P} {I J : ideal P}

/-- The smallest ideal containing a given element. -/
def principal (p : P) : ideal P :=
{ carrier   := { x | x ‚â§ p },
  nonempty  := ‚ü®p, le_refl _‚ü©,
  directed  := Œª x hx y hy, ‚ü®p, le_refl _, hx, hy‚ü©,
  mem_of_le := Œª x y hxy hy, le_trans hxy hy, }

instance [inhabited P] : inhabited (ideal P) :=
‚ü®ideal.principal $ default P‚ü©

/-- An ideal of `P` can be viewed as a subset of `P`. -/
instance : has_coe (ideal P) (set P) := ‚ü®carrier‚ü©

/-- For the notation `x ‚àà I`. -/
instance : has_mem P (ideal P) := ‚ü®Œª x I, x ‚àà (I : set P)‚ü©

@[simp] lemma mem_coe : x ‚àà (I : set P) ‚Üî x ‚àà I := iff_of_eq rfl

@[simp] lemma mem_principal : x ‚àà principal y ‚Üî x ‚â§ y := by refl

/-- Two ideals are equal when their underlying sets are equal. -/
@[ext] lemma ext : ‚àÄ (I J : ideal P), (I : set P) = J ‚Üí I = J
| ‚ü®_, _, _, _‚ü© ‚ü®_, _, _, _‚ü© rfl := rfl

@[simp, norm_cast] lemma ext_set_eq {I J : ideal P} : (I : set P) = J ‚Üî I = J :=
‚ü®by ext, congr_arg _‚ü©

lemma ext'_iff {I J : ideal P} : I = J ‚Üî (I : set P) = J := ext_set_eq.symm

lemma is_ideal (I : ideal P) : is_ideal (I : set P) := ‚ü®I.2, I.3, I.4‚ü©

/-- The partial ordering by subset inclusion, inherited from `set P`. -/
instance : partial_order (ideal P) := partial_order.lift coe ext

@[trans] lemma mem_of_mem_of_le : x ‚àà I ‚Üí I ‚â§ J ‚Üí x ‚àà J :=
@set.mem_of_mem_of_subset P x I J

@[simp] lemma principal_le_iff : principal x ‚â§ I ‚Üî x ‚àà I :=
‚ü®Œª (h : ‚àÄ {y}, y ‚â§ x ‚Üí y ‚àà I), h (le_refl x),
 Œª h_mem y (h_le : y ‚â§ x), I.mem_of_le h_le h_mem‚ü©

lemma mem_compl_of_ge {x y : P} : x ‚â§ y ‚Üí x ‚àà (I : set P)·∂ú ‚Üí y ‚àà (I : set P)·∂ú :=
Œª h, mt (I.mem_of_le h)

/-- A proper ideal is one that is not the whole set.
    Note that the whole set might not be an ideal. -/
@[mk_iff] class is_proper (I : ideal P) : Prop := (ne_univ : (I : set P) ‚â† set.univ)

lemma is_proper_of_not_mem {I : ideal P} {p : P} (nmem : p ‚àâ I) : is_proper I :=
‚ü®Œª hp, begin
  change p ‚àâ ‚ÜëI at nmem,
  rw hp at nmem,
  exact nmem (set.mem_univ p),
end‚ü©

/-- An ideal is maximal if it is maximal in the collection of proper ideals.
  Note that we cannot use the `is_coatom` class because `P` might not have a `top` element.
-/
@[mk_iff] class is_maximal (I : ideal P) extends is_proper I : Prop :=
(maximal_proper : ‚àÄ ‚¶ÉJ : ideal P‚¶Ñ, I < J ‚Üí J.carrier = set.univ)

end preorder

section order_bot
variables [order_bot P] {I : ideal P}

/-- A specific witness of `I.nonempty` when `P` has a bottom element. -/
@[simp] lemma bot_mem : ‚ä• ‚àà I :=
I.mem_of_le bot_le I.nonempty.some_mem

/-- There is a bottom ideal when `P` has a bottom element. -/
instance : order_bot (ideal P) :=
{ bot := principal ‚ä•,
  bot_le := by simp,
  .. ideal.partial_order }

end order_bot

section order_top

variables [order_top P]

/-- There is a top ideal when `P` has a top element. -/
instance : order_top (ideal P) :=
{ top := principal ‚ä§,
  le_top := Œª I x h, le_top,
  .. ideal.partial_order }

@[simp] lemma top_carrier : (‚ä§ : ideal P).carrier = set.univ :=
set.univ_subset_iff.1 (Œª p _, le_top)

@[simp] lemma top_coe : ((‚ä§ : ideal P) : set P) = set.univ := top_carrier

lemma top_of_mem_top {I : ideal P} (mem_top : ‚ä§ ‚àà I) : I = ‚ä§ :=
begin
  ext,
  change x ‚àà I.carrier ‚Üî x ‚àà (‚ä§ : ideal P).carrier,
  split,
  { simp [top_carrier] },
  { exact Œª _, I.mem_of_le le_top mem_top }
end

lemma is_proper_of_ne_top {I : ideal P} (ne_top : I ‚â† ‚ä§) : is_proper I :=
is_proper_of_not_mem (Œª h, ne_top (top_of_mem_top h))

lemma is_proper.ne_top {I : ideal P} (hI : is_proper I) : I ‚â† ‚ä§ :=
begin
  intro h,
  rw [ext'_iff, top_coe] at h,
  apply hI.ne_univ,
  assumption,
end

lemma _root_.is_coatom.is_proper {I : ideal P} (hI : is_coatom I) : is_proper I :=
is_proper_of_ne_top hI.1

lemma is_proper_iff_ne_top {I : ideal P} : is_proper I ‚Üî I ‚â† ‚ä§ :=
‚ü®Œª h, h.ne_top, Œª h, is_proper_of_ne_top h‚ü©

lemma is_maximal.is_coatom {I : ideal P} (h : is_maximal I) : is_coatom I :=
‚ü®is_maximal.to_is_proper.ne_top,
 Œª _ _, by { rw [ext'_iff, top_coe], exact is_maximal.maximal_proper ‚Äπ_‚Ä∫ }‚ü©

lemma is_maximal.is_coatom' {I : ideal P} [is_maximal I] : is_coatom I :=
is_maximal.is_coatom ‚Äπ_‚Ä∫

lemma _root_.is_coatom.is_maximal {I : ideal P} (hI : is_coatom I) : is_maximal I :=
{ maximal_proper := Œª _ _, by simp [hI.2 _ ‚Äπ_‚Ä∫],
  ..is_coatom.is_proper ‚Äπ_‚Ä∫ }

lemma is_maximal_iff_is_coatom {I : ideal P} : is_maximal I ‚Üî is_coatom I :=
‚ü®Œª h, h.is_coatom, Œª h, h.is_maximal‚ü©

end order_top

section semilattice_sup
variables [semilattice_sup P] {x y : P} {I : ideal P}

/-- A specific witness of `I.directed` when `P` has joins. -/
lemma sup_mem (x y ‚àà I) : x ‚äî y ‚àà I :=
let ‚ü®z, h_mem, hx, hy‚ü© := I.directed x ‚Äπ_‚Ä∫ y ‚Äπ_‚Ä∫ in
I.mem_of_le (sup_le hx hy) h_mem

@[simp] lemma sup_mem_iff : x ‚äî y ‚àà I ‚Üî x ‚àà I ‚àß y ‚àà I :=
‚ü®Œª h, ‚ü®I.mem_of_le le_sup_left h, I.mem_of_le le_sup_right h‚ü©,
 Œª h, sup_mem x y h.left h.right‚ü©

end semilattice_sup

section semilattice_sup_ideal_inter_nonempty

variables [semilattice_sup P] [ideal_inter_nonempty P] {x : P} {I J K : ideal P}

/-- The intersection of two ideals is an ideal, when it is nonempty and `P` has joins. -/
def inf (I J : ideal P) : ideal P :=
{ carrier   := I ‚à© J,
  nonempty  := inter_nonempty I J,
  directed  := Œª x ‚ü®_, _‚ü© y ‚ü®_, _‚ü©, ‚ü®x ‚äî y, ‚ü®sup_mem x y ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫, sup_mem x y ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫‚ü©, by simp‚ü©,
  mem_of_le := Œª x y h ‚ü®_, _‚ü©, ‚ü®mem_of_le I h ‚Äπ_‚Ä∫, mem_of_le J h ‚Äπ_‚Ä∫‚ü© }

/-- There is a smallest ideal containing two ideals, when their intersection is nonempty and
    `P` has joins. -/
def sup (I J : ideal P) : ideal P :=
{ carrier   := {x | ‚àÉ (i ‚àà I) (j ‚àà J), x ‚â§ i ‚äî j},
  nonempty  := by { cases inter_nonempty I J, exact ‚ü®w, w, h.1, w, h.2, le_sup_left‚ü© },
  directed  := Œª x ‚ü®xi, _, xj, _, _‚ü© y ‚ü®yi, _, yj, _, _‚ü©,
    ‚ü®x ‚äî y,
     ‚ü®xi ‚äî yi, sup_mem xi yi ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
      xj ‚äî yj, sup_mem xj yj ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
      sup_le
        (calc x ‚â§ xi ‚äî xj               : ‚Äπ_‚Ä∫
         ...    ‚â§ (xi ‚äî yi) ‚äî (xj ‚äî yj) : sup_le_sup le_sup_left le_sup_left)
        (calc y ‚â§ yi ‚äî yj               : ‚Äπ_‚Ä∫
         ...    ‚â§ (xi ‚äî yi) ‚äî (xj ‚äî yj) : sup_le_sup le_sup_right le_sup_right)‚ü©,
     le_sup_left, le_sup_right‚ü©,
  mem_of_le := Œª x y _ ‚ü®yi, _, yj, _, _‚ü©, ‚ü®yi, ‚Äπ_‚Ä∫, yj, ‚Äπ_‚Ä∫, le_trans ‚Äπx ‚â§ y‚Ä∫ ‚Äπ_‚Ä∫‚ü© }

lemma sup_le : I ‚â§ K ‚Üí J ‚â§ K ‚Üí sup I J ‚â§ K :=
Œª hIK hJK x ‚ü®i, hiI, j, hjJ, hxij‚ü©,
K.mem_of_le hxij $ sup_mem i j (mem_of_mem_of_le hiI hIK) (mem_of_mem_of_le hjJ hJK)

instance : lattice (ideal P) :=
{ sup          := sup,
  le_sup_left  := Œª I J (i ‚àà I), by { cases nonempty J, exact ‚ü®i, ‚Äπ_‚Ä∫, w, ‚Äπ_‚Ä∫, le_sup_left‚ü© },
  le_sup_right := Œª I J (j ‚àà J), by { cases nonempty I, exact ‚ü®w, ‚Äπ_‚Ä∫, j, ‚Äπ_‚Ä∫, le_sup_right‚ü© },
  sup_le       := @sup_le _ _ _,
  inf          := inf,
  inf_le_left  := Œª I J, set.inter_subset_left I J,
  inf_le_right := Œª I J, set.inter_subset_right I J,
  le_inf       := Œª I J K, set.subset_inter,
  .. ideal.partial_order }

@[simp] lemma mem_inf : x ‚àà I ‚äì J ‚Üî x ‚àà I ‚àß x ‚àà J := iff_of_eq rfl

@[simp] lemma mem_sup : x ‚àà I ‚äî J ‚Üî ‚àÉ (i ‚àà I) (j ‚àà J), x ‚â§ i ‚äî j := iff_of_eq rfl

lemma lt_sup_principal_of_not_mem (hx : x ‚àâ I) : I < I ‚äî principal x :=
begin
  apply lt_of_le_of_ne le_sup_left,
  intro h,
  simp at h,
  exact hx h
end

end semilattice_sup_ideal_inter_nonempty

section semilattice_sup_bot
variables [semilattice_sup_bot P]

@[priority 100]
instance semilattice_sup_bot.ideal_inter_nonempty : ideal_inter_nonempty P :=
{ inter_nonempty := Œª _ _, ‚ü®‚ä•, ‚ü®bot_mem, bot_mem‚ü©‚ü© }

end semilattice_sup_bot

section semilattice_inf

variable [semilattice_inf P]

@[priority 100]
instance semilattice_inf.ideal_inter_nonempty : ideal_inter_nonempty P :=
{ inter_nonempty := Œª I J, begin
    cases I.nonempty with i _,
    cases J.nonempty with j _,
    exact ‚ü®i ‚äì j, I.mem_of_le inf_le_left ‚Äπ_‚Ä∫, J.mem_of_le inf_le_right ‚Äπ_‚Ä∫‚ü©
  end }

end semilattice_inf

section distrib_lattice

variables [distrib_lattice P]
variables {I J : ideal P}

lemma eq_sup_of_le_sup {x i j: P} (hi : i ‚àà I) (hj : j ‚àà J) (hx : x ‚â§ i ‚äî j):
‚àÉ (i' ‚àà I) (j' ‚àà J), x = i' ‚äî j' :=
begin
  refine ‚ü®x ‚äì i, I.mem_of_le inf_le_right hi, x ‚äì j, J.mem_of_le inf_le_right hj, _‚ü©,
  calc
  x    = x ‚äì (i ‚äî j)       : left_eq_inf.mpr hx
  ...  = (x ‚äì i) ‚äî (x ‚äì j) : inf_sup_left,
end

lemma coe_sup_eq : ‚Üë(I ‚äî J) = {x | ‚àÉ i ‚àà I, ‚àÉ j ‚àà J, x = i ‚äî j} :=
begin
  ext,
  rw [mem_coe, mem_sup],
  exact ‚ü®Œª ‚ü®_, _, _, _, _‚ü©, eq_sup_of_le_sup ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
  Œª ‚ü®i, _, j, _, _‚ü©, ‚ü®i, ‚Äπ_‚Ä∫, j, ‚Äπ_‚Ä∫, le_of_eq ‚Äπ_‚Ä∫‚ü©‚ü©
end

end distrib_lattice

end ideal

/-- For a preorder `P`, `cofinal P` is the type of subsets of `P`
  containing arbitrarily large elements. They are the dense sets in
  the topology whose open sets are terminal segments. -/
structure cofinal (P) [preorder P] :=
(carrier : set P)
(mem_gt  : ‚àÄ x : P, ‚àÉ y ‚àà carrier, x ‚â§ y)

namespace cofinal

variables [preorder P]

instance : inhabited (cofinal P) :=
‚ü®{ carrier := set.univ, mem_gt := Œª x, ‚ü®x, trivial, le_refl _‚ü© }‚ü©

instance : has_mem P (cofinal P) := ‚ü®Œª x D, x ‚àà D.carrier‚ü©

variables (D : cofinal P) (x : P)
/-- A (noncomputable) element of a cofinal set lying above a given element. -/
noncomputable def above : P := classical.some $ D.mem_gt x

lemma above_mem : D.above x ‚àà D :=
exists.elim (classical.some_spec $ D.mem_gt x) $ Œª a _, a

lemma le_above : x ‚â§ D.above x :=
exists.elim (classical.some_spec $ D.mem_gt x) $ Œª _ b, b

end cofinal

section ideal_of_cofinals

variables [preorder P] (p : P) {Œπ : Type*} [encodable Œπ] (ùíü : Œπ ‚Üí cofinal P)

/-- Given a starting point, and a countable family of cofinal sets,
  this is an increasing sequence that intersects each cofinal set. -/
noncomputable def sequence_of_cofinals : ‚Ñï ‚Üí P
| 0 := p
| (n+1) := match encodable.decode Œπ n with
           | none   := sequence_of_cofinals n
           | some i := (ùíü i).above (sequence_of_cofinals n)
           end

lemma sequence_of_cofinals.monotone : monotone (sequence_of_cofinals p ùíü) :=
by { apply monotone_of_monotone_nat, intros n, dunfold sequence_of_cofinals,
  cases encodable.decode Œπ n, { refl }, { apply cofinal.le_above }, }

lemma sequence_of_cofinals.encode_mem (i : Œπ) :
  sequence_of_cofinals p ùíü (encodable.encode i + 1) ‚àà ùíü i :=
by { dunfold sequence_of_cofinals, rw encodable.encodek, apply cofinal.above_mem, }

/-- Given an element `p : P` and a family `ùíü` of cofinal subsets of a preorder `P`,
  indexed by a countable type, `ideal_of_cofinals p ùíü` is an ideal in `P` which
  - contains `p`, according to `mem_ideal_of_cofinals p ùíü`, and
  - intersects every set in `ùíü`, according to `cofinal_meets_ideal_of_cofinals p ùíü`.

  This proves the Rasiowa‚ÄìSikorski lemma. -/
def ideal_of_cofinals : ideal P :=
{ carrier   := { x : P | ‚àÉ n, x ‚â§ sequence_of_cofinals p ùíü n },
  nonempty  := ‚ü®p, 0, le_refl _‚ü©,
  directed  := Œª x ‚ü®n, hn‚ü© y ‚ü®m, hm‚ü©,
               ‚ü®_, ‚ü®max n m, le_refl _‚ü©,
               le_trans hn $ sequence_of_cofinals.monotone p ùíü (le_max_left _ _),
               le_trans hm $ sequence_of_cofinals.monotone p ùíü (le_max_right _ _) ‚ü©,
  mem_of_le := Œª x y hxy ‚ü®n, hn‚ü©, ‚ü®n, le_trans hxy hn‚ü©, }

lemma mem_ideal_of_cofinals : p ‚àà ideal_of_cofinals p ùíü := ‚ü®0, le_refl _‚ü©

/-- `ideal_of_cofinals p ùíü` is `ùíü`-generic. -/
lemma cofinal_meets_ideal_of_cofinals (i : Œπ) : ‚àÉ x : P, x ‚àà ùíü i ‚àß x ‚àà ideal_of_cofinals p ùíü :=
‚ü®_, sequence_of_cofinals.encode_mem p ùíü i, _, le_refl _‚ü©

end ideal_of_cofinals

end order
