/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import topology.algebra.monoid
import algebra.module.prod
import topology.homeomorph

/-!
# Continuous monoid action

In this file we define class `has_continuous_smul`. We say `has_continuous_smul M Œ±` if `M` acts on
`Œ±` and the map `(c, x) ‚Ü¶ c ‚Ä¢ x` is continuous on `M √ó Œ±`. We reuse this class for topological
(semi)modules, vector spaces and algebras.

## Main definitions

* `has_continuous_smul M Œ±` : typeclass saying that the map `(c, x) ‚Ü¶ c ‚Ä¢ x` is continuous
  on `M √ó Œ±`;
* `homeomorph.smul_of_unit`: scalar multiplication by a unit of `M` as a homeomorphism of `Œ±`;
* `homeomorph.smul_of_ne_zero`: if a group with zero `G‚ÇÄ` (e.g., a field) acts on `Œ±` and `c : G‚ÇÄ`
  is a nonzero element of `G‚ÇÄ`, then scalar multiplication by `c` is a homeomorphism of `Œ±`;
* `homeomorph.smul`: scalar multiplication by an element of a group `G` acting on `Œ±`
  is a homeomorphism of `Œ±`.

## Main results

Besides homeomorphisms mentioned above, in this file we provide lemmas like `continuous.smul`
or `filter.tendsto.smul` that provide dot-syntax access to `continuous_smul`.
-/

open_locale topological_space
open filter

/-- Class `has_continuous_smul M Œ±` says that the scalar multiplication `(‚Ä¢) : M ‚Üí Œ± ‚Üí Œ±`
is continuous in both arguments. We use the same class for all kinds of multiplicative actions,
including (semi)modules and algebras. -/
class has_continuous_smul (M Œ± : Type*) [has_scalar M Œ±]
  [topological_space M] [topological_space Œ±] : Prop :=
(continuous_smul : continuous (Œªp : M √ó Œ±, p.1 ‚Ä¢ p.2))

export has_continuous_smul (continuous_smul)

variables {M Œ± Œ≤ : Type*} [topological_space M] [topological_space Œ±]

section has_scalar

variables [has_scalar M Œ±] [has_continuous_smul M Œ±]

lemma filter.tendsto.smul {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {c : M} {a : Œ±}
  (hf : tendsto f l (ùìù c)) (hg : tendsto g l (ùìù a)) :
  tendsto (Œª x, f x ‚Ä¢ g x) l (ùìù $ c ‚Ä¢ a) :=
(continuous_smul.tendsto _).comp (hf.prod_mk_nhds hg)

lemma filter.tendsto.const_smul {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (hf : tendsto f l (ùìù a))
  (c : M) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù (c ‚Ä¢ a)) :=
tendsto_const_nhds.smul hf

lemma filter.tendsto.smul_const {f : Œ≤ ‚Üí M} {l : filter Œ≤} {c : M}
  (hf : tendsto f l (ùìù c)) (a : Œ±) :
  tendsto (Œª x, (f x) ‚Ä¢ a) l (ùìù (c ‚Ä¢ a)) :=
hf.smul tendsto_const_nhds

variables [topological_space Œ≤] {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {b : Œ≤} {s : set Œ≤}

lemma continuous_within_at.smul (hf : continuous_within_at f s b)
  (hg : continuous_within_at g s b) :
  continuous_within_at (Œª x, f x ‚Ä¢ g x) s b :=
hf.smul hg

lemma continuous_within_at.const_smul (hg : continuous_within_at g s b) (c : M) :
  continuous_within_at (Œª x, c ‚Ä¢ g x) s b :=
hg.const_smul c

lemma continuous_at.smul (hf : continuous_at f b) (hg : continuous_at g b) :
  continuous_at (Œª x, f x ‚Ä¢ g x) b :=
hf.smul hg

lemma continuous_at.const_smul (hg : continuous_at g b) (c : M) :
  continuous_at (Œª x, c ‚Ä¢ g x) b :=
hg.const_smul c

lemma continuous_on.smul (hf : continuous_on f s) (hg : continuous_on g s) :
  continuous_on (Œª x, f x ‚Ä¢ g x) s :=
Œª x hx, (hf x hx).smul (hg x hx)

lemma continuous_on.const_smul (hg : continuous_on g s) (c : M) :
  continuous_on (Œª x, c ‚Ä¢ g x) s :=
Œª x hx, (hg x hx).const_smul c

@[continuity]
lemma continuous.smul (hf : continuous f) (hg : continuous g) :
  continuous (Œª x, f x ‚Ä¢ g x) :=
continuous_smul.comp (hf.prod_mk hg)

lemma continuous.const_smul (hg : continuous g) (c : M) :
  continuous (Œª x, c ‚Ä¢ g x) :=
continuous_smul.comp (continuous_const.prod_mk hg)

end has_scalar

section monoid

variables [monoid M] [mul_action M Œ±] [has_continuous_smul M Œ±]

lemma units.tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (u : units M) :
  tendsto (Œª x, (u : M) ‚Ä¢ f x) l (ùìù $ (u : M) ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
‚ü®Œª h, by simpa only [u.inv_smul_smul] using h.const_smul ((u‚Åª¬π : units M) : M),
  Œª h, h.const_smul _‚ü©

lemma is_unit.tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} {c : M} (hc : is_unit c) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ u.tendsto_const_smul_iff

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : M} {s : set Œ≤}

lemma is_unit.continuous_within_at_const_smul_iff (hc : is_unit c) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
hc.tendsto_const_smul_iff

lemma is_unit.continuous_on_const_smul_iff (hc : is_unit c) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
forall_congr $ Œª b, forall_congr $ Œª hb, hc.continuous_within_at_const_smul_iff

lemma is_unit.continuous_at_const_smul_iff (hc : is_unit c) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
hc.tendsto_const_smul_iff

lemma is_unit.continuous_const_smul_iff (hc : is_unit c) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
by simp only [continuous_iff_continuous_at, hc.continuous_at_const_smul_iff]

/-- Scalar multiplication by a unit of a monoid `M` acting on `Œ±` is a homeomorphism from `Œ±`
to itself. -/
protected def homeomorph.smul_of_unit (u : units M) : Œ± ‚âÉ‚Çú Œ± :=
{ to_equiv := units.smul_perm_hom u,
  continuous_to_fun  := continuous_id.const_smul _,
  continuous_inv_fun := continuous_id.const_smul _ }

lemma is_unit.is_open_map_smul (hc : is_unit c) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ (homeomorph.smul_of_unit u).is_open_map

lemma is_unit.is_closed_map_smul (hc : is_unit c) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ (homeomorph.smul_of_unit u).is_closed_map

end monoid

section group_with_zero

variables {G‚ÇÄ : Type*} [topological_space G‚ÇÄ] [group_with_zero G‚ÇÄ] [mul_action G‚ÇÄ Œ±]
  [has_continuous_smul G‚ÇÄ Œ±]

lemma tendsto_const_smul_iff' {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} {c : G‚ÇÄ} (hc : c ‚â† 0) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
(is_unit.mk0 c hc).tendsto_const_smul_iff

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : G‚ÇÄ} {s : set Œ≤}

lemma continuous_within_at_const_smul_iff' (hc : c ‚â† 0) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
(is_unit.mk0 c hc).tendsto_const_smul_iff

lemma continuous_on_const_smul_iff' (hc : c ‚â† 0) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
(is_unit.mk0 c hc).continuous_on_const_smul_iff

lemma continuous_at_const_smul_iff' (hc : c ‚â† 0) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
(is_unit.mk0 c hc).continuous_at_const_smul_iff

lemma continuous_const_smul_iff' (hc : c ‚â† 0) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
(is_unit.mk0 c hc).continuous_const_smul_iff

/-- Scalar multiplication by a non-zero element of a group with zero acting on `Œ±` is a
homeomorphism from `Œ±` onto itself. -/
protected def homeomorph.smul_of_ne_zero (c : G‚ÇÄ) (hc : c ‚â† 0) : Œ± ‚âÉ‚Çú Œ± :=
homeomorph.smul_of_unit (units.mk0 c hc)

lemma is_open_map_smul' {c : G‚ÇÄ} (hc : c ‚â† 0) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
(is_unit.mk0 c hc).is_open_map_smul

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/
lemma is_closed_map_smul' {c : G‚ÇÄ} (hc : c ‚â† 0) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
(is_unit.mk0 c hc).is_closed_map_smul

end group_with_zero

section group

variables {G : Type*} [topological_space G] [group G] [mul_action G Œ±]
  [has_continuous_smul G Œ±]

lemma tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (c : G) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
(to_units c).tendsto_const_smul_iff

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤}  {s : set Œ≤}

lemma continuous_within_at_const_smul_iff (c : G) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
(group.is_unit c).tendsto_const_smul_iff

lemma continuous_on_const_smul_iff (c : G) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
(group.is_unit c).continuous_on_const_smul_iff

lemma continuous_at_const_smul_iff (c : G) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
(group.is_unit c).continuous_at_const_smul_iff

lemma continuous_const_smul_iff (c : G) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
(group.is_unit c).continuous_const_smul_iff

/-- Scalar multiplication by a unit of a monoid `M` acting on `Œ±` is a homeomorphism from `Œ±`
to itself. -/
protected def homeomorph.smul (c : G) : Œ± ‚âÉ‚Çú Œ± :=
homeomorph.smul_of_unit (to_units c)

lemma is_open_map_smul (c : G) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul c).is_open_map

lemma is_closed_map_smul (c : G) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul c).is_closed_map

end group

instance has_continuous_mul.has_continuous_smul {M : Type*} [monoid M]
  [topological_space M] [has_continuous_mul M] :
  has_continuous_smul M M :=
‚ü®continuous_mul‚ü©

instance [topological_space Œ≤] [has_scalar M Œ±] [has_scalar M Œ≤] [has_continuous_smul M Œ±]
  [has_continuous_smul M Œ≤] :
  has_continuous_smul M (Œ± √ó Œ≤) :=
‚ü®(continuous_fst.smul (continuous_fst.comp continuous_snd)).prod_mk
  (continuous_fst.smul (continuous_snd.comp continuous_snd))‚ü©
