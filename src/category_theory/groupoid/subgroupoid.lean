/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli, Junyan Xu
-/
import category_theory.groupoid.vertex_group
import category_theory.groupoid.basic
import category_theory.groupoid
import algebra.group.defs
import data.set.lattice
import group_theory.subgroup.basic
import order.galois_connection
/-!
# Subgroupoid

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file defines subgroupoids as `structure`s containing the subsets of arrows and their
stability under composition and inversion.
Also defined are:

* containment of subgroupoids is a complete lattice;
* images and preimages of subgroupoids under a functor;
* the notion of normality of subgroupoids and its stability under intersection and preimage;
* compatibility of the above with `groupoid.vertex_group`.


## Main definitions

Given a type `C` with associated `groupoid C` instance.

* `subgroupoid C` is the type of subgroupoids of `C`
* `subgroupoid.is_normal` is the property that the subgroupoid is stable under conjugation
  by arbitrary arrows, _and_ that all identity arrows are contained in the subgroupoid.
* `subgroupoid.comap` is the "preimage" map of subgroupoids along a functor.
* `subgroupoid.map` is the "image" map of subgroupoids along a functor _injective on objects_.
* `subgroupoid.vertex_subgroup` is the subgroup of the `vertex group` at a given vertex `v`,
  assuming `v` is contained in the `subgroupoid` (meaning, by definition, that the arrow `ùüô v`
  is contained in the subgroupoid).

## Implementation details

The structure of this file is copied from/inspired by `group_theory.subgroup.basic`
and `combinatorics.simple_graph.subgraph`.

## TODO

* Equivalent inductive characterization of generated (normal) subgroupoids.
* Characterization of normal subgroupoids as kernels.
* Prove that `full` and `disconnect` preserve intersections (and `disconnect` also unions)

## Tags

subgroupoid

-/

namespace category_theory

open set groupoid

local attribute [protected] category_theory.inv

universes u v

variables {C : Type u} [groupoid C]

/--
A sugroupoid of `C` consists of a choice of arrows for each pair of vertices, closed
under composition and inverses.
-/
@[ext] structure subgroupoid (C : Type u) [groupoid C] :=
(arrows : ‚àÄ (c d : C), set (c ‚ü∂ d))
(inv : ‚àÄ {c d} {p : c ‚ü∂ d} (hp : p ‚àà arrows c d),
          inv p ‚àà arrows d c)
(mul : ‚àÄ {c d e} {p} (hp : p ‚àà arrows c d) {q} (hq : q ‚àà arrows d e),
          p ‚â´ q ‚àà arrows c e)

attribute [protected] subgroupoid.inv subgroupoid.mul

namespace subgroupoid

variable (S : subgroupoid C)

lemma inv_mem_iff {c d : C} (f : c ‚ü∂ d) : inv f ‚àà S.arrows d c ‚Üî f ‚àà S.arrows c d :=
begin
  split,
  { rintro h,
    suffices : inv (inv f) ‚àà S.arrows c d,
    { simpa only [inv_eq_inv, is_iso.inv_inv] using this, },
    { apply S.inv h, }, },
  { apply S.inv, },
end

lemma mul_mem_cancel_left {c d e : C} {f : c ‚ü∂ d} {g : d ‚ü∂ e} (hf : f ‚àà S.arrows c d) :
  f ‚â´ g ‚àà S.arrows c e ‚Üî g ‚àà S.arrows d e :=
begin
  split,
  { rintro h,
    suffices : (inv f) ‚â´ f ‚â´ g ‚àà S.arrows d e,
    { simpa only [inv_eq_inv, is_iso.inv_hom_id_assoc] using this, },
    { apply S.mul (S.inv hf) h, }, },
  { apply S.mul hf, },
end

lemma mul_mem_cancel_right {c d e : C} {f : c ‚ü∂ d} {g : d ‚ü∂ e} (hg : g ‚àà S.arrows d e) :
  f ‚â´ g ‚àà S.arrows c e ‚Üî f ‚àà S.arrows c d :=
begin
  split,
  { rintro h,
    suffices : (f ‚â´ g) ‚â´ (inv g) ‚àà S.arrows c d,
    { simpa only [inv_eq_inv, is_iso.hom_inv_id, category.comp_id, category.assoc] using this, },
    { apply S.mul h (S.inv hg), }, },
  { exact Œª hf, S.mul hf hg, },
end

/-- The vertices of `C` on which `S` has non-trivial isotropy -/
def objs : set C := {c : C | (S.arrows c c).nonempty}

lemma mem_objs_of_src {c d : C} {f : c ‚ü∂ d} (h : f ‚àà S.arrows c d) : c ‚àà S.objs :=
‚ü®f ‚â´ inv f, S.mul h (S.inv h)‚ü©

lemma mem_objs_of_tgt {c d : C} {f : c ‚ü∂ d} (h : f ‚àà S.arrows c d) : d ‚àà S.objs :=
‚ü®(inv f) ‚â´ f, S.mul (S.inv h) h‚ü©

lemma id_mem_of_nonempty_isotropy (c : C) :
  c ‚àà objs S ‚Üí ùüô c ‚àà S.arrows c c :=
begin
  rintro ‚ü®Œ≥,hŒ≥‚ü©,
  convert S.mul hŒ≥ (S.inv hŒ≥),
  simp only [inv_eq_inv, is_iso.hom_inv_id],
end

lemma id_mem_of_src {c d : C} {f : c ‚ü∂ d} (h : f ‚àà S.arrows c d) : (ùüô c) ‚àà S.arrows c c :=
id_mem_of_nonempty_isotropy S c (mem_objs_of_src S h)

lemma id_mem_of_tgt {c d : C} {f : c ‚ü∂ d} (h : f ‚àà S.arrows c d) : (ùüô d) ‚àà S.arrows d d :=
id_mem_of_nonempty_isotropy S d (mem_objs_of_tgt S h)

/-- A subgroupoid seen as a quiver on vertex set `C` -/
def as_wide_quiver : quiver C := ‚ü®Œª c d, subtype $ S.arrows c d‚ü©

/-- The coercion of a subgroupoid as a groupoid -/
@[simps to_category_comp_coe, simps inv_coe (lemmas_only)]
instance coe : groupoid S.objs :=
{ hom := Œª a b, S.arrows a.val b.val,
  id := Œª a, ‚ü®ùüô a.val, id_mem_of_nonempty_isotropy S a.val a.prop‚ü©,
  comp := Œª a b c p q, ‚ü®p.val ‚â´ q.val, S.mul p.prop q.prop‚ü©,
  id_comp' := Œª a b ‚ü®p,hp‚ü©, by simp only [category.id_comp],
  comp_id' := Œª a b ‚ü®p,hp‚ü©, by simp only [category.comp_id],
  assoc' := Œª a b c d ‚ü®p,hp‚ü© ‚ü®q,hq‚ü© ‚ü®r,hr‚ü©, by simp only [category.assoc],
  inv := Œª a b p, ‚ü®inv p.val, S.inv p.prop‚ü©,
  inv_comp' := Œª a b ‚ü®p,hp‚ü©, by simp only [inv_comp],
  comp_inv' := Œª a b ‚ü®p,hp‚ü©, by simp only [comp_inv] }

@[simp] lemma coe_inv_coe' {c d : S.objs} (p : c ‚ü∂ d) :
  (category_theory.inv p).val = category_theory.inv p.val :=
by { simp only [subtype.val_eq_coe, ‚Üêinv_eq_inv, coe_inv_coe], }

/-- The embedding of the coerced subgroupoid to its parent-/
def hom : S.objs ‚•§ C :=
{ obj := Œª c, c.val,
  map := Œª c d f, f.val,
  map_id' := Œª c, rfl,
  map_comp' := Œª c d e f g, rfl }

lemma hom.inj_on_objects : function.injective (hom S).obj :=
by { rintros ‚ü®c,hc‚ü© ‚ü®d,hd‚ü© hcd, simp only [subtype.mk_eq_mk], exact hcd }

lemma hom.faithful :
  ‚àÄ c d, function.injective (Œª (f : c ‚ü∂ d), (hom S).map f) :=
by { rintros ‚ü®c,hc‚ü© ‚ü®d,hd‚ü© ‚ü®f,hf‚ü© ‚ü®g,hg‚ü© hfg, simp only [subtype.mk_eq_mk], exact hfg, }

/-- The subgroup of the vertex group at `c` given by the subgroupoid -/
def vertex_subgroup {c : C} (hc : c ‚àà S.objs) : subgroup (c ‚ü∂ c) :=
{ carrier  := S.arrows c c,
  mul_mem' := Œª f g hf hg, S.mul hf hg,
  one_mem' := id_mem_of_nonempty_isotropy _ _ hc,
  inv_mem' := Œª f hf, S.inv hf }

instance : set_like (subgroupoid C) (Œ£ (c d : C), c ‚ü∂ d) :=
{ coe := Œª S, {F | F.2.2 ‚àà S.arrows F.1 F.2.1},
  coe_injective' := Œª ‚ü®S, _, _‚ü© ‚ü®T, _, _‚ü© h, by { ext c d f, apply set.ext_iff.1 h ‚ü®c, d, f‚ü© } }

lemma mem_iff (S : subgroupoid C) (F : Œ£ c d, c ‚ü∂ d) :
  F ‚àà S ‚Üî F.2.2 ‚àà S.arrows F.1 F.2.1 := iff.rfl

lemma le_iff (S T : subgroupoid C) : (S ‚â§ T) ‚Üî (‚àÄ {c d}, (S.arrows c d) ‚äÜ (T.arrows c d)) :=
by { rw [set_like.le_def, sigma.forall], exact forall_congr (Œª c, sigma.forall) }

instance : has_top (subgroupoid C) :=
‚ü® { arrows := (Œª _ _, set.univ),
    mul    := by { rintros, trivial, },
    inv    := by { rintros, trivial, } } ‚ü©

lemma mem_top {c d : C} (f : c ‚ü∂ d) : f ‚àà (‚ä§ : subgroupoid C).arrows c d := trivial

lemma mem_top_objs (c : C) : c ‚àà (‚ä§ : subgroupoid C).objs :=
by { dsimp [has_top.top,objs], simp only [univ_nonempty], }

instance : has_bot (subgroupoid C) :=
‚ü® { arrows := (Œª _ _, ‚àÖ),
    mul    := Œª _ _ _ _, false.elim,
    inv    := Œª _ _ _, false.elim } ‚ü©

instance : inhabited (subgroupoid C) := ‚ü®‚ä§‚ü©

instance : has_inf (subgroupoid C) :=
‚ü® Œª S T,
  { arrows := (Œª c d, (S.arrows c d) ‚à© (T.arrows c d)),
    inv    := by { rintros, exact ‚ü®S.inv hp.1, T.inv hp.2‚ü©, },
    mul    := by { rintros, exact ‚ü®S.mul hp.1 hq.1, T.mul hp.2 hq.2‚ü©, } } ‚ü©

instance : has_Inf (subgroupoid C) :=
‚ü® Œª s,
  { arrows := Œª c d, ‚ãÇ S ‚àà s, (subgroupoid.arrows S c d),
    inv := by { intros, rw mem_Inter‚ÇÇ at hp ‚ä¢, exact Œª S hS, S.inv (hp S hS) },
    mul := by { intros, rw mem_Inter‚ÇÇ at hp hq ‚ä¢,exact Œª S hS, S.mul (hp S hS) (hq S hS) } } ‚ü©

instance : complete_lattice (subgroupoid C) :=
{ bot          := (‚ä•),
  bot_le       := Œª S, empty_subset _,
  top          := (‚ä§),
  le_top       := Œª S, subset_univ _,
  inf          := (‚äì),
  le_inf       := Œª R S T RS RT _ pR, ‚ü®RS pR, RT pR‚ü©,
  inf_le_left  := Œª R S _, and.left,
  inf_le_right := Œª R S _, and.right,
  .. complete_lattice_of_Inf (subgroupoid C)
  begin
    refine (Œª s, ‚ü®Œª S Ss F, _, Œª T Tl F fT, _‚ü©);
      simp only [Inf, mem_iff, mem_Inter],
    exacts [Œª hp, hp S Ss, Œª S Ss, Tl Ss fT],
  end }

lemma le_objs {S T : subgroupoid C} (h : S ‚â§ T) : S.objs ‚äÜ T.objs :=
Œª s ‚ü®Œ≥, hŒ≥‚ü©, ‚ü®Œ≥, @h ‚ü®s, s, Œ≥‚ü© hŒ≥‚ü©

/-- The functor associated to the embedding of subgroupoids -/
def inclusion {S T : subgroupoid C} (h : S ‚â§ T) : S.objs ‚•§ T.objs :=
{ obj := Œª s, ‚ü®s.val, le_objs h s.prop‚ü©,
  map := Œª s t f, ‚ü®f.val, @h ‚ü®s, t, f.val‚ü© f.prop‚ü©,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

lemma inclusion_inj_on_objects {S T : subgroupoid C} (h : S ‚â§ T) :
  function.injective (inclusion h).obj :=
Œª ‚ü®s,hs‚ü© ‚ü®t,ht‚ü©, by simpa only [inclusion, subtype.mk_eq_mk] using id

lemma inclusion_faithful {S T : subgroupoid C} (h : S ‚â§ T) (s t : S.objs) :
  function.injective (Œª (f : s ‚ü∂ t), (inclusion h).map f) :=
Œª ‚ü®f,hf‚ü© ‚ü®g,hg‚ü©, by { dsimp only [inclusion], simpa only [subtype.mk_eq_mk] using id }

lemma inclusion_refl {S : subgroupoid C} : inclusion (le_refl S) = ùü≠ S.objs :=
functor.hext (Œª ‚ü®s,hs‚ü©, rfl) (Œª ‚ü®s,hs‚ü© ‚ü®t,ht‚ü© ‚ü®f,hf‚ü©, heq_of_eq rfl)

lemma inclusion_trans {R S T : subgroupoid C} (k : R ‚â§ S) (h : S ‚â§ T) :
  inclusion (k.trans h) = (inclusion k) ‚ãô (inclusion h) := rfl

lemma inclusion_comp_embedding {S T : subgroupoid C} (h : S ‚â§ T) :
  (inclusion h) ‚ãô T.hom = S.hom := rfl

/-- The family of arrows of the discrete groupoid -/
inductive discrete.arrows : Œ† (c d : C), (c ‚ü∂ d) ‚Üí Prop
| id (c : C) : discrete.arrows c c (ùüô c)

/-- The only arrows of the discrete groupoid are the identity arrows. -/
def discrete : subgroupoid C :=
{ arrows := discrete.arrows,
  inv := by { rintros _ _ _ ‚ü®‚ü©, simp only [inv_eq_inv, is_iso.inv_id], split, },
  mul := by { rintros _ _ _ _ ‚ü®‚ü© _ ‚ü®‚ü©, rw category.comp_id, split, } }

lemma mem_discrete_iff {c d : C} (f : c ‚ü∂ d) :
  (f ‚àà (discrete).arrows c d) ‚Üî (‚àÉ (h : c = d), f = eq_to_hom h) :=
‚ü®by { rintro ‚ü®‚ü©, exact ‚ü®rfl, rfl‚ü© }, by { rintro ‚ü®rfl, rfl‚ü©, split }‚ü©

/-- A subgroupoid is wide if its carrier set is all of `C`-/
structure is_wide : Prop :=
(wide : ‚àÄ c, (ùüô c) ‚àà (S.arrows c c))

lemma is_wide_iff_objs_eq_univ : S.is_wide ‚Üî S.objs = set.univ :=
begin
  split,
  { rintro h,
    ext, split; simp only [top_eq_univ, mem_univ, implies_true_iff, forall_true_left],
    apply mem_objs_of_src S (h.wide x), },
  { rintro h,
    refine ‚ü®Œª c, _‚ü©,
    obtain ‚ü®Œ≥,Œ≥S‚ü© := (le_of_eq h.symm : ‚ä§ ‚äÜ S.objs) (set.mem_univ c),
    exact id_mem_of_src S Œ≥S, },
end

lemma is_wide.id_mem {S : subgroupoid C} (Sw : S.is_wide) (c : C) :
  (ùüô c) ‚àà S.arrows c c := Sw.wide c

lemma is_wide.eq_to_hom_mem {S : subgroupoid C} (Sw : S.is_wide) {c d : C} (h : c = d) :
  (eq_to_hom h) ‚àà S.arrows c d := by
{ cases h, simp only [eq_to_hom_refl], apply Sw.id_mem c, }

/-- A¬†subgroupoid is normal if it is wide and satisfies the expected stability under conjugacy. -/
structure is_normal extends (is_wide S) : Prop :=
(conj : ‚àÄ {c d} (p : c ‚ü∂ d) {Œ≥ : c ‚ü∂ c} (hs : Œ≥ ‚àà S.arrows c c),
              ((inv p) ‚â´ Œ≥ ‚â´ p) ‚àà (S.arrows d d))

lemma is_normal.conj' {S : subgroupoid C} (Sn : is_normal S) :
  ‚àÄ {c d} (p : d ‚ü∂ c) {Œ≥ : c ‚ü∂ c} (hs : Œ≥ ‚àà S.arrows c c), (p ‚â´ Œ≥ ‚â´ (inv p)) ‚àà (S.arrows d d) :=
Œª c d p Œ≥ hs, by { convert Sn.conj (inv p) hs, simp, }

lemma is_normal.conjugation_bij (Sn : is_normal S) {c d} (p : c ‚ü∂ d) :
  set.bij_on (Œª Œ≥ : c ‚ü∂ c, (inv p) ‚â´ Œ≥ ‚â´ p) (S.arrows c c) (S.arrows d d) :=
begin
  refine ‚ü®Œª Œ≥ Œ≥S, Sn.conj p Œ≥S, Œª Œ≥‚ÇÅ Œ≥‚ÇÅS Œ≥‚ÇÇ Œ≥‚ÇÇS h, _, Œª Œ¥ Œ¥S, ‚ü®p ‚â´ Œ¥ ‚â´ (inv p), Sn.conj' p Œ¥S, _‚ü©‚ü©,
  { simpa only [inv_eq_inv, category.assoc, is_iso.hom_inv_id,
                category.comp_id, is_iso.hom_inv_id_assoc] using p ‚â´= h =‚â´ inv p },
  { simp only [inv_eq_inv, category.assoc, is_iso.inv_hom_id,
               category.comp_id, is_iso.inv_hom_id_assoc] },
end

lemma top_is_normal : is_normal (‚ä§ : subgroupoid C) :=
{ wide := (Œª c, trivial),
  conj := (Œª a b c d e, trivial) }

lemma Inf_is_normal (s : set $ subgroupoid C) (sn : ‚àÄ S ‚àà s, is_normal S) : is_normal (Inf s) :=
{ wide := by { simp_rw [Inf, mem_Inter‚ÇÇ], exact Œª c S Ss, (sn S Ss).wide c },
  conj := by { simp_rw [Inf, mem_Inter‚ÇÇ], exact Œª c d p Œ≥ hŒ≥ S Ss, (sn S Ss).conj p (hŒ≥ S Ss) } }

lemma discrete_is_normal : (@discrete C _).is_normal :=
{ wide := Œª c, by { constructor, },
  conj := Œª c d f Œ≥ hŒ≥, by
  { cases hŒ≥, simp only [inv_eq_inv, category.id_comp, is_iso.inv_hom_id], constructor, } }

lemma is_normal.vertex_subgroup (Sn : is_normal S) (c : C) (cS : c ‚àà S.objs) :
  (S.vertex_subgroup cS).normal :=
{ conj_mem := Œª x hx y, by { rw mul_assoc, exact Sn.conj' y hx } }

section generated_subgroupoid

-- TODO:¬†proof that generated is just "words in X" and generated_normal is similarly
variable (X : ‚àÄ c d : C, set (c ‚ü∂ d))

/-- The subgropoid generated by the set of arrows `X` -/
def generated : subgroupoid C :=
Inf {S : subgroupoid C | ‚àÄ c d, X c d ‚äÜ S.arrows c d}

lemma subset_generated (c d : C) : X c d ‚äÜ (generated X).arrows c d :=
begin
  dsimp only [generated, Inf],
  simp only [subset_Inter‚ÇÇ_iff],
  exact Œª S hS f fS, hS _ _ fS,
end

/-- The normal sugroupoid generated by the set of arrows `X` -/
def generated_normal : subgroupoid C :=
Inf {S : subgroupoid C | (‚àÄ c d, X c d ‚äÜ S.arrows c d) ‚àß S.is_normal}

lemma generated_le_generated_normal : generated X ‚â§ generated_normal X :=
begin
  apply @Inf_le_Inf (subgroupoid C) _,
  exact Œª S ‚ü®h,_‚ü©, h,
end

lemma generated_normal_is_normal : (generated_normal X).is_normal :=
Inf_is_normal _ (Œª S h, h.right)

lemma is_normal.generated_normal_le {S : subgroupoid C} (Sn : S.is_normal) :
  generated_normal X ‚â§ S ‚Üî ‚àÄ c d, X c d ‚äÜ S.arrows c d :=
begin
  split,
  { rintro h c d,
    let h' := generated_le_generated_normal X,
    rw le_iff at h h',
    exact ((subset_generated X c d).trans (@h' c d)).trans (@h c d), },
  { rintro h,
    apply @Inf_le (subgroupoid C) _,
    exact ‚ü®h,Sn‚ü©, },
end

end generated_subgroupoid

section hom

variables {D : Type*} [groupoid D] (œÜ : C ‚•§ D)

/--
A functor between groupoid defines a map of subgroupoids in the reverse direction
by taking preimages.
 -/
def comap (S : subgroupoid D) : subgroupoid C :=
{ arrows := Œª c d, {f : c ‚ü∂ d | œÜ.map f ‚àà S.arrows (œÜ.obj c) (œÜ.obj d)},
  inv := Œª c d p hp, by { rw [mem_set_of, inv_eq_inv, œÜ.map_inv p, ‚Üê inv_eq_inv], exact S.inv hp },
  mul := begin
    rintros,
    simp only [mem_set_of, functor.map_comp],
    apply S.mul; assumption,
  end }

lemma comap_mono (S T : subgroupoid D) :
  S ‚â§ T ‚Üí comap œÜ S ‚â§ comap œÜ T := Œª ST ‚ü®c,d,p‚ü©, @ST ‚ü®_,_,_‚ü©

lemma is_normal_comap {S : subgroupoid D} (Sn : is_normal S) : is_normal (comap œÜ S) :=
{ wide := Œª c, by { rw [comap, mem_set_of, functor.map_id], apply Sn.wide, },
  conj := Œª c d f Œ≥ hŒ≥, by
  { simp_rw [inv_eq_inv f, comap, mem_set_of, functor.map_comp, functor.map_inv, ‚Üêinv_eq_inv],
    exact Sn.conj _ hŒ≥, } }

@[simp] lemma comap_comp {E : Type*} [groupoid E] (œà : D ‚•§ E) :
  comap (œÜ ‚ãô œà) = (comap œÜ) ‚àò (comap œà) := rfl

/-- The kernel of a functor between subgroupoid is the preimage. -/
def ker : subgroupoid C := comap œÜ discrete

lemma mem_ker_iff {c d : C} (f : c ‚ü∂ d) :
  f ‚àà (ker œÜ).arrows c d ‚Üî ‚àÉ (h : œÜ.obj c = œÜ.obj d), œÜ.map f = eq_to_hom h :=
mem_discrete_iff (œÜ.map f)

lemma ker_is_normal : (ker œÜ).is_normal := is_normal_comap œÜ (discrete_is_normal)

@[simp]
lemma ker_comp {E : Type*} [groupoid E] (œà : D ‚•§ E) : ker (œÜ ‚ãô œà) = comap œÜ (ker œà) := rfl

/-- The family of arrows of the image of a subgroupoid under a functor injective on objects -/
inductive map.arrows (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) :
  Œ† (c d : D), (c ‚ü∂ d) ‚Üí Prop
| im {c d : C} (f : c ‚ü∂ d) (hf : f ‚àà S.arrows c d) : map.arrows (œÜ.obj c) (œÜ.obj d) (œÜ.map f)

lemma map.arrows_iff (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) {c d : D} (f : c ‚ü∂ d) :
  map.arrows œÜ hœÜ S c d f ‚Üî
  ‚àÉ (a b : C) (g : a ‚ü∂ b) (ha : œÜ.obj a = c) (hb : œÜ.obj b = d) (hg : g ‚àà S.arrows a b),
    f = (eq_to_hom ha.symm) ‚â´ œÜ.map g ‚â´ (eq_to_hom hb) :=
begin
  split,
  { rintro ‚ü®g,hg‚ü©, exact ‚ü®_,_,g,rfl,rfl,hg, eq_conj_eq_to_hom _‚ü© },
  { rintro ‚ü®a,b,g,rfl,rfl,hg,rfl‚ü©, rw ‚Üê eq_conj_eq_to_hom, split, exact hg },
end

/-- The "forward" image of a subgroupoid under a functor injective on objects -/
def map (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) : subgroupoid D :=
{ arrows := map.arrows œÜ hœÜ S,
  inv := begin
    rintro _ _ _ ‚ü®‚ü©,
    rw [inv_eq_inv, ‚Üêfunctor.map_inv, ‚Üêinv_eq_inv],
    split, apply S.inv, assumption,
  end,
  mul := begin
    rintro _ _ _ _ ‚ü®f,hf‚ü© q hq,
    obtain ‚ü®c‚ÇÉ,c‚ÇÑ,g,he,rfl,hg,gq‚ü© := (map.arrows_iff œÜ hœÜ S q).mp hq,
    cases hœÜ he, rw [gq, ‚Üê eq_conj_eq_to_hom, ‚Üê œÜ.map_comp],
    split, exact S.mul hf hg,
  end }

lemma mem_map_iff (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) {c d : D} (f : c ‚ü∂ d) :
  f ‚àà (map œÜ hœÜ S).arrows c d ‚Üî
  ‚àÉ (a b : C) (g : a ‚ü∂ b) (ha : œÜ.obj a = c) (hb : œÜ.obj b = d) (hg : g ‚àà S.arrows a b),
    f = (eq_to_hom ha.symm) ‚â´ œÜ.map g ‚â´ (eq_to_hom hb) := map.arrows_iff œÜ hœÜ S f

lemma galois_connection_map_comap (hœÜ : function.injective œÜ.obj) :
  galois_connection (map œÜ hœÜ) (comap œÜ) :=
begin
  rintro S T, simp_rw [le_iff], split,
  { exact Œª h c d f fS, h (map.arrows.im f fS), },
  { rintros h _ _ g ‚ü®a,gœÜS‚ü©,
    exact h gœÜS, },
end

lemma map_mono (hœÜ : function.injective œÜ.obj) (S T : subgroupoid C) :
  S ‚â§ T ‚Üí map œÜ hœÜ S ‚â§ map œÜ hœÜ T :=
Œª h, (galois_connection_map_comap œÜ hœÜ).monotone_l h

lemma le_comap_map (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) :
  S ‚â§ comap œÜ (map œÜ hœÜ S) := (galois_connection_map_comap œÜ hœÜ).le_u_l S

lemma map_comap_le (hœÜ : function.injective œÜ.obj) (T : subgroupoid D) :
  map œÜ hœÜ (comap œÜ T) ‚â§ T := (galois_connection_map_comap œÜ hœÜ).l_u_le T

lemma map_le_iff_le_comap (hœÜ : function.injective œÜ.obj)
  (S : subgroupoid C) (T : subgroupoid D) :
  map œÜ hœÜ S ‚â§ T ‚Üî S ‚â§ comap œÜ T := (galois_connection_map_comap œÜ hœÜ).le_iff_le

lemma mem_map_objs_iff (hœÜ : function.injective œÜ.obj) (d : D) :
  d ‚àà (map œÜ hœÜ S).objs ‚Üî ‚àÉ c ‚àà S.objs, œÜ.obj c = d :=
begin
  dsimp [objs, map],
  split,
  { rintro ‚ü®f,hf‚ü©,
    change map.arrows œÜ hœÜ S d d f at hf, rw map.arrows_iff at hf,
    obtain ‚ü®c,d,g,ec,ed,eg,gS,eg‚ü© := hf,
    exact ‚ü®c, ‚ü®mem_objs_of_src S eg, ec‚ü©‚ü©, },
  { rintros ‚ü®c,‚ü®Œ≥,Œ≥S‚ü©,rfl‚ü©,
    exact ‚ü®œÜ.map Œ≥,‚ü®Œ≥,Œ≥S‚ü©‚ü©, }
end

@[simp]
lemma map_objs_eq (hœÜ : function.injective œÜ.obj) : (map œÜ hœÜ S).objs = œÜ.obj '' S.objs :=
by { ext, convert mem_map_objs_iff S œÜ hœÜ x, simp only [mem_image, exists_prop], }

/-- The image of a functor injective on objects -/
def im (hœÜ : function.injective œÜ.obj) := map œÜ hœÜ (‚ä§)

lemma mem_im_iff (hœÜ : function.injective œÜ.obj) {c d : D} (f : c ‚ü∂ d) :
  f ‚àà (im œÜ hœÜ).arrows c d ‚Üî
  ‚àÉ (a b : C) (g : a ‚ü∂ b) (ha : œÜ.obj a = c) (hb : œÜ.obj b = d),
    f = (eq_to_hom ha.symm) ‚â´ œÜ.map g ‚â´ (eq_to_hom hb) :=
by { convert map.arrows_iff œÜ hœÜ ‚ä§ f, simp only [has_top.top, mem_univ, exists_true_left] }

lemma mem_im_objs_iff (hœÜ : function.injective œÜ.obj) (d : D) :
  d ‚àà (im œÜ hœÜ).objs ‚Üî ‚àÉ c : C, œÜ.obj c = d := by
{ simp only [im, mem_map_objs_iff, mem_top_objs, exists_true_left], }

lemma obj_surjective_of_im_eq_top (hœÜ : function.injective œÜ.obj) (hœÜ' : im œÜ hœÜ = ‚ä§) :
  function.surjective œÜ.obj :=
begin
  rintro d,
  rw [‚Üêmem_im_objs_iff, hœÜ'],
  apply mem_top_objs,
end

lemma is_normal_map (hœÜ : function.injective œÜ.obj) (hœÜ' : im œÜ hœÜ = ‚ä§) (Sn : S.is_normal) :
  (map œÜ hœÜ S).is_normal :=
{ wide := Œª d, by
  { obtain ‚ü®c,rfl‚ü© := obj_surjective_of_im_eq_top œÜ hœÜ hœÜ' d,
    change map.arrows œÜ hœÜ S _ _ (ùüô _), rw ‚Üêfunctor.map_id,
    constructor, exact Sn.wide c, },
  conj := Œª d d' g Œ¥ hŒ¥, by
  { rw mem_map_iff at hŒ¥,
    obtain ‚ü®c,c',Œ≥,cd,cd',Œ≥S,hŒ≥‚ü© := hŒ¥, subst_vars, cases hœÜ cd',
    have : d' ‚àà (im œÜ hœÜ).objs, by { rw hœÜ', apply mem_top_objs, },
    rw mem_im_objs_iff at this,
    obtain ‚ü®c',rfl‚ü© := this,
    have : g ‚àà (im œÜ hœÜ).arrows (œÜ.obj c) (œÜ.obj c'), by
    { rw hœÜ', trivial, },
    rw mem_im_iff at this,
    obtain ‚ü®b,b',f,hb,hb',_,hf‚ü© := this, subst_vars, cases hœÜ hb, cases hœÜ hb',
    change map.arrows œÜ hœÜ S (œÜ.obj c') (œÜ.obj c') _,
    simp only [eq_to_hom_refl, category.comp_id, category.id_comp, inv_eq_inv],
    suffices : map.arrows œÜ hœÜ S (œÜ.obj c') (œÜ.obj c') (œÜ.map $ inv f ‚â´ Œ≥ ‚â´ f),
    { simp only [inv_eq_inv, functor.map_comp, functor.map_inv] at this, exact this, },
    { constructor, apply Sn.conj f Œ≥S, } } }

end hom

section thin

/-- A subgroupoid `is_thin` if it has at most one arrow between any two vertices. -/
abbreviation is_thin := quiver.is_thin S.objs

lemma is_thin_iff : S.is_thin ‚Üî ‚àÄ (c : S.objs), subsingleton (S.arrows c c) :=
by apply is_thin_iff

end thin

section disconnected

/-- A subgroupoid `is_totally_disconnected` if it has only isotropy arrows. -/
abbreviation is_totally_disconnected := is_totally_disconnected S.objs

lemma is_totally_disconnected_iff :
  S.is_totally_disconnected ‚Üî ‚àÄ c d, (S.arrows c d).nonempty ‚Üí c = d :=
begin
  split,
  { rintro h c d ‚ü®f,fS‚ü©,
    rw ‚Üê@subtype.mk_eq_mk _ _ c (mem_objs_of_src S fS) d (mem_objs_of_tgt S fS),
    exact h ‚ü®c, mem_objs_of_src S fS‚ü© ‚ü®d, mem_objs_of_tgt S fS‚ü© ‚ü®f, fS‚ü©, },
  { rintros h ‚ü®c, hc‚ü© ‚ü®d, hd‚ü© ‚ü®f, fS‚ü©,
    simp only [subtype.mk_eq_mk],
    exact h c d ‚ü®f, fS‚ü©, },
end

/-- The isotropy subgroupoid of `S` -/
def disconnect : subgroupoid C :=
{ arrows := Œª c d f, c = d ‚àß f ‚àà S.arrows c d,
  inv := by { rintros _ _ _ ‚ü®rfl, h‚ü©, exact ‚ü®rfl, S.inv h‚ü©, },
  mul := by { rintros _ _ _ _ ‚ü®rfl, h‚ü© _ ‚ü®rfl, h'‚ü©, exact ‚ü®rfl, S.mul h h'‚ü©, } }

lemma disconnect_le : S.disconnect ‚â§ S :=
by { rw le_iff, rintros _ _ _ ‚ü®‚ü©, assumption, }

lemma disconnect_normal (Sn : S.is_normal) : S.disconnect.is_normal :=
{ wide := Œª c, ‚ü®rfl, Sn.wide c‚ü©,
  conj := Œª c d p Œ≥ ‚ü®_,h'‚ü©, ‚ü®rfl, Sn.conj _ h'‚ü© }

@[simp] lemma mem_disconnect_objs_iff {c : C} : c ‚àà S.disconnect.objs ‚Üî c ‚àà S.objs :=
‚ü®Œª ‚ü®Œ≥, h, Œ≥S‚ü©, ‚ü®Œ≥, Œ≥S‚ü©, Œª ‚ü®Œ≥, Œ≥S‚ü©, ‚ü®Œ≥, rfl, Œ≥S‚ü©‚ü©

lemma disconnect_objs : S.disconnect.objs = S.objs :=
by { apply set.ext, apply mem_disconnect_objs_iff, }

lemma disconnect_is_totally_disconnected : S.disconnect.is_totally_disconnected :=
by { rw is_totally_disconnected_iff, exact Œª c d ‚ü®f, h, fS‚ü©, h }

end disconnected

section full

variable (D : set C)

/-- The full subgroupoid on a set `D : set C` -/
def full : subgroupoid C :=
{ arrows := Œª c d _, c ‚àà D ‚àß d ‚àà D,
  inv := by { rintros _ _ _ ‚ü®‚ü©, constructor; assumption, },
  mul := by { rintros _ _ _ _ ‚ü®‚ü© _ ‚ü®‚ü©, constructor; assumption,} }

lemma full_objs : (full D).objs = D :=
set.ext $ Œª _, ‚ü®Œª ‚ü®f, h, _‚ü©, h , Œª h, ‚ü®ùüô _, h, h‚ü©‚ü©

@[simp] lemma mem_full_iff {c d : C} {f : c ‚ü∂ d} : f ‚àà (full D).arrows c d ‚Üî c ‚àà D ‚àß d ‚àà D :=
iff.rfl

@[simp] lemma mem_full_objs_iff {c : C} : c ‚àà (full D).objs ‚Üî c ‚àà D :=
by rw full_objs

@[simp] lemma full_empty : full ‚àÖ = (‚ä• : subgroupoid C) :=
by { ext, simp only [has_bot.bot, mem_full_iff, mem_empty_iff_false, and_self], }

@[simp] lemma full_univ : full set.univ = (‚ä§ : subgroupoid C) :=
by { ext, simp only [mem_full_iff, mem_univ, and_self, true_iff], }

lemma full_mono {D E : set C} (h : D ‚â§ E) : full D ‚â§ full E :=
begin
  rw le_iff,
  rintro c d f,
  simp only [mem_full_iff],
  exact Œª ‚ü®hc, hd‚ü©, ‚ü®h hc, h hd‚ü©,
end

lemma full_arrow_eq_iff {c d : (full D).objs} {f g : c ‚ü∂ d} :
  f = g ‚Üî (‚Üëf : c.val ‚ü∂ d.val) = ‚Üëg :=
by apply subtype.ext_iff

end full

end subgroupoid

end category_theory
