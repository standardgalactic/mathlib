/-
Copyright (c) 2022 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao, Kevin Buzzard, Alexander Bentkamp
-/

import analysis.inner_product_space.pi_L2
import linear_algebra.matrix.block

/-!
# Gram-Schmidt Orthogonalization and Orthonormalization

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file we introduce Gram-Schmidt Orthogonalization and Orthonormalization.

The Gram-Schmidt process takes a set of vectors as input
and outputs a set of orthogonal vectors which have the same span.

## Main results

- `gram_schmidt` : the Gram-Schmidt process
- `gram_schmidt_orthogonal` :
  `gram_schmidt` produces an orthogonal system of vectors.
- `span_gram_schmidt` :
  `gram_schmidt` preserves span of vectors.
- `gram_schmidt_ne_zero` :
  If the input vectors of `gram_schmidt` are linearly independent,
  then the output vectors are non-zero.
- `gram_schmidt_basis` :
  The basis produced by the Gram-Schmidt process when given a basis as input.
- `gram_schmidt_normed` :
  the normalized `gram_schmidt` (i.e each vector in `gram_schmidt_normed` has unit length.)
- `gram_schmidt_orthornormal` :
  `gram_schmidt_normed` produces an orthornormal system of vectors.
- `gram_schmidt_orthonormal_basis`: orthonormal basis constructed by the Gram-Schmidt process from
  an indexed set of vectors of the right size
-/

open_locale big_operators
open finset submodule finite_dimensional

variables (ùïú : Type*) {E : Type*} [is_R_or_C ùïú] [normed_add_comm_group E] [inner_product_space ùïú E]
variables {Œπ : Type*} [linear_order Œπ] [locally_finite_order_bot Œπ] [is_well_order Œπ (<)]

local attribute [instance] is_well_order.to_has_well_founded

local notation `‚ü™`x`, `y`‚ü´` := @inner ùïú _ _ x y

/-- The Gram-Schmidt process takes a set of vectors as input
and outputs a set of orthogonal vectors which have the same span. -/
noncomputable def gram_schmidt (f : Œπ ‚Üí E) : Œπ ‚Üí E
| n := f n - ‚àë i : Iio n, orthogonal_projection (ùïú ‚àô gram_schmidt i) (f n)
using_well_founded { dec_tac := `[exact mem_Iio.1 i.2] }

/-- This lemma uses `‚àë i in` instead of `‚àë i :`.-/
lemma gram_schmidt_def (f : Œπ ‚Üí E) (n : Œπ):
  gram_schmidt ùïú f n = f n - ‚àë i in Iio n,
    orthogonal_projection (ùïú ‚àô gram_schmidt ùïú f i) (f n) :=
by { rw [‚Üêsum_attach, attach_eq_univ, gram_schmidt], refl }

lemma gram_schmidt_def' (f : Œπ ‚Üí E) (n : Œπ):
  f n = gram_schmidt ùïú f n + ‚àë i in Iio n,
    orthogonal_projection (ùïú ‚àô gram_schmidt ùïú f i) (f n) :=
by rw [gram_schmidt_def, sub_add_cancel]

lemma gram_schmidt_def'' (f : Œπ ‚Üí E) (n : Œπ):
  f n = gram_schmidt ùïú f n
  + ‚àë i in Iio n, (‚ü™gram_schmidt ùïú f i, f n‚ü´ / ‚Äñgram_schmidt ùïú f i‚Äñ ^ 2) ‚Ä¢ gram_schmidt ùïú f i :=
begin
  convert gram_schmidt_def' ùïú f n,
  ext i,
  rw orthogonal_projection_singleton,
end

@[simp] lemma gram_schmidt_zero {Œπ : Type*} [linear_order Œπ] [locally_finite_order Œπ]
  [order_bot Œπ] [is_well_order Œπ (<)] (f : Œπ ‚Üí E) : gram_schmidt ùïú f ‚ä• = f ‚ä• :=
by rw [gram_schmidt_def, Iio_eq_Ico, finset.Ico_self, finset.sum_empty, sub_zero]

/-- **Gram-Schmidt Orthogonalisation**:
`gram_schmidt` produces an orthogonal system of vectors. -/
theorem gram_schmidt_orthogonal (f : Œπ ‚Üí E) {a b : Œπ} (h‚ÇÄ : a ‚â† b) :
  ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0 :=
begin
  suffices : ‚àÄ a b : Œπ, a < b ‚Üí ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0,
  { cases h‚ÇÄ.lt_or_lt with ha hb,
    { exact this _ _ ha, },
    { rw inner_eq_zero_symm,
      exact this _ _ hb, }, },
  clear h‚ÇÄ a b,
  intros a b h‚ÇÄ,
  revert a,
  apply well_founded.induction (@is_well_founded.wf Œπ (<) _) b,
  intros b ih a h‚ÇÄ,
  simp only [gram_schmidt_def ùïú f b, inner_sub_right, inner_sum,
    orthogonal_projection_singleton, inner_smul_right],
  rw finset.sum_eq_single_of_mem a (finset.mem_Iio.mpr h‚ÇÄ),
  { by_cases h : gram_schmidt ùïú f a = 0,
    { simp only [h, inner_zero_left, zero_div, zero_mul, sub_zero], },
    { rw [‚Üê inner_self_eq_norm_sq_to_K, div_mul_cancel, sub_self],
      rwa [inner_self_ne_zero], }, },
  simp_intros i hi hia only [finset.mem_range],
  simp only [mul_eq_zero, div_eq_zero_iff, inner_self_eq_zero],
  right,
  cases hia.lt_or_lt with hia‚ÇÅ hia‚ÇÇ,
  { rw inner_eq_zero_symm,
    exact ih a h‚ÇÄ i hia‚ÇÅ },
  { exact ih i (mem_Iio.1 hi) a hia‚ÇÇ }
end

/-- This is another version of `gram_schmidt_orthogonal` using `pairwise` instead. -/
theorem gram_schmidt_pairwise_orthogonal (f : Œπ ‚Üí E) :
  pairwise (Œª a b, ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0) :=
Œª a b, gram_schmidt_orthogonal ùïú f

lemma gram_schmidt_inv_triangular (v : Œπ ‚Üí E) {i j : Œπ} (hij : i < j) :
  ‚ü™gram_schmidt ùïú v j, v i‚ü´ = 0 :=
begin
  rw gram_schmidt_def'' ùïú v,
  simp only [inner_add_right, inner_sum, inner_smul_right],
  set b : Œπ ‚Üí E := gram_schmidt ùïú v,
  convert zero_add (0:ùïú),
  { exact gram_schmidt_orthogonal ùïú v hij.ne' },
  apply finset.sum_eq_zero,
  rintros k hki',
  have hki : k < i := by simpa using hki',
  have : ‚ü™b j, b k‚ü´ = 0 := gram_schmidt_orthogonal ùïú v (hki.trans hij).ne',
  simp [this],
end

open submodule set order

lemma mem_span_gram_schmidt (f : Œπ ‚Üí E) {i j : Œπ} (hij : i ‚â§ j) :
  f i ‚àà span ùïú (gram_schmidt ùïú f '' Iic j) :=
begin
  rw [gram_schmidt_def' ùïú f i],
  simp_rw orthogonal_projection_singleton,
  exact submodule.add_mem _ (subset_span $ mem_image_of_mem _ hij)
    (submodule.sum_mem _ $ Œª k hk, smul_mem (span ùïú (gram_schmidt ùïú f '' Iic j)) _ $
    subset_span $ mem_image_of_mem (gram_schmidt ùïú f) $ (finset.mem_Iio.1 hk).le.trans hij),
end

lemma gram_schmidt_mem_span (f : Œπ ‚Üí E) :
  ‚àÄ {j i}, i ‚â§ j ‚Üí gram_schmidt ùïú f i ‚àà span ùïú (f '' Iic j)
| j := Œª i hij,
begin
  rw [gram_schmidt_def ùïú f i],
  simp_rw orthogonal_projection_singleton,
  refine submodule.sub_mem _ (subset_span (mem_image_of_mem _ hij))
    (submodule.sum_mem _ $ Œª k hk, _),
  let hkj : k < j := (finset.mem_Iio.1 hk).trans_le hij,
  exact smul_mem _ _ (span_mono (image_subset f $ Iic_subset_Iic.2 hkj.le) $
    gram_schmidt_mem_span le_rfl),
end
using_well_founded { dec_tac := `[assumption] }

lemma span_gram_schmidt_Iic (f : Œπ ‚Üí E) (c : Œπ) :
  span ùïú (gram_schmidt ùïú f '' Iic c) = span ùïú (f '' Iic c) :=
span_eq_span (set.image_subset_iff.2 $ Œª i, gram_schmidt_mem_span _ _) $
  set.image_subset_iff.2 $ Œª i, mem_span_gram_schmidt _ _

lemma span_gram_schmidt_Iio (f : Œπ ‚Üí E) (c : Œπ) :
  span ùïú (gram_schmidt ùïú f '' Iio c) = span ùïú (f '' Iio c) :=
span_eq_span
  (set.image_subset_iff.2 $ Œª i hi, span_mono (image_subset _ $ Iic_subset_Iio.2 hi) $
    gram_schmidt_mem_span _ _ le_rfl) $
  set.image_subset_iff.2 $ Œª i hi, span_mono (image_subset _ $ Iic_subset_Iio.2 hi) $
    mem_span_gram_schmidt _ _ le_rfl

/-- `gram_schmidt` preserves span of vectors. -/
lemma span_gram_schmidt (f : Œπ ‚Üí E) : span ùïú (range (gram_schmidt ùïú f)) = span ùïú (range f) :=
span_eq_span (range_subset_iff.2 $ Œª i, span_mono (image_subset_range _ _) $
  gram_schmidt_mem_span _ _ le_rfl) $
  range_subset_iff.2 $ Œª i, span_mono (image_subset_range _ _) $ mem_span_gram_schmidt _ _ le_rfl

lemma gram_schmidt_of_orthogonal {f : Œπ ‚Üí E} (hf : pairwise (Œª i j, ‚ü™f i, f j‚ü´ = 0)) :
  gram_schmidt ùïú f = f :=
begin
  ext i,
  rw gram_schmidt_def,
  transitivity f i - 0,
  { congr,
    apply finset.sum_eq_zero,
    intros j hj,
    rw coe_eq_zero,
    suffices : span ùïú (f '' set.Iic j) ‚üÇ ùïú ‚àô f i,
    { apply orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero,
      rw mem_orthogonal_singleton_iff_inner_left,
      rw ‚Üêmem_orthogonal_singleton_iff_inner_right,
      exact this (gram_schmidt_mem_span ùïú f (le_refl j)) },
    rw is_ortho_span,
    rintros u ‚ü®k, hk, rfl‚ü© v (rfl : v = f i),
    apply hf,
    exact (lt_of_le_of_lt hk (finset.mem_Iio.mp hj)).ne },
  { simp },
end

variables {ùïú}

lemma gram_schmidt_ne_zero_coe
    {f : Œπ ‚Üí E} (n : Œπ) (h‚ÇÄ : linear_independent ùïú (f ‚àò (coe : set.Iic n ‚Üí Œπ))) :
  gram_schmidt ùïú f n ‚â† 0 :=
begin
  by_contra h,
  have h‚ÇÅ : f n ‚àà span ùïú (f '' Iio n),
  { rw [‚Üê span_gram_schmidt_Iio ùïú f n, gram_schmidt_def' _ f, h, zero_add],
    apply submodule.sum_mem _ _,
    simp_intros a ha only [finset.mem_Ico],
    simp only [set.mem_image, set.mem_Iio, orthogonal_projection_singleton],
    apply submodule.smul_mem _ _ _,
    rw finset.mem_Iio at ha,
    refine subset_span ‚ü®a, ha, by refl‚ü© },
  have h‚ÇÇ : (f ‚àò (coe : set.Iic n ‚Üí Œπ)) ‚ü®n, le_refl n‚ü©
    ‚àà span ùïú (f ‚àò (coe : set.Iic n ‚Üí Œπ) '' Iio ‚ü®n, le_refl n‚ü©),
  { rw [image_comp],
    convert h‚ÇÅ using 3,
    ext i,
    simpa using @le_of_lt _ _ i n },
  apply linear_independent.not_mem_span_image h‚ÇÄ _ h‚ÇÇ,
  simp only [set.mem_Iio, lt_self_iff_false, not_false_iff]
end

/-- If the input vectors of `gram_schmidt` are linearly independent,
then the output vectors are non-zero. -/
lemma gram_schmidt_ne_zero {f : Œπ ‚Üí E} (n : Œπ) (h‚ÇÄ : linear_independent ùïú f) :
  gram_schmidt ùïú f n ‚â† 0 :=
gram_schmidt_ne_zero_coe _ (linear_independent.comp h‚ÇÄ _ subtype.coe_injective)

/-- `gram_schmidt` produces a triangular matrix of vectors when given a basis. -/
lemma gram_schmidt_triangular {i j : Œπ} (hij : i < j) (b : basis Œπ ùïú E) :
  b.repr (gram_schmidt ùïú b i) j = 0 :=
begin
  have : gram_schmidt ùïú b i ‚àà span ùïú (gram_schmidt ùïú b '' set.Iio j),
    from subset_span ((set.mem_image _ _ _).2 ‚ü®i, hij, rfl‚ü©),
  have : gram_schmidt ùïú b i ‚àà span ùïú (b '' set.Iio j),
    by rwa [‚Üê span_gram_schmidt_Iio ùïú b j],
  have : ‚Üë(((b.repr) (gram_schmidt ùïú b i)).support) ‚äÜ set.Iio j,
    from basis.repr_support_subset_of_mem_span b (set.Iio j) this,
  exact (finsupp.mem_supported' _ _).1
    ((finsupp.mem_supported ùïú _).2 this) j set.not_mem_Iio_self,
end

/-- `gram_schmidt` produces linearly independent vectors when given linearly independent vectors. -/
lemma gram_schmidt_linear_independent {f : Œπ ‚Üí E} (h‚ÇÄ : linear_independent ùïú f) :
  linear_independent ùïú (gram_schmidt ùïú f) :=
linear_independent_of_ne_zero_of_inner_eq_zero
    (Œª i, gram_schmidt_ne_zero _ h‚ÇÄ) (Œª i j, gram_schmidt_orthogonal ùïú f)

/-- When given a basis, `gram_schmidt` produces a basis. -/
noncomputable def gram_schmidt_basis (b : basis Œπ ùïú E) : basis Œπ ùïú E :=
basis.mk
  (gram_schmidt_linear_independent b.linear_independent)
  ((span_gram_schmidt ùïú b).trans b.span_eq).ge

lemma coe_gram_schmidt_basis (b : basis Œπ ùïú E) :
  (gram_schmidt_basis b : Œπ ‚Üí E) = gram_schmidt ùïú b := basis.coe_mk _ _

variables (ùïú)

/-- the normalized `gram_schmidt`
(i.e each vector in `gram_schmidt_normed` has unit length.) -/
noncomputable def gram_schmidt_normed (f : Œπ ‚Üí E) (n : Œπ) : E :=
(‚Äñgram_schmidt ùïú f n‚Äñ : ùïú)‚Åª¬π ‚Ä¢ (gram_schmidt ùïú f n)

variables {ùïú}

lemma gram_schmidt_normed_unit_length_coe
    {f : Œπ ‚Üí E} (n : Œπ) (h‚ÇÄ : linear_independent ùïú (f ‚àò (coe : set.Iic n ‚Üí Œπ))) :
  ‚Äñgram_schmidt_normed ùïú f n‚Äñ = 1 :=
by simp only [gram_schmidt_ne_zero_coe n h‚ÇÄ,
  gram_schmidt_normed, norm_smul_inv_norm, ne.def, not_false_iff]

lemma gram_schmidt_normed_unit_length {f : Œπ ‚Üí E} (n : Œπ) (h‚ÇÄ : linear_independent ùïú f) :
  ‚Äñgram_schmidt_normed ùïú f n‚Äñ = 1 :=
gram_schmidt_normed_unit_length_coe _ (linear_independent.comp h‚ÇÄ _ subtype.coe_injective)

lemma gram_schmidt_normed_unit_length' {f : Œπ ‚Üí E} {n : Œπ} (hn : gram_schmidt_normed ùïú f n ‚â† 0) :
  ‚Äñgram_schmidt_normed ùïú f n‚Äñ = 1 :=
begin
  rw gram_schmidt_normed at *,
  rw [norm_smul_inv_norm],
  simpa using hn,
end

/-- **Gram-Schmidt Orthonormalization**:
`gram_schmidt_normed` applied to a linearly independent set of vectors produces an orthornormal
system of vectors. -/
theorem gram_schmidt_orthonormal {f : Œπ ‚Üí E} (h‚ÇÄ : linear_independent ùïú f) :
  orthonormal ùïú (gram_schmidt_normed ùïú f) :=
begin
  unfold orthonormal,
  split,
  { simp only [gram_schmidt_normed_unit_length, h‚ÇÄ, eq_self_iff_true, implies_true_iff], },
  { intros i j hij,
    simp only [gram_schmidt_normed, inner_smul_left, inner_smul_right, is_R_or_C.conj_inv,
      is_R_or_C.conj_of_real, mul_eq_zero, inv_eq_zero, is_R_or_C.of_real_eq_zero, norm_eq_zero],
    repeat { right },
    exact gram_schmidt_orthogonal ùïú f hij }
end

/-- **Gram-Schmidt Orthonormalization**:
`gram_schmidt_normed` produces an orthornormal system of vectors after removing the vectors which
become zero in the process. -/
lemma gram_schmidt_orthonormal' (f : Œπ ‚Üí E) :
  orthonormal ùïú (Œª i : {i | gram_schmidt_normed ùïú f i ‚â† 0}, gram_schmidt_normed ùïú f i) :=
begin
  refine ‚ü®Œª i, gram_schmidt_normed_unit_length' i.prop, _‚ü©,
  rintros i j (hij : ¬¨ _),
  rw subtype.ext_iff at hij,
  simp [gram_schmidt_normed, inner_smul_left, inner_smul_right, gram_schmidt_orthogonal ùïú f hij],
end

lemma span_gram_schmidt_normed (f : Œπ ‚Üí E) (s : set Œπ) :
  span ùïú (gram_schmidt_normed ùïú f '' s) = span ùïú (gram_schmidt ùïú f '' s) :=
begin
  refine span_eq_span (set.image_subset_iff.2 $ Œª i hi, smul_mem _ _ $ subset_span $
    mem_image_of_mem _ hi)
    (set.image_subset_iff.2 $ Œª i hi, span_mono (image_subset _ $ singleton_subset_set_iff.2 hi) _),
  simp only [coe_singleton, set.image_singleton],
  by_cases h : gram_schmidt ùïú f i = 0,
  { simp [h] },
  { refine mem_span_singleton.2 ‚ü®‚Äñgram_schmidt ùïú f i‚Äñ, smul_inv_smul‚ÇÄ _ _‚ü©,
    exact_mod_cast (norm_ne_zero_iff.2 h) }
end

lemma span_gram_schmidt_normed_range (f : Œπ ‚Üí E) :
  span ùïú (range (gram_schmidt_normed ùïú f)) = span ùïú (range (gram_schmidt ùïú f)) :=
by simpa only [image_univ.symm] using span_gram_schmidt_normed f univ

section orthonormal_basis
variables [fintype Œπ] [finite_dimensional ùïú E] (h : finrank ùïú E = fintype.card Œπ) (f : Œπ ‚Üí E)
include h

/-- Given an indexed family `f : Œπ ‚Üí E` of vectors in an inner product space `E`, for which the
size of the index set is the dimension of `E`, produce an orthonormal basis for `E` which agrees
with the orthonormal set produced by the Gram-Schmidt orthonormalization process on the elements of
`Œπ` for which this process gives a nonzero number. -/
noncomputable def gram_schmidt_orthonormal_basis : orthonormal_basis Œπ ùïú E :=
((gram_schmidt_orthonormal' f).exists_orthonormal_basis_extension_of_card_eq h).some

lemma gram_schmidt_orthonormal_basis_apply {f : Œπ ‚Üí E} {i : Œπ}
  (hi : gram_schmidt_normed ùïú f i ‚â† 0) :
  gram_schmidt_orthonormal_basis h f i = gram_schmidt_normed ùïú f i :=
((gram_schmidt_orthonormal' f).exists_orthonormal_basis_extension_of_card_eq h).some_spec i hi

lemma gram_schmidt_orthonormal_basis_apply_of_orthogonal {f : Œπ ‚Üí E}
  (hf : pairwise (Œª i j, ‚ü™f i, f j‚ü´ = 0)) {i : Œπ} (hi : f i ‚â† 0) :
  gram_schmidt_orthonormal_basis h f i = (‚Äñf i‚Äñ‚Åª¬π : ùïú) ‚Ä¢ f i :=
begin
  have H : gram_schmidt_normed ùïú f i = (‚Äñf i‚Äñ‚Åª¬π : ùïú) ‚Ä¢ f i,
  { rw [gram_schmidt_normed, gram_schmidt_of_orthogonal ùïú hf] },
  rw [gram_schmidt_orthonormal_basis_apply h, H],
  simpa [H] using hi,
end

lemma inner_gram_schmidt_orthonormal_basis_eq_zero {f : Œπ ‚Üí E} {i : Œπ}
  (hi : gram_schmidt_normed ùïú f i = 0) (j : Œπ) :
  ‚ü™gram_schmidt_orthonormal_basis h f i, f j‚ü´ = 0 :=
begin
  rw ‚Üêmem_orthogonal_singleton_iff_inner_right,
  suffices : span ùïú (gram_schmidt_normed ùïú f '' Iic j) ‚üÇ ùïú ‚àô gram_schmidt_orthonormal_basis h f i,
  { apply this,
    rw span_gram_schmidt_normed,
    exact mem_span_gram_schmidt ùïú f le_rfl },
  rw is_ortho_span,
  rintros u ‚ü®k, hk, rfl‚ü© v (rfl : v = _),
  by_cases hk : gram_schmidt_normed ùïú f k = 0,
  { rw [hk, inner_zero_left] },
  rw ‚Üê gram_schmidt_orthonormal_basis_apply h hk,
  have : k ‚â† i,
  { rintros rfl,
    exact hk hi },
  exact (gram_schmidt_orthonormal_basis h f).orthonormal.2 this,
end

lemma gram_schmidt_orthonormal_basis_inv_triangular {i j : Œπ} (hij : i < j) :
  ‚ü™gram_schmidt_orthonormal_basis h f j, f i‚ü´ = 0 :=
begin
  by_cases hi : gram_schmidt_normed ùïú f j = 0,
  { rw inner_gram_schmidt_orthonormal_basis_eq_zero h hi },
  { simp [gram_schmidt_orthonormal_basis_apply h hi, gram_schmidt_normed, inner_smul_left,
      gram_schmidt_inv_triangular ùïú f hij] }
end

lemma gram_schmidt_orthonormal_basis_inv_triangular' {i j : Œπ} (hij : i < j) :
  (gram_schmidt_orthonormal_basis h f).repr (f i) j = 0 :=
by simpa [orthonormal_basis.repr_apply_apply]
  using gram_schmidt_orthonormal_basis_inv_triangular h f hij

/-- Given an indexed family `f : Œπ ‚Üí E` of vectors in an inner product space `E`, for which the
size of the index set is the dimension of `E`, the matrix of coefficients of `f` with respect to the
orthonormal basis `gram_schmidt_orthonormal_basis` constructed from `f` is upper-triangular. -/
lemma gram_schmidt_orthonormal_basis_inv_block_triangular :
  ((gram_schmidt_orthonormal_basis h f).to_basis.to_matrix f).block_triangular id :=
Œª i j, gram_schmidt_orthonormal_basis_inv_triangular' h f

lemma gram_schmidt_orthonormal_basis_det :
  (gram_schmidt_orthonormal_basis h f).to_basis.det f =
    ‚àè i, ‚ü™gram_schmidt_orthonormal_basis h f i, f i‚ü´ :=
begin
  convert matrix.det_of_upper_triangular (gram_schmidt_orthonormal_basis_inv_block_triangular h f),
  ext i,
  exact ((gram_schmidt_orthonormal_basis h f).repr_apply_apply (f i) i).symm,
end

end orthonormal_basis
