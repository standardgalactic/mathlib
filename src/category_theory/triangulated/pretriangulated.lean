/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw
-/
import category_theory.preadditive.additive_functor
import category_theory.shift.basic
import category_theory.triangulated.rotate

/-!
# Pretriangulated Categories

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file contains the definition of pretriangulated categories and triangulated functors
between them.

## Implementation Notes

We work under the assumption that pretriangulated categories are preadditive categories,
but not necessarily additive categories, as is assumed in some sources.

TODO: generalise this to n-angulated categories as in https://arxiv.org/abs/1006.4592
-/

noncomputable theory

open category_theory
open category_theory.preadditive
open category_theory.limits

universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace category_theory
open category pretriangulated

/-
We work in a preadditive category `C` equipped with an additive shift.
-/
variables (C : Type u) [category.{v} C] [has_zero_object C] [has_shift C ‚Ñ§] [preadditive C]
  [‚àÄ n : ‚Ñ§, functor.additive (shift_functor C n)]
variables (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] [has_zero_object D] [has_shift D ‚Ñ§] [preadditive D]
  [‚àÄ n : ‚Ñ§, functor.additive (shift_functor D n)]

/--
A preadditive category `C` with an additive shift, and a class of "distinguished triangles"
relative to that shift is called pretriangulated if the following hold:
* Any triangle that is isomorphic to a distinguished triangle is also distinguished.
* Any triangle of the form `(X,X,0,id,0,0)` is distinguished.
* For any morphism `f : X ‚ü∂ Y` there exists a distinguished triangle of the form `(X,Y,Z,f,g,h)`.
* The triangle `(X,Y,Z,f,g,h)` is distinguished if and only if `(Y,Z,X‚ü¶1‚üß,g,h,-f‚ü¶1‚üß)` is.
* Given a diagram:
  ```
        f       g       h
    X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
    ‚îÇ       ‚îÇ                ‚îÇ
    ‚îÇa      ‚îÇb               ‚îÇa‚ü¶1‚üß'
    V       V                V
    X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
        f'      g'      h'
  ```
  where the left square commutes, and whose rows are distinguished triangles,
  there exists a morphism `c : Z ‚ü∂ Z'` such that `(a,b,c)` is a triangle morphism.

See <https://stacks.math.columbia.edu/tag/0145>
-/
class pretriangulated :=
(distinguished_triangles [] : set (triangle C))
(isomorphic_distinguished : Œ† (T‚ÇÅ ‚àà distinguished_triangles) (T‚ÇÇ ‚âÖ T‚ÇÅ),
  T‚ÇÇ ‚àà distinguished_triangles)
(contractible_distinguished : Œ† (X : C), (contractible_triangle X) ‚àà distinguished_triangles)
(distinguished_cocone_triangle : Œ† (X Y : C) (f : X ‚ü∂ Y), (‚àÉ (Z : C) (g : Y ‚ü∂ Z)
  (h : Z ‚ü∂ X‚ü¶(1:‚Ñ§)‚üß),
  triangle.mk f g h ‚àà distinguished_triangles))
(rotate_distinguished_triangle : Œ† (T : triangle C),
  T ‚àà distinguished_triangles ‚Üî T.rotate ‚àà distinguished_triangles)
(complete_distinguished_triangle_morphism : Œ† (T‚ÇÅ T‚ÇÇ : triangle C)
  (h‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles) (h‚ÇÇ : T‚ÇÇ ‚àà distinguished_triangles) (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
  (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm‚ÇÅ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ),
  (‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), (T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ) ‚àß (T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ) ))

namespace pretriangulated
variables [hC : pretriangulated C]

include hC

notation `dist_triang `:20 C := distinguished_triangles C
/--
Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.
-/
lemma rot_of_dist_triangle (T ‚àà dist_triang C) : (T.rotate ‚àà dist_triang C) :=
(rotate_distinguished_triangle T).mp H

/--
Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.
-/
lemma inv_rot_of_dist_triangle (T ‚àà dist_triang C) : (T.inv_rotate ‚àà dist_triang C) :=
(rotate_distinguished_triangle (T.inv_rotate)).mpr
  (isomorphic_distinguished T H T.inv_rotate.rotate (inv_rot_comp_rot.app T))

/--
Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `f ‚â´ g = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
lemma comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ (T ‚àà dist_triang C) : T.mor‚ÇÅ ‚â´ T.mor‚ÇÇ = 0 :=
begin
  obtain ‚ü®c, hc‚ü© := complete_distinguished_triangle_morphism _ _
    (contractible_distinguished T.obj‚ÇÅ) H (ùüô T.obj‚ÇÅ) T.mor‚ÇÅ rfl,
  simpa only [contractible_triangle_mor‚ÇÇ, zero_comp] using hc.left.symm,
end

/--
Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `g ‚â´ h = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
lemma comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ  (T ‚àà dist_triang C) : T.mor‚ÇÇ ‚â´ T.mor‚ÇÉ = 0 :=
comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C T.rotate (rot_of_dist_triangle C T H)

/--
Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `h ‚â´ f‚ü¶1‚üß = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
lemma comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ (T ‚àà dist_triang C) :
  T.mor‚ÇÉ ‚â´ ((shift_equiv C 1).functor.map T.mor‚ÇÅ) = 0 :=
have H‚ÇÇ : _ := rot_of_dist_triangle C T.rotate (rot_of_dist_triangle C T H),
by simpa using comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C (T.rotate.rotate) H‚ÇÇ

/-
TODO: If `C` is pretriangulated with respect to a shift,
then `C·µí·µñ` is pretriangulated with respect to the inverse shift.
-/

end pretriangulated
end category_theory
