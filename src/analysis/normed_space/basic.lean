/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import algebra.algebra.pi
import algebra.algebra.restrict_scalars
import analysis.normed.field.basic
import data.real.sqrt
import topology.algebra.module.basic

/-!
# Normed spaces

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file we define (semi)normed spaces and algebras. We also prove some theorems
about these definitions.
-/

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

open filter metric function set
open_locale topology big_operators nnreal ennreal uniformity pointwise

section seminormed_add_comm_group

section prio
set_option extends_priority 920
-- Here, we set a rather high priority for the instance `[normed_space Œ± Œ≤] : module Œ± Œ≤`
-- to take precedence over `semiring.to_module` as this leads to instance paths with better
-- unification properties.
/-- A normed space over a normed field is a vector space endowed with a norm which satisfies the
equality `‚Äñc ‚Ä¢ x‚Äñ = ‚Äñc‚Äñ ‚Äñx‚Äñ`. We require only `‚Äñc ‚Ä¢ x‚Äñ ‚â§ ‚Äñc‚Äñ ‚Äñx‚Äñ` in the definition, then prove
`‚Äñc ‚Ä¢ x‚Äñ = ‚Äñc‚Äñ ‚Äñx‚Äñ` in `norm_smul`.

Note that since this requires `seminormed_add_comm_group` and not `normed_add_comm_group`, this
typeclass can be used for "semi normed spaces" too, just as `module` can be used for
"semi modules". -/
class normed_space (Œ± : Type*) (Œ≤ : Type*) [normed_field Œ±] [seminormed_add_comm_group Œ≤]
  extends module Œ± Œ≤ :=
(norm_smul_le : ‚àÄ (a:Œ±) (b:Œ≤), ‚Äña ‚Ä¢ b‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ)
end prio

variables [normed_field Œ±] [seminormed_add_comm_group Œ≤]

-- note: while these are currently strictly weaker than the versions without `le`, they will cease
-- to be if we eventually generalize `normed_space` from `normed_field Œ±` to `normed_ring Œ±`.
section le

lemma norm_smul_le [normed_space Œ± Œ≤] (r : Œ±) (x : Œ≤) : ‚Äñr ‚Ä¢ x‚Äñ ‚â§ ‚Äñr‚Äñ * ‚Äñx‚Äñ :=
normed_space.norm_smul_le _ _

lemma nnnorm_smul_le [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚Äñs ‚Ä¢ x‚Äñ‚Çä ‚â§ ‚Äñs‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä :=
norm_smul_le s x

lemma dist_smul_le [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) ‚â§ ‚Äñs‚Äñ * dist x y :=
by simpa only [dist_eq_norm, ‚Üêsmul_sub] using norm_smul_le _ _

lemma nndist_smul_le [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) :
  nndist (s ‚Ä¢ x) (s ‚Ä¢ y) ‚â§ ‚Äñs‚Äñ‚Çä * nndist x y :=
dist_smul_le s x y

end le

@[priority 100] -- see Note [lower instance priority]
instance normed_space.has_bounded_smul [normed_space Œ± Œ≤] : has_bounded_smul Œ± Œ≤ :=
{ dist_smul_pair' := Œª x y‚ÇÅ y‚ÇÇ,
    by simpa [dist_eq_norm, smul_sub] using norm_smul_le x (y‚ÇÅ - y‚ÇÇ),
  dist_pair_smul' := Œª x‚ÇÅ x‚ÇÇ y,
    by simpa [dist_eq_norm, sub_smul] using norm_smul_le (x‚ÇÅ - x‚ÇÇ) y }

-- Shortcut instance, as otherwise this will be found by `normed_space.to_module` and be
-- noncomputable.
instance : module ‚Ñù ‚Ñù := by apply_instance

instance normed_field.to_normed_space : normed_space Œ± Œ± :=
{ norm_smul_le := Œª a b, norm_mul_le a b }

lemma norm_smul [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚Äñs ‚Ä¢ x‚Äñ = ‚Äñs‚Äñ * ‚Äñx‚Äñ :=
begin
  by_cases h : s = 0,
  { simp [h] },
  { refine le_antisymm (norm_smul_le s x) _,
    calc ‚Äñs‚Äñ * ‚Äñx‚Äñ = ‚Äñs‚Äñ * ‚Äñs‚Åª¬π ‚Ä¢ s ‚Ä¢ x‚Äñ     : by rw [inv_smul_smul‚ÇÄ h]
               ... ‚â§ ‚Äñs‚Äñ * (‚Äñs‚Åª¬π‚Äñ * ‚Äñs ‚Ä¢ x‚Äñ) :
      mul_le_mul_of_nonneg_left (norm_smul_le _ _) (norm_nonneg _)
               ... = ‚Äñs ‚Ä¢ x‚Äñ                 :
      by rw [norm_inv, ‚Üê mul_assoc, mul_inv_cancel (mt norm_eq_zero.1 h), one_mul] }
end

lemma norm_zsmul (Œ±) [normed_field Œ±] [normed_space Œ± Œ≤] (n : ‚Ñ§) (x : Œ≤) :
  ‚Äñn ‚Ä¢ x‚Äñ = ‚Äñ(n : Œ±)‚Äñ * ‚Äñx‚Äñ :=
by rw [‚Üê norm_smul, ‚Üê int.smul_one_eq_coe, smul_assoc, one_smul]

@[simp] lemma abs_norm_eq_norm (z : Œ≤) : |‚Äñz‚Äñ| = ‚Äñz‚Äñ :=
  (abs_eq (norm_nonneg z)).mpr (or.inl rfl)

lemma inv_norm_smul_mem_closed_unit_ball [normed_space ‚Ñù Œ≤] (x : Œ≤) :
  ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x ‚àà closed_ball (0 : Œ≤) 1 :=
by simp only [mem_closed_ball_zero_iff, norm_smul, norm_inv, norm_norm, ‚Üê div_eq_inv_mul,
  div_self_le_one]

lemma dist_smul‚ÇÄ [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚Äñs‚Äñ * dist x y :=
by simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]

lemma nnnorm_smul [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚Äñs ‚Ä¢ x‚Äñ‚Çä = ‚Äñs‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä :=
nnreal.eq $ norm_smul s x

lemma nndist_smul‚ÇÄ [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) :
  nndist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚Äñs‚Äñ‚Çä * nndist x y :=
nnreal.eq $ dist_smul‚ÇÄ s x y

lemma lipschitz_with_smul [normed_space Œ± Œ≤] (s : Œ±) : lipschitz_with ‚Äñs‚Äñ‚Çä ((‚Ä¢) s : Œ≤ ‚Üí Œ≤) :=
lipschitz_with_iff_dist_le_mul.2 $ Œª x y, by rw [dist_smul‚ÇÄ, coe_nnnorm]

lemma norm_smul_of_nonneg [normed_space ‚Ñù Œ≤] {t : ‚Ñù} (ht : 0 ‚â§ t) (x : Œ≤) :
  ‚Äñt ‚Ä¢ x‚Äñ = t * ‚Äñx‚Äñ := by rw [norm_smul, real.norm_eq_abs, abs_of_nonneg ht]

variables {E : Type*} [seminormed_add_comm_group E] [normed_space Œ± E]
variables {F : Type*} [seminormed_add_comm_group F] [normed_space Œ± F]

theorem eventually_nhds_norm_smul_sub_lt (c : Œ±) (x : E) {Œµ : ‚Ñù} (h : 0 < Œµ) :
  ‚àÄ·∂† y in ùìù x, ‚Äñc ‚Ä¢ (y - x)‚Äñ < Œµ :=
have tendsto (Œª y, ‚Äñc ‚Ä¢ (y - x)‚Äñ) (ùìù x) (ùìù 0),
  from ((continuous_id.sub continuous_const).const_smul _).norm.tendsto' _ _ (by simp),
this.eventually (gt_mem_nhds h)

lemma filter.tendsto.zero_smul_is_bounded_under_le {f : Œπ ‚Üí Œ±} {g : Œπ ‚Üí E} {l : filter Œπ}
  (hf : tendsto f l (ùìù 0)) (hg : is_bounded_under (‚â§) l (norm ‚àò g)) :
  tendsto (Œª x, f x ‚Ä¢ g x) l (ùìù 0) :=
hf.op_zero_is_bounded_under_le hg (‚Ä¢) norm_smul_le

lemma filter.is_bounded_under.smul_tendsto_zero {f : Œπ ‚Üí Œ±} {g : Œπ ‚Üí E} {l : filter Œπ}
  (hf : is_bounded_under (‚â§) l (norm ‚àò f)) (hg : tendsto g l (ùìù 0)) :
  tendsto (Œª x, f x ‚Ä¢ g x) l (ùìù 0) :=
hg.op_zero_is_bounded_under_le hf (flip (‚Ä¢)) (Œª x y, (norm_smul_le y x).trans_eq (mul_comm _ _))

theorem closure_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  closure (ball x r) = closed_ball x r :=
begin
  refine subset.antisymm closure_ball_subset_closed_ball (Œª y hy, _),
  have : continuous_within_at (Œª c : ‚Ñù, c ‚Ä¢ (y - x) + x) (Ico 0 1) 1 :=
    ((continuous_id.smul continuous_const).add continuous_const).continuous_within_at,
  convert this.mem_closure _ _,
  { rw [one_smul, sub_add_cancel] },
  { simp [closure_Ico zero_ne_one, zero_le_one] },
  { rintros c ‚ü®hc0, hc1‚ü©,
    rw [mem_ball, dist_eq_norm, add_sub_cancel, norm_smul, real.norm_eq_abs,
      abs_of_nonneg hc0, mul_comm, ‚Üê mul_one r],
    rw [mem_closed_ball, dist_eq_norm] at hy,
    replace hr : 0 < r, from ((norm_nonneg _).trans hy).lt_of_ne hr.symm,
    apply mul_lt_mul'; assumption }
end

theorem frontier_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  frontier (ball x r) = sphere x r :=
begin
  rw [frontier, closure_ball x hr, is_open_ball.interior_eq],
  ext x, exact (@eq_iff_le_not_lt ‚Ñù _ _ _).symm
end

theorem interior_closed_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  interior (closed_ball x r) = ball x r :=
begin
  cases hr.lt_or_lt with hr hr,
  { rw [closed_ball_eq_empty.2 hr, ball_eq_empty.2 hr.le, interior_empty] },
  refine subset.antisymm _ ball_subset_interior_closed_ball,
  intros y hy,
  rcases (mem_closed_ball.1 $ interior_subset hy).lt_or_eq with hr|rfl, { exact hr },
  set f : ‚Ñù ‚Üí E := Œª c : ‚Ñù, c ‚Ä¢ (y - x) + x,
  suffices : f ‚Åª¬π' closed_ball x (dist y x) ‚äÜ Icc (-1) 1,
  { have hfc : continuous f := (continuous_id.smul continuous_const).add continuous_const,
    have hf1 : (1:‚Ñù) ‚àà f ‚Åª¬π' (interior (closed_ball x $ dist y x)), by simpa [f],
    have h1 : (1:‚Ñù) ‚àà interior (Icc (-1:‚Ñù) 1) :=
      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1),
    contrapose h1,
    simp },
  intros c hc,
  rw [mem_Icc, ‚Üê abs_le, ‚Üê real.norm_eq_abs, ‚Üê mul_le_mul_right hr],
  simpa [f, dist_eq_norm, norm_smul] using hc
end

theorem frontier_closed_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  frontier (closed_ball x r) = sphere x r :=
by rw [frontier, closure_closed_ball, interior_closed_ball x hr,
  closed_ball_diff_ball]

instance {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñö E] (e : E) :
  discrete_topology $ add_subgroup.zmultiples e :=
begin
  rcases eq_or_ne e 0 with rfl | he,
  { rw [add_subgroup.zmultiples_zero_eq_bot], apply_instance, },
  { rw [discrete_topology_iff_open_singleton_zero, is_open_induced_iff],
    refine ‚ü®metric.ball 0 (‚Äñe‚Äñ), metric.is_open_ball, _‚ü©,
    ext ‚ü®x, hx‚ü©,
    obtain ‚ü®k, rfl‚ü© := add_subgroup.mem_zmultiples_iff.mp hx,
    rw [mem_preimage, mem_ball_zero_iff, add_subgroup.coe_mk, mem_singleton_iff,
      subtype.ext_iff, add_subgroup.coe_mk, add_subgroup.coe_zero, norm_zsmul ‚Ñö k e,
      int.norm_cast_rat, int.norm_eq_abs, ‚Üê int.cast_abs, mul_lt_iff_lt_one_left
      (norm_pos_iff.mpr he), ‚Üê @int.cast_one ‚Ñù _, int.cast_lt, int.abs_lt_one_iff, smul_eq_zero,
      or_iff_left he], },
end

/-- A (semi) normed real vector space is homeomorphic to the unit ball in the same space.
This homeomorphism sends `x : E` to `(1 + ‚Äñx‚Äñ¬≤)^(- ¬Ω) ‚Ä¢ x`.

In many cases the actual implementation is not important, so we don't mark the projection lemmas
`homeomorph_unit_ball_apply_coe` and `homeomorph_unit_ball_symm_apply` as `@[simp]`.

See also `cont_diff_homeomorph_unit_ball` and `cont_diff_on_homeomorph_unit_ball_symm` for
smoothness properties that hold when `E` is an inner-product space. -/
@[simps { attrs := [] }]
noncomputable def homeomorph_unit_ball [normed_space ‚Ñù E] :
  E ‚âÉ‚Çú ball (0 : E) 1 :=
{ to_fun := Œª x, ‚ü®(1 + ‚Äñx‚Äñ^2).sqrt‚Åª¬π ‚Ä¢ x, begin
    have : 0 < 1 + ‚Äñx‚Äñ ^ 2, by positivity,
    rw [mem_ball_zero_iff, norm_smul, real.norm_eq_abs, abs_inv, ‚Üê div_eq_inv_mul,
      div_lt_one (abs_pos.mpr $ real.sqrt_ne_zero'.mpr this), ‚Üê abs_norm_eq_norm x, ‚Üê sq_lt_sq,
      abs_norm_eq_norm, real.sq_sqrt this.le],
    exact lt_one_add _,
  end‚ü©,
  inv_fun := Œª y, (1 - ‚Äñ(y : E)‚Äñ^2).sqrt‚Åª¬π ‚Ä¢ (y : E),
  left_inv := Œª x,
  by field_simp [norm_smul, smul_smul, (zero_lt_one_add_norm_sq x).ne',
    real.sq_sqrt (zero_lt_one_add_norm_sq x).le, ‚Üê real.sqrt_div (zero_lt_one_add_norm_sq x).le],
  right_inv := Œª y,
  begin
    have : 0 < 1 - ‚Äñ(y : E)‚Äñ ^ 2 :=
      by nlinarith [norm_nonneg (y : E), (mem_ball_zero_iff.1 y.2 : ‚Äñ(y : E)‚Äñ < 1)],
    field_simp [norm_smul, smul_smul, this.ne', real.sq_sqrt this.le, ‚Üê real.sqrt_div this.le],
  end,
  continuous_to_fun :=
  begin
    suffices : continuous (Œª x, (1 + ‚Äñx‚Äñ^2).sqrt‚Åª¬π), from (this.smul continuous_id).subtype_mk _,
    refine continuous.inv‚ÇÄ _ (Œª x, real.sqrt_ne_zero'.mpr (by positivity)),
    continuity,
  end,
  continuous_inv_fun :=
  begin
    suffices : ‚àÄ (y : ball (0 : E) 1), (1 - ‚Äñ(y : E)‚Äñ ^ 2).sqrt ‚â† 0, { continuity, },
    intros y,
    rw real.sqrt_ne_zero',
    nlinarith [norm_nonneg (y : E), (mem_ball_zero_iff.1 y.2 : ‚Äñ(y : E)‚Äñ < 1)],
  end }

@[simp] lemma coe_homeomorph_unit_ball_apply_zero [normed_space ‚Ñù E] :
  (homeomorph_unit_ball (0 : E) : E) = 0 :=
by simp [homeomorph_unit_ball]

open normed_field

instance : normed_space Œ± (ulift E) :=
{ norm_smul_le := Œª s x, (norm_smul_le s x.down : _),
  ..ulift.normed_add_comm_group,
  ..ulift.module' }

/-- The product of two normed spaces is a normed space, with the sup norm. -/
instance prod.normed_space : normed_space Œ± (E √ó F) :=
{ norm_smul_le := Œª s x, by simp [prod.norm_def, norm_smul_le, mul_max_of_nonneg],
  ..prod.normed_add_comm_group,
  ..prod.module }

/-- The product of finitely many normed spaces is a normed space, with the sup norm. -/
instance pi.normed_space {E : Œπ ‚Üí Type*} [fintype Œπ] [‚àÄi, seminormed_add_comm_group (E i)]
  [‚àÄi, normed_space Œ± (E i)] : normed_space Œ± (Œ†i, E i) :=
{ norm_smul_le := Œª a f, begin
    simp_rw [‚Üêcoe_nnnorm, ‚Üênnreal.coe_mul, nnreal.coe_le_coe, pi.nnnorm_def, nnreal.mul_finset_sup],
    exact finset.sup_mono_fun (Œª _ _, norm_smul_le _ _),
  end }

instance mul_opposite.normed_space : normed_space Œ± E·µê·µí·µñ :=
{ norm_smul_le := Œª s x, norm_smul_le s x.unop,
  ..mul_opposite.normed_add_comm_group,
  ..mul_opposite.module _ }

/-- A subspace of a normed space is also a normed space, with the restriction of the norm. -/
instance submodule.normed_space {ùïú R : Type*} [has_smul ùïú R] [normed_field ùïú] [ring R]
  {E : Type*} [seminormed_add_comm_group E] [normed_space ùïú E] [module R E]
  [is_scalar_tower ùïú R E] (s : submodule R E) :
  normed_space ùïú s :=
{ norm_smul_le := Œªc x, norm_smul_le c (x : E) }

/-- If there is a scalar `c` with `‚Äñc‚Äñ>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚Äñc‚Äñ`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
lemma rescale_to_shell_semi_normed_zpow {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E}
  (hx : ‚Äñx‚Äñ ‚â† 0) :
  ‚àÉ n : ‚Ñ§, c ^ n ‚â† 0 ‚àß ‚Äñc ^ n ‚Ä¢ x‚Äñ < Œµ ‚àß (Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñc ^ n ‚Ä¢ x‚Äñ) ‚àß (‚Äñc ^ n‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ) :=
begin
  have xŒµpos : 0 < ‚Äñx‚Äñ/Œµ := div_pos ((ne.symm hx).le_iff_lt.1 (norm_nonneg x)) Œµpos,
  rcases exists_mem_Ico_zpow xŒµpos hc with ‚ü®n, hn‚ü©,
  have cpos : 0 < ‚Äñc‚Äñ := lt_trans (zero_lt_one : (0 :‚Ñù) < 1) hc,
  have cnpos : 0 < ‚Äñc^(n+1)‚Äñ := by { rw norm_zpow, exact lt_trans xŒµpos hn.2 },
  refine ‚ü®-(n+1), _, _, _, _‚ü©,
  show c ^ (-(n + 1)) ‚â† 0, from zpow_ne_zero _ (norm_pos_iff.1 cpos),
  show ‚Äñc ^ (-(n + 1)) ‚Ä¢ x‚Äñ < Œµ,
  { rw [norm_smul, zpow_neg, norm_inv, ‚Üê div_eq_inv_mul, div_lt_iff cnpos, mul_comm, norm_zpow],
    exact (div_lt_iff Œµpos).1 (hn.2) },
  show Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñc ^ (-(n + 1)) ‚Ä¢ x‚Äñ,
  { rw [zpow_neg, div_le_iff cpos, norm_smul, norm_inv, norm_zpow, zpow_add‚ÇÄ (ne_of_gt cpos),
        zpow_one, mul_inv_rev, mul_comm, ‚Üê mul_assoc, ‚Üê mul_assoc, mul_inv_cancel (ne_of_gt cpos),
        one_mul, ‚Üê div_eq_inv_mul, le_div_iff (zpow_pos_of_pos cpos _), mul_comm],
    exact (le_div_iff Œµpos).1 hn.1 },
  show ‚Äñc ^ (-(n + 1))‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ,
  { rw [zpow_neg, norm_inv, inv_inv, norm_zpow, zpow_add‚ÇÄ cpos.ne', zpow_one, mul_right_comm,
      ‚Üê div_eq_inv_mul],
    exact mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _) }
end

/-- If there is a scalar `c` with `‚Äñc‚Äñ>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚Äñc‚Äñ`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
lemma rescale_to_shell_semi_normed {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E}
  (hx : ‚Äñx‚Äñ ‚â† 0) : ‚àÉd:Œ±, d ‚â† 0 ‚àß ‚Äñd ‚Ä¢ x‚Äñ < Œµ ‚àß (Œµ/‚Äñc‚Äñ ‚â§ ‚Äñd ‚Ä¢ x‚Äñ) ‚àß (‚Äñd‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ) :=
let ‚ü®n, hn‚ü© := rescale_to_shell_semi_normed_zpow hc Œµpos hx in ‚ü®_, hn‚ü©

end seminormed_add_comm_group

/-- A linear map from a `module` to a `normed_space` induces a `normed_space` structure on the
domain, using the `seminormed_add_comm_group.induced` norm.

See note [reducible non-instances] -/
@[reducible]
def normed_space.induced {F : Type*} (Œ± Œ≤ Œ≥ : Type*) [normed_field Œ±] [add_comm_group Œ≤]
  [module Œ± Œ≤] [seminormed_add_comm_group Œ≥] [normed_space Œ± Œ≥] [linear_map_class F Œ± Œ≤ Œ≥]
  (f : F) : @normed_space Œ± Œ≤ _ (seminormed_add_comm_group.induced Œ≤ Œ≥ f) :=
{ norm_smul_le := Œª a b, by {unfold norm, exact (map_smul f a b).symm ‚ñ∏ norm_smul_le a (f b) } }

section normed_add_comm_group

variables [normed_field Œ±]
variables {E : Type*} [normed_add_comm_group E] [normed_space Œ± E]
variables {F : Type*} [normed_add_comm_group F] [normed_space Œ± F]

open normed_field

/-- While this may appear identical to `normed_space.to_module`, it contains an implicit argument
involving `normed_add_comm_group.to_seminormed_add_comm_group` that typeclass inference has trouble
inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_add_comm_group (E i)] [Œ† i, normed_space ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

[This Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245151099)
gives some more context. -/
@[priority 100]
instance normed_space.to_module' : module Œ± F := normed_space.to_module

section surj

variables (E) [normed_space ‚Ñù E] [nontrivial E]

lemma exists_norm_eq {c : ‚Ñù} (hc : 0 ‚â§ c) : ‚àÉ x : E, ‚Äñx‚Äñ = c :=
begin
  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©,
  rw ‚Üê norm_ne_zero_iff at hx,
  use c ‚Ä¢ ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x,
  simp [norm_smul, real.norm_of_nonneg hc, hx]
end

@[simp] lemma range_norm : range (norm : E ‚Üí ‚Ñù) = Ici 0 :=
subset.antisymm (range_subset_iff.2 norm_nonneg) (Œª _, exists_norm_eq E)

lemma nnnorm_surjective : surjective (nnnorm : E ‚Üí ‚Ñù‚â•0) :=
Œª c, (exists_norm_eq E c.coe_nonneg).imp $ Œª x h, nnreal.eq h

@[simp] lemma range_nnnorm : range (nnnorm : E ‚Üí ‚Ñù‚â•0) = univ :=
(nnnorm_surjective E).range_eq

end surj

/-- If `E` is a nontrivial topological module over `‚Ñù`, then `E` has no isolated points.
This is a particular case of `module.punctured_nhds_ne_bot`. -/
instance real.punctured_nhds_module_ne_bot
  {E : Type*} [add_comm_group E] [topological_space E] [has_continuous_add E] [nontrivial E]
  [module ‚Ñù E] [has_continuous_smul ‚Ñù E] (x : E) :
  ne_bot (ùìù[‚â†] x) :=
module.punctured_nhds_ne_bot ‚Ñù E x

theorem interior_closed_ball' [normed_space ‚Ñù E] [nontrivial E] (x : E) (r : ‚Ñù) :
  interior (closed_ball x r) = ball x r :=
begin
  rcases eq_or_ne r 0 with rfl|hr,
  { rw [closed_ball_zero, ball_zero, interior_singleton] },
  { exact interior_closed_ball x hr }
end

theorem frontier_closed_ball' [normed_space ‚Ñù E] [nontrivial E] (x : E) (r : ‚Ñù) :
  frontier (closed_ball x r) = sphere x r :=
by rw [frontier, closure_closed_ball, interior_closed_ball' x r, closed_ball_diff_ball]

variables {Œ±}

lemma rescale_to_shell_zpow {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
  ‚àÉ n : ‚Ñ§, c ^ n ‚â† 0 ‚àß ‚Äñc ^ n ‚Ä¢ x‚Äñ < Œµ ‚àß (Œµ / ‚Äñc‚Äñ ‚â§ ‚Äñc ^ n ‚Ä¢ x‚Äñ) ‚àß (‚Äñc ^ n‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ) :=
rescale_to_shell_semi_normed_zpow hc Œµpos (mt norm_eq_zero.1 hx)

/-- If there is a scalar `c` with `‚Äñc‚Äñ>1`, then any element can be moved by scalar multiplication to
any shell of width `‚Äñc‚Äñ`. Also recap information on the norm of the rescaling element that shows
up in applications. -/
lemma rescale_to_shell {c : Œ±} (hc : 1 < ‚Äñc‚Äñ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
  ‚àÉd:Œ±, d ‚â† 0 ‚àß ‚Äñd ‚Ä¢ x‚Äñ < Œµ ‚àß (Œµ/‚Äñc‚Äñ ‚â§ ‚Äñd ‚Ä¢ x‚Äñ) ‚àß (‚Äñd‚Äñ‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ) :=
rescale_to_shell_semi_normed hc Œµpos (mt norm_eq_zero.1 hx)

end normed_add_comm_group

section nontrivially_normed_space

variables (ùïú E : Type*) [nontrivially_normed_field ùïú] [normed_add_comm_group E] [normed_space ùïú E]
  [nontrivial E]

include ùïú

/-- If `E` is a nontrivial normed space over a nontrivially normed field `ùïú`, then `E` is unbounded:
for any `c : ‚Ñù`, there exists a vector `x : E` with norm strictly greater than `c`. -/
lemma normed_space.exists_lt_norm (c : ‚Ñù) : ‚àÉ x : E, c < ‚Äñx‚Äñ :=
begin
  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©,
  rcases normed_field.exists_lt_norm ùïú (c / ‚Äñx‚Äñ) with ‚ü®r, hr‚ü©,
  use r ‚Ä¢ x,
  rwa [norm_smul, ‚Üê div_lt_iff],
  rwa norm_pos_iff
end

protected lemma normed_space.unbounded_univ : ¬¨bounded (univ : set E) :=
Œª h, let ‚ü®R, hR‚ü© := bounded_iff_forall_norm_le.1 h, ‚ü®x, hx‚ü© := normed_space.exists_lt_norm ùïú E R
in hx.not_le (hR x trivial)

/-- A normed vector space over a nontrivially normed field is a noncompact space. This cannot be
an instance because in order to apply it, Lean would have to search for `normed_space ùïú E` with
unknown `ùïú`. We register this as an instance in two cases: `ùïú = E` and `ùïú = ‚Ñù`. -/
protected lemma normed_space.noncompact_space : noncompact_space E :=
‚ü®Œª h, normed_space.unbounded_univ ùïú _ h.bounded‚ü©

@[priority 100]
instance nontrivially_normed_field.noncompact_space : noncompact_space ùïú :=
normed_space.noncompact_space ùïú ùïú

omit ùïú

@[priority 100]
instance real_normed_space.noncompact_space [normed_space ‚Ñù E] : noncompact_space E :=
normed_space.noncompact_space ‚Ñù E

end nontrivially_normed_space

section normed_algebra

/-- A normed algebra `ùïú'` over `ùïú` is normed module that is also an algebra.

See the implementation notes for `algebra` for a discussion about non-unital algebras. Following
the strategy there, a non-unital *normed* algebra can be written as:
```lean
variables [normed_field ùïú] [non_unital_semi_normed_ring ùïú']
variables [normed_module ùïú ùïú'] [smul_comm_class ùïú ùïú' ùïú'] [is_scalar_tower ùïú ùïú' ùïú']
```
-/
class normed_algebra (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [semi_normed_ring ùïú']
  extends algebra ùïú ùïú' :=
(norm_smul_le : ‚àÄ (r : ùïú) (x : ùïú'), ‚Äñr ‚Ä¢ x‚Äñ ‚â§ ‚Äñr‚Äñ * ‚Äñx‚Äñ)

variables {ùïú : Type*} (ùïú' : Type*) [normed_field ùïú] [semi_normed_ring ùïú'] [normed_algebra ùïú ùïú']

@[priority 100]
instance normed_algebra.to_normed_space : normed_space ùïú ùïú' :=
{ norm_smul_le := normed_algebra.norm_smul_le }

/-- While this may appear identical to `normed_algebra.to_normed_space`, it contains an implicit
argument involving `normed_ring.to_semi_normed_ring` that typeclass inference has trouble inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

See `normed_space.to_module'` for a similar situation. -/
@[priority 100]
instance normed_algebra.to_normed_space' {ùïú'} [normed_ring ùïú'] [normed_algebra ùïú ùïú'] :
  normed_space ùïú ùïú' := by apply_instance

lemma norm_algebra_map (x : ùïú) : ‚Äñalgebra_map ùïú ùïú' x‚Äñ = ‚Äñx‚Äñ * ‚Äñ(1 : ùïú')‚Äñ :=
begin
  rw algebra.algebra_map_eq_smul_one,
  exact norm_smul _ _,
end

lemma nnnorm_algebra_map (x : ùïú) : ‚Äñalgebra_map ùïú ùïú' x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä * ‚Äñ(1 : ùïú')‚Äñ‚Çä :=
subtype.ext $ norm_algebra_map ùïú' x

@[simp] lemma norm_algebra_map' [norm_one_class ùïú'] (x : ùïú) : ‚Äñalgebra_map ùïú ùïú' x‚Äñ = ‚Äñx‚Äñ :=
by rw [norm_algebra_map, norm_one, mul_one]

@[simp] lemma nnnorm_algebra_map' [norm_one_class ùïú'] (x : ùïú) : ‚Äñalgebra_map ùïú ùïú' x‚Äñ‚Çä = ‚Äñx‚Äñ‚Çä :=
subtype.ext $ norm_algebra_map' _ _

section nnreal

variables [norm_one_class ùïú'] [normed_algebra ‚Ñù ùïú']

@[simp] lemma norm_algebra_map_nnreal (x : ‚Ñù‚â•0) : ‚Äñalgebra_map ‚Ñù‚â•0 ùïú' x‚Äñ = x :=
(norm_algebra_map' ùïú' (x : ‚Ñù)).symm ‚ñ∏ real.norm_of_nonneg x.prop

@[simp] lemma nnnorm_algebra_map_nnreal (x : ‚Ñù‚â•0) : ‚Äñalgebra_map ‚Ñù‚â•0 ùïú' x‚Äñ‚Çä = x :=
subtype.ext $ norm_algebra_map_nnreal ùïú' x

end nnreal

variables (ùïú ùïú')

/-- In a normed algebra, the inclusion of the base field in the extended field is an isometry. -/
lemma algebra_map_isometry [norm_one_class ùïú'] : isometry (algebra_map ùïú ùïú') :=
begin
  refine isometry.of_dist_eq (Œªx y, _),
  rw [dist_eq_norm, dist_eq_norm, ‚Üê ring_hom.map_sub, norm_algebra_map'],
end

instance normed_algebra.id : normed_algebra ùïú ùïú :=
{ .. normed_field.to_normed_space,
  .. algebra.id ùïú}

/-- Any normed characteristic-zero division ring that is a normed_algebra over the reals is also a
normed algebra over the rationals.

Phrased another way, if `ùïú` is a normed algebra over the reals, then `algebra_rat` respects that
norm. -/
instance normed_algebra_rat {ùïú} [normed_division_ring ùïú] [char_zero ùïú] [normed_algebra ‚Ñù ùïú] :
  normed_algebra ‚Ñö ùïú :=
{ norm_smul_le := Œª q x,
    by rw [‚Üêsmul_one_smul ‚Ñù q x, rat.smul_one_eq_coe, norm_smul, rat.norm_cast_real], }

instance punit.normed_algebra : normed_algebra ùïú punit :=
{ norm_smul_le := Œª q x, by simp only [punit.norm_eq_zero, mul_zero] }

instance : normed_algebra ùïú (ulift ùïú') :=
{ ..ulift.normed_space }

/-- The product of two normed algebras is a normed algebra, with the sup norm. -/
instance prod.normed_algebra {E F : Type*} [semi_normed_ring E] [semi_normed_ring F]
  [normed_algebra ùïú E] [normed_algebra ùïú F] :
  normed_algebra ùïú (E √ó F) :=
{ ..prod.normed_space }

/-- The product of finitely many normed algebras is a normed algebra, with the sup norm. -/
instance pi.normed_algebra {E : Œπ ‚Üí Type*} [fintype Œπ]
  [Œ† i, semi_normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  normed_algebra ùïú (Œ† i, E i) :=
{ .. pi.normed_space,
  .. pi.algebra _ E }

instance mul_opposite.normed_algebra {E : Type*} [semi_normed_ring E] [normed_algebra ùïú E] :
  normed_algebra ùïú E·µê·µí·µñ :=
{ ..mul_opposite.normed_space }

end normed_algebra

/-- A non-unital algebra homomorphism from an `algebra` to a `normed_algebra` induces a
`normed_algebra` structure on the domain, using the `semi_normed_ring.induced` norm.

See note [reducible non-instances] -/
@[reducible]
def normed_algebra.induced {F : Type*} (Œ± Œ≤ Œ≥ : Type*) [normed_field Œ±] [ring Œ≤]
  [algebra Œ± Œ≤] [semi_normed_ring Œ≥] [normed_algebra Œ± Œ≥] [non_unital_alg_hom_class F Œ± Œ≤ Œ≥]
  (f : F) : @normed_algebra Œ± Œ≤ _ (semi_normed_ring.induced Œ≤ Œ≥ f) :=
{ norm_smul_le := Œª a b, by {unfold norm, exact (map_smul f a b).symm ‚ñ∏ norm_smul_le a (f b) } }

instance subalgebra.to_normed_algebra {ùïú A : Type*} [semi_normed_ring A] [normed_field ùïú]
  [normed_algebra ùïú A] (S : subalgebra ùïú A) : normed_algebra ùïú S :=
@normed_algebra.induced _ ùïú S A _ (subring_class.to_ring S) S.algebra _ _ _ S.val

section restrict_scalars

variables (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [normed_field ùïú'] [normed_algebra ùïú ùïú']
(E : Type*) [seminormed_add_comm_group E] [normed_space ùïú' E]

instance {ùïú : Type*} {ùïú' : Type*} {E : Type*} [I : seminormed_add_comm_group E] :
  seminormed_add_comm_group (restrict_scalars ùïú ùïú' E) := I

instance {ùïú : Type*} {ùïú' : Type*} {E : Type*} [I : normed_add_comm_group E] :
  normed_add_comm_group (restrict_scalars ùïú ùïú' E) := I

/-- If `E` is a normed space over `ùïú'` and `ùïú` is a normed algebra over `ùïú'`, then
`restrict_scalars.module` is additionally a `normed_space`. -/
instance : normed_space ùïú (restrict_scalars ùïú ùïú' E) :=
{ norm_smul_le := Œª c x, (norm_smul_le (algebra_map ùïú ùïú' c) (_ : E)).trans_eq $
    by rw norm_algebra_map',
  ..restrict_scalars.module ùïú ùïú' E }

/--
The action of the original normed_field on `restrict_scalars ùïú ùïú' E`.
This is not an instance as it would be contrary to the purpose of `restrict_scalars`.
-/
-- If you think you need this, consider instead reproducing `restrict_scalars.lsmul`
-- appropriately modified here.
def module.restrict_scalars.normed_space_orig {ùïú : Type*} {ùïú' : Type*} {E : Type*}
  [normed_field ùïú'] [seminormed_add_comm_group E] [I : normed_space ùïú' E] :
  normed_space ùïú' (restrict_scalars ùïú ùïú' E) := I

/-- Warning: This declaration should be used judiciously.
Please consider using `is_scalar_tower` and/or `restrict_scalars ùïú ùïú' E` instead.

This definition allows the `restrict_scalars.normed_space` instance to be put directly on `E`
rather on `restrict_scalars ùïú ùïú' E`. This would be a very bad instance; both because `ùïú'` cannot be
inferred, and because it is likely to create instance diamonds.
-/
def normed_space.restrict_scalars : normed_space ùïú E :=
restrict_scalars.normed_space _ ùïú' _

end restrict_scalars
