/-
Copyright (c) 2022 Riccardo Brasca. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Riccardo Brasca
-/

import number_theory.cyclotomic.discriminant
import ring_theory.polynomial.eisenstein.is_integral

/-!
# Ring of integers of `p ^ n`-th cyclotomic fields

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.
We gather results about cyclotomic extensions of `‚Ñö`. In particular, we compute the ring of
integers of a `p ^ n`-th cyclotomic extension of `‚Ñö`.

## Main results
* `is_cyclotomic_extension.rat.is_integral_closure_adjoin_singleton_of_prime_pow`: if `K` is a
  `p ^ k`-th cyclotomic extension of `‚Ñö`, then `(adjoin ‚Ñ§ {Œ∂})` is the integral closure of
  `‚Ñ§` in `K`.
* `is_cyclotomic_extension.rat.cyclotomic_ring_is_integral_closure_of_prime_pow`: the integral
  closure of `‚Ñ§` inside `cyclotomic_field (p ^ k) ‚Ñö` is `cyclotomic_ring (p ^ k) ‚Ñ§ ‚Ñö`.
-/

universes u

open algebra is_cyclotomic_extension polynomial number_field

open_locale cyclotomic number_field nat

variables {p : ‚Ñï+} {k : ‚Ñï} {K : Type u} [field K] [char_zero K] {Œ∂ : K} [hp : fact (p : ‚Ñï).prime]

include hp

namespace is_cyclotomic_extension.rat

/-- The discriminant of the power basis given by `Œ∂ - 1`. -/
lemma discr_prime_pow_ne_two' [is_cyclotomic_extension {p ^ (k + 1)} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ (k + 1))) (hk : p ^ (k + 1) ‚â† 2) :
  discr ‚Ñö (hŒ∂.sub_one_power_basis ‚Ñö).basis =
  (-1) ^ (((p ^ (k + 1) : ‚Ñï).totient) / 2) * p ^ ((p : ‚Ñï) ^ k * ((p - 1) * (k + 1) - 1)) :=
begin
  rw [‚Üê discr_prime_pow_ne_two hŒ∂ (cyclotomic.irreducible_rat (p ^ (k + 1)).pos) hk],
  exact hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm
end

lemma discr_odd_prime' [is_cyclotomic_extension {p} ‚Ñö K] (hŒ∂ : is_primitive_root Œ∂ p)
  (hodd : p ‚â† 2) :
  discr ‚Ñö (hŒ∂.sub_one_power_basis ‚Ñö).basis = (-1) ^ (((p : ‚Ñï) - 1) / 2) * p ^ ((p : ‚Ñï) - 2) :=
begin
  rw [‚Üê discr_odd_prime hŒ∂ (cyclotomic.irreducible_rat hp.out.pos) hodd],
  exact hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm
end

/-- The discriminant of the power basis given by `Œ∂ - 1`. Beware that in the cases `p ^ k = 1` and
`p ^ k = 2` the formula uses `1 / 2 = 0` and `0 - 1 = 0`. It is useful only to have a uniform
result. See also `is_cyclotomic_extension.rat.discr_prime_pow_eq_unit_mul_pow'`. -/
lemma discr_prime_pow' [is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) :
  discr ‚Ñö (hŒ∂.sub_one_power_basis ‚Ñö).basis =
  (-1) ^ (((p ^ k : ‚Ñï).totient) / 2) * p ^ ((p : ‚Ñï) ^ (k - 1) * ((p - 1) * k - 1)) :=
begin
  rw [‚Üê discr_prime_pow hŒ∂ (cyclotomic.irreducible_rat (p ^ k).pos)],
  exact hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm
end

/-- If `p` is a prime and `is_cyclotomic_extension {p ^ k} K L`, then there are `u : ‚Ñ§À£` and
`n : ‚Ñï` such that the discriminant of the power basis given by `Œ∂ - 1` is `u * p ^ n`. Often this is
enough and less cumbersome to use than `is_cyclotomic_extension.rat.discr_prime_pow'`. -/
lemma discr_prime_pow_eq_unit_mul_pow' [is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) :
  ‚àÉ (u : ‚Ñ§À£) (n : ‚Ñï), discr ‚Ñö (hŒ∂.sub_one_power_basis ‚Ñö).basis = u * p ^ n :=
begin
  rw [hŒ∂.discr_zeta_eq_discr_zeta_sub_one.symm],
  exact discr_prime_pow_eq_unit_mul_pow hŒ∂ (cyclotomic.irreducible_rat (p ^ k).pos)
end

/-- If `K` is a `p ^ k`-th cyclotomic extension of `‚Ñö`, then `(adjoin ‚Ñ§ {Œ∂})` is the
integral closure of `‚Ñ§` in `K`. -/
lemma is_integral_closure_adjoin_singleton_of_prime_pow
  [hcycl : is_cyclotomic_extension {p ^ k} ‚Ñö K] (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) :
  is_integral_closure (adjoin ‚Ñ§ ({Œ∂} : set K)) ‚Ñ§ K :=
begin
  refine ‚ü®subtype.val_injective, Œª x, ‚ü®Œª h, ‚ü®‚ü®x, _‚ü©, rfl‚ü©, _‚ü©‚ü©,
  swap,
  { rintro ‚ü®y, rfl‚ü©,
    exact is_integral.algebra_map (le_integral_closure_iff_is_integral.1
      (adjoin_le_integral_closure (hŒ∂.is_integral (p ^ k).pos)) _) },
  let B := hŒ∂.sub_one_power_basis ‚Ñö,
  have hint : is_integral ‚Ñ§ B.gen :=  is_integral_sub (hŒ∂.is_integral (p ^ k).pos)
    is_integral_one,
  have H := discr_mul_is_integral_mem_adjoin ‚Ñö hint h,
  obtain ‚ü®u, n, hun‚ü© := discr_prime_pow_eq_unit_mul_pow' hŒ∂,
  rw [hun] at H,
  replace H := subalgebra.smul_mem _ H u.inv,
  rw [‚Üê smul_assoc, ‚Üê smul_mul_assoc, units.inv_eq_coe_inv, coe_coe, zsmul_eq_mul,
    ‚Üê int.cast_mul, units.inv_mul, int.cast_one, one_mul,
    show (p : ‚Ñö) ^ n ‚Ä¢ x = ((p : ‚Ñï) : ‚Ñ§) ^ n ‚Ä¢ x, by simp [smul_def]] at H,
  unfreezingI { cases k },
  { haveI : is_cyclotomic_extension {1} ‚Ñö K := by simpa using hcycl,
    have : x ‚àà (‚ä• : subalgebra ‚Ñö K),
    { rw [singleton_one ‚Ñö K],
      exact mem_top },
    obtain ‚ü®y, rfl‚ü© := mem_bot.1 this,
    replace h := (is_integral_algebra_map_iff (algebra_map ‚Ñö K).injective).1 h,
    obtain ‚ü®z, hz‚ü© := is_integrally_closed.is_integral_iff.1 h,
    rw [‚Üê hz, ‚Üê is_scalar_tower.algebra_map_apply],
    exact subalgebra.algebra_map_mem  _ _ },
  { have hmin : (minpoly ‚Ñ§ B.gen).is_eisenstein_at (submodule.span ‚Ñ§ {((p : ‚Ñï) : ‚Ñ§)}),
    { have h‚ÇÅ := minpoly.is_integrally_closed_eq_field_fractions' ‚Ñö hint,
      have h‚ÇÇ := hŒ∂.minpoly_sub_one_eq_cyclotomic_comp
        (cyclotomic.irreducible_rat (p ^ _).pos),
      rw [is_primitive_root.sub_one_power_basis_gen] at h‚ÇÅ,
      rw [h‚ÇÅ, ‚Üê map_cyclotomic_int, show int.cast_ring_hom ‚Ñö = algebra_map ‚Ñ§ ‚Ñö, by refl,
        show ((X + 1)) = map (algebra_map ‚Ñ§ ‚Ñö) (X + 1), by simp, ‚Üê map_comp] at h‚ÇÇ,
      haveI : char_zero ‚Ñö := strict_ordered_semiring.to_char_zero,
      rw [is_primitive_root.sub_one_power_basis_gen, map_injective (algebra_map ‚Ñ§ ‚Ñö)
        ((algebra_map ‚Ñ§ ‚Ñö).injective_int) h‚ÇÇ],
      exact cyclotomic_prime_pow_comp_X_add_one_is_eisenstein_at _ _ },
    refine adjoin_le _ (mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at
      (nat.prime_iff_prime_int.1 hp.out) hint h H hmin),
    simp only [set.singleton_subset_iff, set_like.mem_coe],
    exact subalgebra.sub_mem _ (self_mem_adjoin_singleton ‚Ñ§ _) (subalgebra.one_mem _) }
end

lemma is_integral_closure_adjoin_singleton_of_prime [hcycl : is_cyclotomic_extension {p} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üëp) :
  is_integral_closure (adjoin ‚Ñ§ ({Œ∂} : set K)) ‚Ñ§ K :=
begin
  rw [‚Üê pow_one p] at hŒ∂ hcycl,
  exactI is_integral_closure_adjoin_singleton_of_prime_pow hŒ∂,
end

local attribute [-instance] cyclotomic_field.algebra

/-- The integral closure of `‚Ñ§` inside `cyclotomic_field (p ^ k) ‚Ñö` is
`cyclotomic_ring (p ^ k) ‚Ñ§ ‚Ñö`. -/
lemma cyclotomic_ring_is_integral_closure_of_prime_pow :
  is_integral_closure (cyclotomic_ring (p ^ k) ‚Ñ§ ‚Ñö) ‚Ñ§ (cyclotomic_field (p ^ k) ‚Ñö) :=
begin
  haveI : char_zero ‚Ñö := strict_ordered_semiring.to_char_zero,
  haveI : is_cyclotomic_extension {p ^ k} ‚Ñö (cyclotomic_field (p ^ k) ‚Ñö),
  { convert cyclotomic_field.is_cyclotomic_extension (p ^ k) _,
    { exact subsingleton.elim _ _ },
    { exact ne_zero.char_zero } },
  have hŒ∂ := zeta_spec (p ^ k) ‚Ñö (cyclotomic_field (p ^ k) ‚Ñö),
  refine ‚ü®is_fraction_ring.injective _ _, Œª x, ‚ü®Œª h, ‚ü®‚ü®x, _‚ü©, rfl‚ü©, _‚ü©‚ü©,
  { have := (is_integral_closure_adjoin_singleton_of_prime_pow hŒ∂).is_integral_iff,
    obtain ‚ü®y, rfl‚ü© := this.1 h,
    convert adjoin_mono _ y.2,
    { simp only [eq_iff_true_of_subsingleton] },
    { simp only [eq_iff_true_of_subsingleton] },
    { simp only [pnat.pow_coe, set.singleton_subset_iff, set.mem_set_of_eq],
      exact hŒ∂.pow_eq_one } },
  { haveI : is_cyclotomic_extension {p ^ k} ‚Ñ§ (cyclotomic_ring (p ^ k) ‚Ñ§ ‚Ñö),
    { convert cyclotomic_ring.is_cyclotomic_extension _ ‚Ñ§ ‚Ñö,
      { exact subsingleton.elim _ _ },
      { exact ne_zero.char_zero } },
    rintro ‚ü®y, rfl‚ü©,
    exact is_integral.algebra_map ((is_cyclotomic_extension.integral {p ^ k} ‚Ñ§ _) _) }
end

lemma cyclotomic_ring_is_integral_closure_of_prime :
  is_integral_closure (cyclotomic_ring p ‚Ñ§ ‚Ñö) ‚Ñ§ (cyclotomic_field p ‚Ñö) :=
begin
  rw [‚Üê pow_one p],
  exact cyclotomic_ring_is_integral_closure_of_prime_pow
end

end is_cyclotomic_extension.rat

section power_basis

open is_cyclotomic_extension.rat

namespace is_primitive_root

/-- The algebra isomorphism `adjoin ‚Ñ§ {Œ∂} ‚âÉ‚Çê[‚Ñ§] (ùìû K)`, where `Œ∂` is a primitive `p ^ k`-th root of
unity and `K` is a `p ^ k`-th cyclotomic extension of `‚Ñö`. -/
@[simps] noncomputable def _root_.is_primitive_root.adjoin_equiv_ring_of_integers
  [hcycl : is_cyclotomic_extension {p ^ k} ‚Ñö K] (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) :
  adjoin ‚Ñ§ ({Œ∂} : set K) ‚âÉ‚Çê[‚Ñ§] (ùìû K) :=
let _ := is_integral_closure_adjoin_singleton_of_prime_pow hŒ∂ in
  by exactI (is_integral_closure.equiv ‚Ñ§ (adjoin ‚Ñ§ ({Œ∂} : set K)) K (ùìû K))

/-- The ring of integers of a `p ^ k`-th cyclotomic extension of `‚Ñö` is a cyclotomic extension. -/
instance _root_.is_cyclotomic_extension.ring_of_integers
  [is_cyclotomic_extension {p ^ k} ‚Ñö K] : is_cyclotomic_extension {p ^ k} ‚Ñ§ (ùìû K) :=
let _ := (zeta_spec (p ^ k) ‚Ñö K).adjoin_is_cyclotomic_extension ‚Ñ§ in by exactI
  is_cyclotomic_extension.equiv _ ‚Ñ§ _ ((zeta_spec (p ^ k) ‚Ñö K).adjoin_equiv_ring_of_integers)

/-- The integral `power_basis` of `ùìû K` given by a primitive root of unity, where `K` is a `p ^ k`
cyclotomic extension of `‚Ñö`. -/
noncomputable def integral_power_basis [hcycl : is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) : power_basis ‚Ñ§ (ùìû K) :=
(adjoin.power_basis' (hŒ∂.is_integral (p ^ k).pos)).map hŒ∂.adjoin_equiv_ring_of_integers

@[simp] lemma integral_power_basis_gen [hcycl : is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) :
  hŒ∂.integral_power_basis.gen = ‚ü®Œ∂, hŒ∂.is_integral (p ^ k).pos‚ü© :=
subtype.ext $ show algebra_map _ K hŒ∂.integral_power_basis.gen = _, by simpa [integral_power_basis]

@[simp] lemma integral_power_basis_dim [hcycl : is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) : hŒ∂.integral_power_basis.dim = œÜ (p ^ k) :=
by simp [integral_power_basis, ‚Üêcyclotomic_eq_minpoly hŒ∂, nat_degree_cyclotomic]

/-- The algebra isomorphism `adjoin ‚Ñ§ {Œ∂} ‚âÉ‚Çê[‚Ñ§] (ùìû K)`, where `Œ∂` is a primitive `p`-th root of
unity and `K` is a `p`-th cyclotomic extension of `‚Ñö`. -/
@[simps] noncomputable def _root_.is_primitive_root.adjoin_equiv_ring_of_integers'
  [hcycl : is_cyclotomic_extension {p} ‚Ñö K] (hŒ∂ : is_primitive_root Œ∂ p) :
  adjoin ‚Ñ§ ({Œ∂} : set K) ‚âÉ‚Çê[‚Ñ§] (ùìû K) :=
@adjoin_equiv_ring_of_integers p 1 K _ _ _ _ (by { convert hcycl, rw pow_one }) (by rwa pow_one)

/-- The ring of integers of a `p`-th cyclotomic extension of `‚Ñö` is a cyclotomic extension. -/
instance _root_.is_cyclotomic_extension.ring_of_integers'
  [is_cyclotomic_extension {p} ‚Ñö K] : is_cyclotomic_extension {p} ‚Ñ§ (ùìû K) :=
let _ := (zeta_spec p ‚Ñö K).adjoin_is_cyclotomic_extension ‚Ñ§ in by exactI
  is_cyclotomic_extension.equiv _ ‚Ñ§ _ ((zeta_spec p ‚Ñö K).adjoin_equiv_ring_of_integers')

/-- The integral `power_basis` of `ùìû K` given by a primitive root of unity, where `K` is a `p`-th
cyclotomic extension of `‚Ñö`. -/
noncomputable def integral_power_basis' [hcycl : is_cyclotomic_extension {p} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ p) : power_basis ‚Ñ§ (ùìû K) :=
@integral_power_basis p 1 K _ _ _ _ (by { convert hcycl, rw pow_one }) (by rwa pow_one)

@[simp] lemma integral_power_basis'_gen [hcycl : is_cyclotomic_extension {p} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ p) : hŒ∂.integral_power_basis'.gen = ‚ü®Œ∂, hŒ∂.is_integral p.pos‚ü© :=
@integral_power_basis_gen p 1 K _ _ _ _ (by { convert hcycl, rw pow_one }) (by rwa pow_one)

@[simp] lemma power_basis_int'_dim [hcycl : is_cyclotomic_extension {p} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ p) : hŒ∂.integral_power_basis'.dim = œÜ p :=
by erw [@integral_power_basis_dim p 1 K _ _ _ _ (by { convert hcycl, rw pow_one })
  (by rwa pow_one), pow_one]

/-- The integral `power_basis` of `ùìû K` given by `Œ∂ - 1`, where `K` is a `p ^ k` cyclotomic
extension of `‚Ñö`. -/
noncomputable def sub_one_integral_power_basis [is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) : power_basis ‚Ñ§ (ùìû K) :=
power_basis.of_gen_mem_adjoin' hŒ∂.integral_power_basis (is_integral_of_mem_ring_of_integers $
  subalgebra.sub_mem _ (hŒ∂.is_integral (p ^ k).pos) (subalgebra.one_mem _))
begin
  simp only [integral_power_basis_gen],
  convert subalgebra.add_mem _
    (self_mem_adjoin_singleton ‚Ñ§ (‚ü®Œ∂ - 1, _‚ü© : ùìû K))
    (subalgebra.one_mem _),
  simp
end

@[simp] lemma sub_one_integral_power_basis_gen [is_cyclotomic_extension {p ^ k} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ ‚Üë(p ^ k)) :
  hŒ∂.sub_one_integral_power_basis.gen =
  ‚ü®Œ∂ - 1, subalgebra.sub_mem _ (hŒ∂.is_integral (p ^ k).pos) (subalgebra.one_mem _)‚ü© :=
by simp [sub_one_integral_power_basis]

/-- The integral `power_basis` of `ùìû K` given by `Œ∂ - 1`, where `K` is a `p`-th cyclotomic
extension of `‚Ñö`. -/
noncomputable def sub_one_integral_power_basis' [hcycl : is_cyclotomic_extension {p} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ p) : power_basis ‚Ñ§ (ùìû K) :=
@sub_one_integral_power_basis p 1 K _ _ _ _ (by { convert hcycl, rw pow_one }) (by rwa pow_one)

@[simp] lemma sub_one_integral_power_basis'_gen [hcycl : is_cyclotomic_extension {p} ‚Ñö K]
  (hŒ∂ : is_primitive_root Œ∂ p) :
  hŒ∂.sub_one_integral_power_basis'.gen =
  ‚ü®Œ∂ - 1, subalgebra.sub_mem _ (hŒ∂.is_integral p.pos) (subalgebra.one_mem _)‚ü© :=
@sub_one_integral_power_basis_gen p 1 K _ _ _ _ (by { convert hcycl, rw pow_one }) (by rwa pow_one)

end is_primitive_root

end power_basis
