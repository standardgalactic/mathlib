/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import category_theory.extensive
import category_theory.limits.shapes.kernel_pair

/-!

# Adhesive categories

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

## Main definitions
- `category_theory.is_pushout.is_van_kampen`: A convenience formulation for a pushout being
  a van Kampen colimit.
- `category_theory.adhesive`: A category is adhesive if it has pushouts and pullbacks along
  monomorphisms, and such pushouts are van Kampen.

## Main Results
- `category_theory.type.adhesive`: The category of `Type` is adhesive.
- `category_theory.adhesive.is_pullback_of_is_pushout_of_mono_left`: In adhesive categories,
  pushouts along monomorphisms are pullbacks.
- `category_theory.adhesive.mono_of_is_pushout_of_mono_left`: In adhesive categories,
  monomorphisms are stable under pushouts.
- `category_theory.adhesive.to_regular_mono_category`: Monomorphisms in adhesive categories are
  regular (this implies that adhesive categories are balanced).

## TODO

Show that the following are adhesive:
- functor categories into adhesive categories
- the categories of sheaves over a site

## References
- https://ncatlab.org/nlab/show/adhesive+category
- [Stephen Lack and Pawe≈Ç Soboci≈Ñski, Adhesive Categories][adhesive2004]

-/
namespace category_theory

open limits

universes v' u' v u

variables {J : Type v'} [category.{u'} J] {C : Type u} [category.{v} C]

variables {W X Y Z : C} {f : W ‚ü∂ X} {g : W ‚ü∂ Y} {h : X ‚ü∂ Z} {i : Y ‚ü∂ Z}

/-- A convenience formulation for a pushout being a van Kampen colimit.
See `is_pushout.is_van_kampen_iff` below. -/
@[nolint unused_arguments] -- This only makes sense when the original diagram is a pushout.
def is_pushout.is_van_kampen (H : is_pushout f g h i) : Prop :=
‚àÄ ‚¶ÉW' X' Y' Z' : C‚¶Ñ (f' : W' ‚ü∂ X') (g' : W' ‚ü∂ Y') (h' : X' ‚ü∂ Z') (i' : Y' ‚ü∂ Z')
  (Œ±W : W' ‚ü∂ W) (Œ±X : X' ‚ü∂ X) (Œ±Y : Y' ‚ü∂ Y) (Œ±Z : Z' ‚ü∂ Z)
  (hf : is_pullback f' Œ±W Œ±X f) (hg : is_pullback g' Œ±W Œ±Y g)
  (hh : comm_sq h' Œ±X Œ±Z h) (hi : comm_sq i' Œ±Y Œ±Z i)
  (w : comm_sq f' g' h' i'),
  is_pushout f' g' h' i' ‚Üî is_pullback h' Œ±X Œ±Z h ‚àß is_pullback i' Œ±Y Œ±Z i

lemma is_pushout.is_van_kampen.flip {H : is_pushout f g h i} (H' : H.is_van_kampen) :
  H.flip.is_van_kampen :=
begin
  introv W' hf hg hh hi w,
  simpa only [is_pushout.flip_iff, is_pullback.flip_iff, and_comm] using
    H' g' f' i' h' Œ±W Œ±Y Œ±X Œ±Z hg hf hi hh w.flip,
end

lemma is_pushout.is_van_kampen_iff (H : is_pushout f g h i) :
  H.is_van_kampen ‚Üî is_van_kampen_colimit (pushout_cocone.mk h i H.w) :=
begin
  split,
  { intros H F' c' Œ± fŒ± eŒ± hŒ±,
    refine iff.trans _ ((H (F'.map walking_span.hom.fst) (F'.map walking_span.hom.snd)
      (c'.Œπ.app _) (c'.Œπ.app _) (Œ±.app _) (Œ±.app _) (Œ±.app _) fŒ±
      (by convert hŒ± walking_span.hom.fst) (by convert hŒ± walking_span.hom.snd)
      _ _ _).trans _),
    { have : F'.map walking_span.hom.fst ‚â´ c'.Œπ.app walking_span.left =
        F'.map walking_span.hom.snd ‚â´ c'.Œπ.app walking_span.right := by simp only [cocone.w],
      rw (is_colimit.equiv_of_nat_iso_of_iso (diagram_iso_span F') c'
        (pushout_cocone.mk _ _ this) _).nonempty_congr,
      { exact ‚ü®Œª h, ‚ü®‚ü®this‚ü©, h‚ü©, Œª h, h.2‚ü© },
      { refine cocones.ext (iso.refl c'.X) _, rintro (_|_|_); dsimp;
          simp only [c'.w, category.assoc, category.id_comp, category.comp_id] } },
    { exact ‚ü®nat_trans.congr_app eŒ±.symm _‚ü© },
    { exact ‚ü®nat_trans.congr_app eŒ±.symm _‚ü© },
    { exact ‚ü®by simp‚ü© },
    split,
    { rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© (_|_|_),
      { rw ‚Üê c'.w walking_span.hom.fst, exact (hŒ± walking_span.hom.fst).paste_horiz h‚ÇÅ },
      exacts [h‚ÇÅ, h‚ÇÇ] },
    { intro h, exact ‚ü®h _, h _‚ü© } },
  { introv H W' hf hg hh hi w,
    refine (iff.trans _
      ((H w.cocone ‚ü®by { rintros (_|_|_), exacts [Œ±W, Œ±X, Œ±Y] }, _‚ü© Œ±Z _ _).trans _)),
    rotate,
    { rintros i _ (_|_|_),
      { dsimp, simp only [functor.map_id, category.comp_id, category.id_comp] },
      exacts [hf.w, hg.w] },
    { ext (_|_|_),
      { dsimp, rw pushout_cocone.condition_zero, erw [category.assoc, hh.w, hf.w_assoc] },
      exacts [hh.w.symm, hi.w.symm] },
    { rintros i _ (_|_|_),
      { dsimp, simp_rw functor.map_id,
        exact is_pullback.of_horiz_is_iso ‚ü®by rw [category.comp_id, category.id_comp]‚ü© },
      exacts [hf, hg] },
    { split,
      { intro h, exact ‚ü®h walking_cospan.left, h walking_cospan.right‚ü© },
      { rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© (_|_|_),
        { dsimp, rw pushout_cocone.condition_zero, exact hf.paste_horiz h‚ÇÅ },
        exacts [h‚ÇÅ, h‚ÇÇ] } },
    { exact ‚ü®Œª h, h.2, Œª h, ‚ü®_, h‚ü©‚ü© } }
end
.

lemma is_coprod_iff_is_pushout {X E Y YE : C} (c : binary_cofan X E)
  (hc : is_colimit c) {f : X ‚ü∂ Y} {iY : Y ‚ü∂ YE} {fE : c.X ‚ü∂ YE}
  (H : comm_sq f c.inl iY fE) :
  nonempty (is_colimit (binary_cofan.mk (c.inr ‚â´ fE) iY)) ‚Üî is_pushout f c.inl iY fE :=
begin
  split,
  { rintro ‚ü®h‚ü©,
    refine ‚ü®H, ‚ü®limits.pushout_cocone.is_colimit_aux' _ _‚ü©‚ü©,
    intro s,
    dsimp,
    refine ‚ü®h.desc (binary_cofan.mk (c.inr ‚â´ s.inr) s.inl), h.fac _ ‚ü®walking_pair.right‚ü©, _, _‚ü©,
    { apply binary_cofan.is_colimit.hom_ext hc,
      { rw ‚Üê H.w_assoc, erw h.fac _ ‚ü®walking_pair.right‚ü©, exact s.condition },
      { rw ‚Üê category.assoc, exact h.fac _ ‚ü®walking_pair.left‚ü© } },
    { intros m e‚ÇÅ e‚ÇÇ,
      apply binary_cofan.is_colimit.hom_ext h,
      { dsimp, rw [category.assoc, e‚ÇÇ, eq_comm], exact h.fac _ ‚ü®walking_pair.left‚ü© },
      { refine e‚ÇÅ.trans (eq.symm _), exact h.fac _ _ } } },
  { refine Œª H, ‚ü®_‚ü©,
    fapply limits.binary_cofan.is_colimit_mk,
    { exact Œª s, H.is_colimit.desc (pushout_cocone.mk s.inr _ $
        (hc.fac (binary_cofan.mk (f ‚â´ s.inr) s.inl) ‚ü®walking_pair.left‚ü©).symm) },
    { intro s,
      erw [category.assoc, H.is_colimit.fac _ walking_span.right, hc.fac], refl },
    { intro s, exact H.is_colimit.fac _ walking_span.left },
    { intros s m e‚ÇÅ e‚ÇÇ,
      apply pushout_cocone.is_colimit.hom_ext H.is_colimit,
      { symmetry, exact (H.is_colimit.fac _ walking_span.left).trans e‚ÇÇ.symm },
      { erw H.is_colimit.fac _ walking_span.right,
        apply binary_cofan.is_colimit.hom_ext hc,
        { dsimp, erw [hc.fac, ‚Üê H.w_assoc, e‚ÇÇ], refl },
        { refine ((category.assoc _ _ _).symm.trans e‚ÇÅ).trans _, symmetry, exact hc.fac _ _ } } } }
end

lemma is_pushout.is_van_kampen_inl {W E X Z : C} (c : binary_cofan W E)
  [finitary_extensive C]
  [has_pullbacks C]
  (hc : is_colimit c) (f : W ‚ü∂ X) (h : X ‚ü∂ Z) (i : c.X ‚ü∂ Z)
  (H : is_pushout f c.inl h i) : H.is_van_kampen :=
begin
  obtain ‚ü®hc‚ÇÅ‚ü© := (is_coprod_iff_is_pushout c hc H.1).mpr H,
  introv W' hf hg hh hi w,
  obtain ‚ü®hc‚ÇÇ‚ü© := ((binary_cofan.is_van_kampen_iff _).mp (finitary_extensive.van_kampen c hc)
    (binary_cofan.mk _ pullback.fst) _ _ _ hg.w.symm pullback.condition.symm).mpr
    ‚ü®hg, is_pullback.of_has_pullback Œ±Y c.inr‚ü©,
  refine (is_coprod_iff_is_pushout _ hc‚ÇÇ w).symm.trans _,
  refine ((binary_cofan.is_van_kampen_iff _).mp (finitary_extensive.van_kampen _ hc‚ÇÅ)
    (binary_cofan.mk _ _) pullback.snd _ _ _ hh.w.symm).trans _,
  { dsimp, rw [‚Üê pullback.condition_assoc, category.assoc, hi.w] },
  split,
  { rintro ‚ü®hc‚ÇÉ, hc‚ÇÑ‚ü©,
    refine ‚ü®hc‚ÇÑ, _‚ü©,
    let Y'' := pullback Œ±Z i,
    let cmp : Y' ‚ü∂ Y'' := pullback.lift i' Œ±Y hi.w,
    have e‚ÇÅ : (g' ‚â´ cmp) ‚â´ pullback.snd = Œ±W ‚â´ c.inl :=
      by rw [category.assoc, pullback.lift_snd, hg.w],
    have e‚ÇÇ : (pullback.fst ‚â´ cmp : pullback Œ±Y c.inr ‚ü∂ _) ‚â´ pullback.snd =
      pullback.snd ‚â´ c.inr :=
      by rw [category.assoc, pullback.lift_snd, pullback.condition],
    obtain ‚ü®hc‚ÇÑ‚ü© := ((binary_cofan.is_van_kampen_iff _).mp (finitary_extensive.van_kampen c hc)
      (binary_cofan.mk _ _) Œ±W _ _ e‚ÇÅ.symm e‚ÇÇ.symm).mpr ‚ü®_, _‚ü©,
    { rw [‚Üê category.id_comp Œ±Z, ‚Üê show cmp ‚â´ pullback.snd = Œ±Y, from pullback.lift_snd _ _ _],
      apply is_pullback.paste_vert _ (is_pullback.of_has_pullback Œ±Z i),
      have : cmp = (hc‚ÇÇ.cocone_point_unique_up_to_iso hc‚ÇÑ).hom,
      { apply binary_cofan.is_colimit.hom_ext hc‚ÇÇ,
        exacts [(hc‚ÇÇ.comp_cocone_point_unique_up_to_iso_hom hc‚ÇÑ ‚ü®walking_pair.left‚ü©).symm,
          (hc‚ÇÇ.comp_cocone_point_unique_up_to_iso_hom hc‚ÇÑ ‚ü®walking_pair.right‚ü©).symm] },
      rw this,
      exact is_pullback.of_vert_is_iso ‚ü®by rw [‚Üê this, category.comp_id, pullback.lift_fst]‚ü© },
    { apply is_pullback.of_right _ e‚ÇÅ (is_pullback.of_has_pullback _ _),
      rw [category.assoc, pullback.lift_fst, ‚Üê H.w, ‚Üê w.w], exact hf.paste_horiz hc‚ÇÑ },
    { apply is_pullback.of_right _ e‚ÇÇ (is_pullback.of_has_pullback _ _),
      rw [category.assoc, pullback.lift_fst], exact hc‚ÇÉ } },
  { rintros ‚ü®hc‚ÇÉ, hc‚ÇÑ‚ü©,
    exact ‚ü®(is_pullback.of_has_pullback Œ±Y c.inr).paste_horiz hc‚ÇÑ, hc‚ÇÉ‚ü© }
end

lemma is_pushout.is_van_kampen.is_pullback_of_mono_left [mono f]
  {H : is_pushout f g h i} (H' : H.is_van_kampen) :
  is_pullback f g h i :=
((H' (ùüô _) g g (ùüô Y) (ùüô _) f (ùüô _) i
  (is_kernel_pair.id_of_mono f) (is_pullback.of_vert_is_iso ‚ü®by simp‚ü©) H.1.flip ‚ü®rfl‚ü©
  ‚ü®by simp‚ü©).mp (is_pushout.of_horiz_is_iso ‚ü®by simp‚ü©)).1.flip

lemma is_pushout.is_van_kampen.is_pullback_of_mono_right [mono g]
  {H : is_pushout f g h i} (H' : H.is_van_kampen) :
  is_pullback f g h i :=
((H' f (ùüô _) (ùüô _) f (ùüô _) (ùüô _) g h  (is_pullback.of_vert_is_iso ‚ü®by simp‚ü©)
  (is_kernel_pair.id_of_mono g) ‚ü®rfl‚ü© H.1
  ‚ü®by simp‚ü©).mp (is_pushout.of_vert_is_iso ‚ü®by simp‚ü©)).2

lemma is_pushout.is_van_kampen.mono_of_mono_left [mono f]
  {H : is_pushout f g h i} (H' : H.is_van_kampen) :
  mono i :=
is_kernel_pair.mono_of_is_iso_fst
  (((H' (ùüô _) g g (ùüô Y) (ùüô _) f (ùüô _) i
  (is_kernel_pair.id_of_mono f) (is_pullback.of_vert_is_iso ‚ü®by simp‚ü©) H.1.flip ‚ü®rfl‚ü©
  ‚ü®by simp‚ü©).mp (is_pushout.of_horiz_is_iso ‚ü®by simp‚ü©)).2)

lemma is_pushout.is_van_kampen.mono_of_mono_right [mono g]
  {H : is_pushout f g h i} (H' : H.is_van_kampen) :
  mono h :=
is_kernel_pair.mono_of_is_iso_fst
  ((H' f (ùüô _) (ùüô _) f (ùüô _) (ùüô _) g h  (is_pullback.of_vert_is_iso ‚ü®by simp‚ü©)
  (is_kernel_pair.id_of_mono g) ‚ü®rfl‚ü© H.1
  ‚ü®by simp‚ü©).mp (is_pushout.of_vert_is_iso ‚ü®by simp‚ü©)).1

/-- A category is adhesive if it has pushouts and pullbacks along monomorphisms,
and such pushouts are van Kampen. -/
class adhesive (C : Type u) [category.{v} C] : Prop :=
[has_pullback_of_mono_left : ‚àÄ {X Y S : C} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [mono f], has_pullback f g]
[has_pushout_of_mono_left : ‚àÄ {X Y S : C} (f : S ‚ü∂ X) (g : S ‚ü∂ Y) [mono f], has_pushout f g]
(van_kampen : ‚àÄ {W X Y Z : C} {f : W ‚ü∂ X} {g : W ‚ü∂ Y} {h : X ‚ü∂ Z} {i : Y ‚ü∂ Z} [mono f]
  (H : is_pushout f g h i), H.is_van_kampen)

attribute [priority 100, instance]
  adhesive.has_pullback_of_mono_left adhesive.has_pushout_of_mono_left

lemma adhesive.van_kampen' [adhesive C] [mono g] (H : is_pushout f g h i) : H.is_van_kampen :=
(adhesive.van_kampen H.flip).flip

lemma adhesive.is_pullback_of_is_pushout_of_mono_left [adhesive C]
  (H : is_pushout f g h i) [mono f] : is_pullback f g h i :=
(adhesive.van_kampen H).is_pullback_of_mono_left

lemma adhesive.is_pullback_of_is_pushout_of_mono_right [adhesive C]
  (H : is_pushout f g h i) [mono g] : is_pullback f g h i :=
(adhesive.van_kampen' H).is_pullback_of_mono_right

lemma adhesive.mono_of_is_pushout_of_mono_left [adhesive C]
  (H : is_pushout f g h i) [mono f] : mono i :=
(adhesive.van_kampen H).mono_of_mono_left

lemma adhesive.mono_of_is_pushout_of_mono_right [adhesive C]
  (H : is_pushout f g h i) [mono g] : mono h :=
(adhesive.van_kampen' H).mono_of_mono_right

instance type.adhesive : adhesive (Type u) :=
begin
  constructor,
  intros,
  exactI (is_pushout.is_van_kampen_inl _ (types.is_coprod_of_mono f) _ _ _ H.flip).flip
end

@[priority 100] noncomputable
instance adhesive.to_regular_mono_category [adhesive C] : regular_mono_category C :=
‚ü®Œª X Y f hf, by exactI
  { Z := pushout f f,
    left := pushout.inl,
    right := pushout.inr,
    w := pushout.condition,
    is_limit := (adhesive.is_pullback_of_is_pushout_of_mono_left
      (is_pushout.of_has_pushout f f)).is_limit_fork }‚ü©

-- This then implies that adhesive categories are balanced
example [adhesive C] : balanced C := infer_instance

end category_theory
