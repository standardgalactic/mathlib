/-
Copyright (c) 2022 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import algebra.order.chebyshev
import analysis.special_functions.pow
import order.partition.equipartition

/-!
# Numerical bounds for Szemer√©di Regularity Lemma

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file gathers the numerical facts required by the proof of Szemer√©di's regularity lemma.

This entire file is internal to the proof of Szemer√©di Regularity Lemma.

## Main declarations

* `szemeredi_regularity.step_bound`: During the inductive step, a partition of size `n` is blown to
  size at most `step_bound n`.
* `szemeredi_regularity.initial_bound`: The size of the partition we start the induction with.
* `szemeredi_regularity.bound`: The upper bound on the size of the partition produced by our version
  of Szemer√©di's regularity lemma.
-/

open finset fintype function real
open_locale big_operators

namespace szemeredi_regularity

/-- Auxiliary function for Szemer√©di's regularity lemma. Blowing up a partition of size `n` during
the induction results in a partition of size at most `step_bound n`. -/
def step_bound (n : ‚Ñï) : ‚Ñï := n * 4 ^ n

lemma le_step_bound : id ‚â§ step_bound := Œª n, nat.le_mul_of_pos_right $ pow_pos (by norm_num) n

lemma step_bound_mono : monotone step_bound :=
Œª a b h, nat.mul_le_mul h $ nat.pow_le_pow_of_le_right (by norm_num) h

lemma step_bound_pos_iff {n : ‚Ñï} : 0 < step_bound n ‚Üî 0 < n := zero_lt_mul_right $ by positivity

alias step_bound_pos_iff ‚Üî _ step_bound_pos

end szemeredi_regularity

open szemeredi_regularity

variables {Œ± : Type*} [decidable_eq Œ±] [fintype Œ±] {P : finpartition (univ : finset Œ±)}
  {u : finset Œ±} {Œµ : ‚Ñù}

local notation `m` := (card Œ±/step_bound P.parts.card : ‚Ñï)
local notation `a` := (card Œ±/P.parts.card - m * 4^P.parts.card : ‚Ñï)

namespace tactic
open positivity

private lemma eps_pos {Œµ : ‚Ñù} {n : ‚Ñï} (h : 100 ‚â§ 4 ^ n * Œµ^5) : 0 < Œµ :=
pow_bit1_pos_iff.1 $ pos_of_mul_pos_right (h.trans_lt' $ by norm_num) $ by positivity

private lemma m_pos [nonempty Œ±] (hPŒ± : P.parts.card * 16^P.parts.card ‚â§ card Œ±) : 0 < m :=
nat.div_pos ((nat.mul_le_mul_left _ $ nat.pow_le_pow_of_le_left (by norm_num) _).trans hPŒ±) $
  step_bound_pos (P.parts_nonempty $ univ_nonempty.ne_empty).card_pos

/-- Local extension for the `positivity` tactic: A few facts that are needed many times for the
proof of Szemer√©di's regularity lemma. -/
meta def positivity_szemeredi_regularity : expr ‚Üí tactic strictness
| `(%%n / step_bound (finpartition.parts %%P).card) := do
    p ‚Üê to_expr
      ``((finpartition.parts %%P).card * 16^(finpartition.parts %%P).card ‚â§ %%n)
      >>= find_assumption,
    positive <$> mk_app ``m_pos [p]
| Œµ := do
    typ ‚Üê infer_type Œµ,
    unify typ `(‚Ñù),
    p ‚Üê to_expr ``(100 ‚â§ 4 ^ _ * %%Œµ ^ 5) >>= find_assumption,
    positive <$> mk_app ``eps_pos [p]

end tactic

local attribute [positivity] tactic.positivity_szemeredi_regularity

namespace szemeredi_regularity

lemma m_pos [nonempty Œ±] (hPŒ± : P.parts.card * 16^P.parts.card ‚â§ card Œ±) : 0 < m := by positivity

lemma coe_m_add_one_pos : 0 < (m : ‚Ñù) + 1 := by positivity

lemma one_le_m_coe [nonempty Œ±] (hPŒ± : P.parts.card * 16^P.parts.card ‚â§ card Œ±) : (1 : ‚Ñù) ‚â§ m :=
nat.one_le_cast.2 $ m_pos hPŒ±

lemma eps_pow_five_pos (hPŒµ : 100 ‚â§ 4^P.parts.card * Œµ^5) : 0 < Œµ^5 :=
pos_of_mul_pos_right ((by norm_num : (0 : ‚Ñù) < 100).trans_le hPŒµ) $ pow_nonneg (by norm_num) _

lemma eps_pos (hPŒµ : 100 ‚â§ 4^P.parts.card * Œµ^5) : 0 < Œµ :=
pow_bit1_pos_iff.1 $ eps_pow_five_pos hPŒµ

lemma hundred_div_Œµ_pow_five_le_m [nonempty Œ±] (hPŒ± : P.parts.card * 16^P.parts.card ‚â§ card Œ±)
  (hPŒµ : 100 ‚â§ 4^P.parts.card * Œµ^5) :
  100 / Œµ^5 ‚â§ m :=
(div_le_of_nonneg_of_le_mul (eps_pow_five_pos hPŒµ).le (by positivity) hPŒµ).trans
begin
  norm_cast,
  rwa [nat.le_div_iff_mul_le'(step_bound_pos (P.parts_nonempty $ univ_nonempty.ne_empty).card_pos),
    step_bound, mul_left_comm, ‚Üêmul_pow],
end

lemma hundred_le_m [nonempty Œ±] (hPŒ± : P.parts.card * 16^P.parts.card ‚â§ card Œ±)
  (hPŒµ : 100 ‚â§ 4^P.parts.card * Œµ^5) (hŒµ : Œµ ‚â§ 1) : 100 ‚â§ m :=
by exact_mod_cast (hundred_div_Œµ_pow_five_le_m hPŒ± hPŒµ).trans'
  (le_div_self (by norm_num) (by positivity) $ pow_le_one _ (by positivity) hŒµ)

lemma a_add_one_le_four_pow_parts_card : a + 1 ‚â§ 4^P.parts.card :=
begin
  have h : 1 ‚â§ 4^P.parts.card := one_le_pow_of_one_le (by norm_num) _,
  rw [step_bound, ‚Üênat.div_div_eq_div_mul, ‚Üênat.le_sub_iff_right h, tsub_le_iff_left,
    ‚Üênat.add_sub_assoc h],
  exact nat.le_pred_of_lt (nat.lt_div_mul_add h),
end

lemma card_aux‚ÇÅ (hucard : u.card = m * 4^P.parts.card + a) :
  (4^P.parts.card - a) * m + a * (m + 1) = u.card :=
by rw [hucard, mul_add, mul_one, ‚Üêadd_assoc, ‚Üêadd_mul, nat.sub_add_cancel
  ((nat.le_succ _).trans a_add_one_le_four_pow_parts_card), mul_comm]

lemma card_aux‚ÇÇ (hP : P.is_equipartition) (hu : u ‚àà P.parts)
  (hucard : ¬¨u.card = m * 4^P.parts.card + a) :
  (4^P.parts.card - (a + 1)) * m + (a + 1) * (m + 1) = u.card :=
begin
  have : m * 4 ^ P.parts.card ‚â§ card Œ± / P.parts.card,
  { rw [step_bound, ‚Üênat.div_div_eq_div_mul],
    exact nat.div_mul_le_self _ _ },
  rw nat.add_sub_of_le this at hucard,
  rw [(hP.card_parts_eq_average hu).resolve_left hucard, mul_add, mul_one, ‚Üêadd_assoc, ‚Üêadd_mul,
    nat.sub_add_cancel a_add_one_le_four_pow_parts_card, ‚Üêadd_assoc, mul_comm,
    nat.add_sub_of_le this, card_univ],
end

lemma pow_mul_m_le_card_part (hP : P.is_equipartition) (hu : u ‚àà P.parts) :
  (4 : ‚Ñù) ^ P.parts.card * m ‚â§ u.card :=
begin
  norm_cast,
  rw [step_bound, ‚Üênat.div_div_eq_div_mul],
  exact (nat.mul_div_le _ _).trans (hP.average_le_card_part hu),
end

variables (P Œµ) (l : ‚Ñï)

/-- Auxiliary function for Szemer√©di's regularity lemma. The size of the partition by which we start
blowing. -/
noncomputable def initial_bound : ‚Ñï := max 7 $ max l $ ‚åälog (100 / Œµ^5) / log 4‚åã‚Çä + 1

lemma le_initial_bound : l ‚â§ initial_bound Œµ l := (le_max_left _ _).trans $ le_max_right _ _
lemma seven_le_initial_bound : 7 ‚â§ initial_bound Œµ l := le_max_left _ _
lemma initial_bound_pos : 0 < initial_bound Œµ l :=
nat.succ_pos'.trans_le $ seven_le_initial_bound _ _

lemma hundred_lt_pow_initial_bound_mul {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) (l : ‚Ñï) :
  100 < 4^initial_bound Œµ l * Œµ^5 :=
begin
  rw [‚Üêrpow_nat_cast 4, ‚Üêdiv_lt_iff (pow_pos hŒµ 5), lt_rpow_iff_log_lt _ zero_lt_four,
    ‚Üêdiv_lt_iff, initial_bound, nat.cast_max, nat.cast_max],
  { push_cast, exact lt_max_of_lt_right (lt_max_of_lt_right $ nat.lt_floor_add_one _) },
  { exact log_pos (by norm_num) },
  { exact div_pos (by norm_num) (pow_pos hŒµ 5) }
end

/-- An explicit bound on the size of the equipartition whose existence is given by Szemer√©di's
regularity lemma. -/
noncomputable def bound : ‚Ñï :=
(step_bound^[‚åä4 / Œµ^5‚åã‚Çä] $ initial_bound Œµ l) * 16 ^ (step_bound^[‚åä4 / Œµ^5‚åã‚Çä] $ initial_bound Œµ l)

lemma initial_bound_le_bound : initial_bound Œµ l ‚â§ bound Œµ l :=
(id_le_iterate_of_id_le le_step_bound _ _).trans $ nat.le_mul_of_pos_right $ by positivity

lemma le_bound : l ‚â§ bound Œµ l := (le_initial_bound Œµ l).trans $ initial_bound_le_bound Œµ l
lemma bound_pos : 0 < bound Œµ l := (initial_bound_pos Œµ l).trans_le $ initial_bound_le_bound Œµ l

variables {Œπ ùïú : Type*} [linear_ordered_field ùïú] (r : Œπ ‚Üí Œπ ‚Üí Prop) [decidable_rel r]
  {s t : finset Œπ} {x : ùïú}

lemma mul_sq_le_sum_sq (hst : s ‚äÜ t) (f : Œπ ‚Üí ùïú) (hs : x^2 ‚â§ ((‚àë i in s, f i) / s.card) ^ 2)
  (hs' : (s.card : ùïú) ‚â† 0) :
  (s.card : ùïú) * x ^ 2 ‚â§ ‚àë i in t, f i ^ 2 :=
(mul_le_mul_of_nonneg_left (hs.trans sum_div_card_sq_le_sum_sq_div_card) $
  nat.cast_nonneg _).trans $ (mul_div_cancel' _ hs').le.trans $ sum_le_sum_of_subset_of_nonneg hst $
    Œª i _ _, sq_nonneg _

lemma add_div_le_sum_sq_div_card (hst : s ‚äÜ t) (f : Œπ ‚Üí ùïú) (d : ùïú) (hx : 0 ‚â§ x)
  (hs : x ‚â§ |(‚àë i in s, f i)/s.card - (‚àë i in t, f i)/t.card|)
  (ht : d ‚â§ ((‚àë i in t, f i)/t.card)^2) :
  d + s.card/t.card * x^2 ‚â§ (‚àë i in t, f i^2)/t.card :=
begin
  obtain hscard | hscard := (s.card.cast_nonneg : (0 : ùïú) ‚â§ s.card).eq_or_lt,
  { simpa [‚Üêhscard] using ht.trans sum_div_card_sq_le_sum_sq_div_card },
  have htcard : (0:ùïú) < t.card := hscard.trans_le (nat.cast_le.2 (card_le_of_subset hst)),
  have h‚ÇÅ : x^2 ‚â§ ((‚àë i in s, f i)/s.card - (‚àë i in t, f i)/t.card)^2 :=
    sq_le_sq.2 (by rwa [abs_of_nonneg hx]),
  have h‚ÇÇ : x^2 ‚â§ ((‚àë i in s, (f i - (‚àë j in t, f j)/t.card))/s.card)^2,
  { apply h‚ÇÅ.trans,
    rw [sum_sub_distrib, sum_const, nsmul_eq_mul, sub_div, mul_div_cancel_left _ hscard.ne'] },
  apply (add_le_add_right ht _).trans,
  rw [‚Üêmul_div_right_comm, le_div_iff htcard, add_mul, div_mul_cancel _ htcard.ne'],
  have h‚ÇÉ := mul_sq_le_sum_sq hst (Œª i, f i - (‚àë j in t, f j) / t.card) h‚ÇÇ hscard.ne',
  apply (add_le_add_left h‚ÇÉ _).trans,
  simp [‚Üêmul_div_right_comm _ (t.card : ùïú), sub_div' _ _ _ htcard.ne', ‚Üêsum_div, ‚Üêadd_div, mul_pow,
    div_le_iff (sq_pos_of_ne_zero _ htcard.ne'), sub_sq, sum_add_distrib, ‚Üêsum_mul, ‚Üêmul_sum],
  ring_nf,
end

end szemeredi_regularity

namespace tactic
open positivity szemeredi_regularity

/-- Extension for the `positivity` tactic: `szemeredi_regularity.initial_bound` and
`szemeredi_regularity.bound` are always positive. -/
@[positivity]
meta def positivity_szemeredi_regularity_bound : expr ‚Üí tactic strictness
| `(szemeredi_regularity.initial_bound %%Œµ %%l) := positive <$> mk_app ``initial_bound_pos [Œµ, l]
| `(szemeredi_regularity.bound %%Œµ %%l) := positive <$> mk_app ``bound_pos [Œµ, l]
| e := pp e >>= fail ‚àò format.bracket "The expression `"
 "` isn't of the form `szemeredi_regularity.initial_bound Œµ l` nor `szemeredi_regularity.bound Œµ l`"

example (Œµ : ‚Ñù) (l : ‚Ñï) : 0 < szemeredi_regularity.initial_bound Œµ l := by positivity
example (Œµ : ‚Ñù) (l : ‚Ñï) : 0 < szemeredi_regularity.bound Œµ l := by positivity

end tactic
