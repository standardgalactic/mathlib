/-
Copyright (c) 2022 Vincent Beffara. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Vincent Beffara
-/
import analysis.analytic.isolated_zeros
import analysis.complex.cauchy_integral
import analysis.complex.abs_max

/-!
# The open mapping theorem for holomorphic functions

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file proves the open mapping theorem for holomorphic functions, namely that an analytic
function on a preconnected set of the complex plane is either constant or open. The main step is to
show a local version of the theorem that states that if `f` is analytic at a point `z‚ÇÄ`, then either
it is constant in a neighborhood of `z‚ÇÄ` or it maps any neighborhood of `z‚ÇÄ` to a neighborhood of
its image `f z‚ÇÄ`. The results extend in higher dimension to `g : E ‚Üí ‚ÑÇ`.

The proof of the local version on `‚ÑÇ` goes through two main steps: first, assuming that the function
is not constant around `z‚ÇÄ`, use the isolated zero principle to show that `‚Äñf z‚Äñ` is bounded below
on a small `sphere z‚ÇÄ r` around `z‚ÇÄ`, and then use the maximum principle applied to the auxiliary
function `(Œª z, ‚Äñf z - v‚Äñ)` to show that any `v` close enough to `f z‚ÇÄ` is in `f '' ball z‚ÇÄ r`. That
second step is implemented in `diff_cont_on_cl.ball_subset_image_closed_ball`.

## Main results

* `analytic_at.eventually_constant_or_nhds_le_map_nhds` is the local version of the open mapping
  theorem around a point;
* `analytic_on.is_constant_or_is_open` is the open mapping theorem on a connected open set.
-/

open set filter metric complex
open_locale topology

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚ÑÇ E] {U : set E}
  {f : ‚ÑÇ ‚Üí ‚ÑÇ} {g : E ‚Üí ‚ÑÇ} {z‚ÇÄ w : ‚ÑÇ} {Œµ r m : ‚Ñù}

/-- If the modulus of a holomorphic function `f` is bounded below by `Œµ` on a circle, then its range
contains a disk of radius `Œµ / 2`. -/
lemma diff_cont_on_cl.ball_subset_image_closed_ball (h : diff_cont_on_cl ‚ÑÇ f (ball z‚ÇÄ r))
  (hr : 0 < r) (hf : ‚àÄ z ‚àà sphere z‚ÇÄ r, Œµ ‚â§ ‚Äñf z - f z‚ÇÄ‚Äñ) (hz‚ÇÄ : ‚àÉ·∂† z in ùìù z‚ÇÄ, f z ‚â† f z‚ÇÄ) :
  ball (f z‚ÇÄ) (Œµ / 2) ‚äÜ f '' closed_ball z‚ÇÄ r :=
begin
  /- This is a direct application of the maximum principle. Pick `v` close to `f z‚ÇÄ`, and look at
  the function `Œª z, ‚Äñf z - v‚Äñ`: it is bounded below on the circle, and takes a small value at `z‚ÇÄ`
  so it is not constant on the disk, which implies that its infimum is equal to `0` and hence that
  `v` is in the range of `f`. -/
  rintro v hv,
  have h1 : diff_cont_on_cl ‚ÑÇ (Œª z, f z - v) (ball z‚ÇÄ r) := h.sub_const v,
  have h2 : continuous_on (Œª z, ‚Äñf z - v‚Äñ) (closed_ball z‚ÇÄ r),
    from continuous_norm.comp_continuous_on (closure_ball z‚ÇÄ hr.ne.symm ‚ñ∏ h1.continuous_on),
  have h3 : analytic_on ‚ÑÇ f (ball z‚ÇÄ r) := h.differentiable_on.analytic_on is_open_ball,
  have h4 : ‚àÄ z ‚àà sphere z‚ÇÄ r, Œµ / 2 ‚â§ ‚Äñf z - v‚Äñ,
    from Œª z hz, by linarith [hf z hz, (show ‚Äñv - f z‚ÇÄ‚Äñ < Œµ / 2, from mem_ball.mp hv),
      norm_sub_sub_norm_sub_le_norm_sub (f z) v (f z‚ÇÄ)],
  have h5 : ‚Äñf z‚ÇÄ - v‚Äñ < Œµ / 2 := by simpa [‚Üê dist_eq_norm, dist_comm] using mem_ball.mp hv,
  obtain ‚ü®z, hz1, hz2‚ü© : ‚àÉ z ‚àà ball z‚ÇÄ r, is_local_min (Œª z, ‚Äñf z - v‚Äñ) z,
    from exists_local_min_mem_ball h2 (mem_closed_ball_self hr.le) (Œª z hz, h5.trans_le (h4 z hz)),
  refine ‚ü®z, ball_subset_closed_ball hz1, sub_eq_zero.mp _‚ü©,
  have h6 := h1.differentiable_on.eventually_differentiable_at (is_open_ball.mem_nhds hz1),
  refine (eventually_eq_or_eq_zero_of_is_local_min_norm h6 hz2).resolve_left (Œª key, _),
  have h7 : ‚àÄ·∂† w in ùìù z, f w = f z := by { filter_upwards [key] with h; field_simp },
  replace h7 : ‚àÉ·∂† w in ùìù[‚â†] z, f w = f z := (h7.filter_mono nhds_within_le_nhds).frequently,
  have h8 : is_preconnected (ball z‚ÇÄ r) := (convex_ball z‚ÇÄ r).is_preconnected,
  have h9 := h3.eq_on_of_preconnected_of_frequently_eq analytic_on_const h8 hz1 h7,
  have h10 : f z = f z‚ÇÄ := (h9 (mem_ball_self hr)).symm,
  exact not_eventually.mpr hz‚ÇÄ (mem_of_superset (ball_mem_nhds z‚ÇÄ hr) (h10 ‚ñ∏ h9))
end

/-- A function `f : ‚ÑÇ ‚Üí ‚ÑÇ` which is analytic at a point `z‚ÇÄ` is either constant in a neighborhood
of `z‚ÇÄ`, or behaves locally like an open function (in the sense that the image of every neighborhood
of `z‚ÇÄ` is a neighborhood of `f z‚ÇÄ`, as in `is_open_map_iff_nhds_le`). For a function `f : E ‚Üí ‚ÑÇ`
the same result holds, see `analytic_at.eventually_constant_or_nhds_le_map_nhds`. -/
lemma analytic_at.eventually_constant_or_nhds_le_map_nhds_aux (hf : analytic_at ‚ÑÇ f z‚ÇÄ) :
  (‚àÄ·∂† z in ùìù z‚ÇÄ, f z = f z‚ÇÄ) ‚à® (ùìù (f z‚ÇÄ) ‚â§ map f (ùìù z‚ÇÄ)) :=
begin
  /- The function `f` is analytic in a neighborhood of `z‚ÇÄ`; by the isolated zeros principle, if `f`
  is not constant in a neighborhood of `z‚ÇÄ`, then it is nonzero, and therefore bounded below, on
  every small enough circle around `z‚ÇÄ` and then `diff_cont_on_cl.ball_subset_image_closed_ball`
  provides an explicit ball centered at `f z‚ÇÄ` contained in the range of `f`. -/
  refine or_iff_not_imp_left.mpr (Œª h, _),
  refine (nhds_basis_ball.le_basis_iff (nhds_basis_closed_ball.map f)).mpr (Œª R hR, _),
  have h1 := (hf.eventually_eq_or_eventually_ne analytic_at_const).resolve_left h,
  have h2 : ‚àÄ·∂† z in ùìù z‚ÇÄ, analytic_at ‚ÑÇ f z := (is_open_analytic_at ‚ÑÇ f).eventually_mem hf,
  obtain ‚ü®œÅ, hœÅ, h3, h4‚ü© : ‚àÉ œÅ > 0, analytic_on ‚ÑÇ f (closed_ball z‚ÇÄ œÅ) ‚àß
      ‚àÄ z ‚àà closed_ball z‚ÇÄ œÅ, z ‚â† z‚ÇÄ ‚Üí f z ‚â† f z‚ÇÄ,
    by simpa only [set_of_and, subset_inter_iff] using
      nhds_basis_closed_ball.mem_iff.mp (h2.and (eventually_nhds_within_iff.mp h1)),
  replace h3 : diff_cont_on_cl ‚ÑÇ f (ball z‚ÇÄ œÅ),
    from ‚ü®h3.differentiable_on.mono ball_subset_closed_ball,
      (closure_ball z‚ÇÄ hœÅ.lt.ne.symm).symm ‚ñ∏ h3.continuous_on‚ü©,
  let r := œÅ ‚äì R,
  have hr : 0 < r := lt_inf_iff.mpr ‚ü®hœÅ, hR‚ü©,
  have h5 : closed_ball z‚ÇÄ r ‚äÜ closed_ball z‚ÇÄ œÅ := closed_ball_subset_closed_ball inf_le_left,
  have h6 : diff_cont_on_cl ‚ÑÇ f (ball z‚ÇÄ r) := h3.mono (ball_subset_ball inf_le_left),
  have h7 : ‚àÄ z ‚àà sphere z‚ÇÄ r, f z ‚â† f z‚ÇÄ,
    from Œª z hz, h4 z (h5 (sphere_subset_closed_ball hz)) (ne_of_mem_sphere hz hr.ne.symm),
  have h8 : (sphere z‚ÇÄ r).nonempty := normed_space.sphere_nonempty.mpr hr.le,
  have h9 : continuous_on (Œª x, ‚Äñf x - f z‚ÇÄ‚Äñ) (sphere z‚ÇÄ r),
    from continuous_norm.comp_continuous_on
      ((h6.sub_const (f z‚ÇÄ)).continuous_on_ball.mono sphere_subset_closed_ball),
  obtain ‚ü®x, hx, hfx‚ü© := (is_compact_sphere z‚ÇÄ r).exists_forall_le h8 h9,
  refine ‚ü®‚Äñf x - f z‚ÇÄ‚Äñ / 2, half_pos (norm_sub_pos_iff.mpr (h7 x hx)), _‚ü©,
  exact (h6.ball_subset_image_closed_ball hr (Œª z hz, hfx z hz) (not_eventually.mp h)).trans
    (image_subset f (closed_ball_subset_closed_ball inf_le_right))
end

/-- The *open mapping theorem* for holomorphic functions, local version: is a function `g : E ‚Üí ‚ÑÇ`
is analytic at a point `z‚ÇÄ`, then either it is constant in a neighborhood of `z‚ÇÄ`, or it maps every
neighborhood of `z‚ÇÄ` to a neighborhood of `z‚ÇÄ`. For the particular case of a holomorphic function on
`‚ÑÇ`, see `analytic_at.eventually_constant_or_nhds_le_map_nhds_aux`. -/
lemma analytic_at.eventually_constant_or_nhds_le_map_nhds {z‚ÇÄ : E} (hg : analytic_at ‚ÑÇ g z‚ÇÄ) :
  (‚àÄ·∂† z in ùìù z‚ÇÄ, g z = g z‚ÇÄ) ‚à® (ùìù (g z‚ÇÄ) ‚â§ map g (ùìù z‚ÇÄ)) :=
begin
  /- The idea of the proof is to use the one-dimensional version applied to the restriction of `g`
  to lines going through `z‚ÇÄ` (indexed by `sphere (0 : E) 1`). If the restriction is eventually
  constant along each of these lines, then the identity theorem implies that `g` is constant on any
  ball centered at `z‚ÇÄ` on which it is analytic, and in particular `g` is eventually constant. If on
  the other hand there is one line along which `g` is not eventually constant, then the
  one-dimensional version of the open mapping theorem can be used to conclude. -/
  let ray : E ‚Üí ‚ÑÇ ‚Üí E := Œª z t, z‚ÇÄ + t ‚Ä¢ z,
  let gray : E ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ := Œª z, (g ‚àò ray z),
  obtain ‚ü®r, hr, hgr‚ü© := is_open_iff.mp (is_open_analytic_at ‚ÑÇ g) z‚ÇÄ hg,
  have h1 : ‚àÄ z ‚àà sphere (0 : E) 1, analytic_on ‚ÑÇ (gray z) (ball 0 r),
  { refine Œª z hz t ht, analytic_at.comp _ _,
    { exact hgr (by simpa [ray, norm_smul, mem_sphere_zero_iff_norm.mp hz] using ht) },
    { exact analytic_at_const.add
      ((continuous_linear_map.smul_right (continuous_linear_map.id ‚ÑÇ ‚ÑÇ) z).analytic_at t) } },
  by_cases (‚àÄ z ‚àà sphere (0 : E) 1, ‚àÄ·∂† t in ùìù 0, gray z t = gray z 0),
  { left, -- If g is eventually constant along every direction, then it is eventually constant
    refine eventually_of_mem (ball_mem_nhds z‚ÇÄ hr) (Œª z hz, _),
    refine (eq_or_ne z z‚ÇÄ).cases_on (congr_arg g) (Œª h', _),
    replace h' : ‚Äñz - z‚ÇÄ‚Äñ ‚â† 0 := by simpa only [ne.def, norm_eq_zero, sub_eq_zero],
    let w : E := ‚Äñz - z‚ÇÄ‚Äñ‚Åª¬π ‚Ä¢ (z - z‚ÇÄ),
    have h3 : ‚àÄ t ‚àà ball (0 : ‚ÑÇ) r, gray w t = g z‚ÇÄ,
    { have e1 : is_preconnected (ball (0 : ‚ÑÇ) r) := (convex_ball 0 r).is_preconnected,
      have e2 : w ‚àà sphere (0 : E) 1 := by simp [w, norm_smul, h'],
      specialize h1 w e2,
      apply h1.eq_on_of_preconnected_of_eventually_eq analytic_on_const e1 (mem_ball_self hr),
      simpa [gray, ray] using h w e2 },
    have h4 : ‚Äñz - z‚ÇÄ‚Äñ < r := by simpa [dist_eq_norm] using mem_ball.mp hz,
    replace h4 : ‚Üë‚Äñz - z‚ÇÄ‚Äñ ‚àà ball (0 : ‚ÑÇ) r := by simpa only [mem_ball_zero_iff, norm_eq_abs,
      abs_of_real, abs_norm_eq_norm],
    simpa only [gray, ray, smul_smul, mul_inv_cancel h', one_smul, add_sub_cancel'_right,
      function.comp_app, coe_smul] using h3 ‚Üë‚Äñz - z‚ÇÄ‚Äñ h4 },
  { right, -- Otherwise, it is open along at least one direction and that implies the result
    push_neg at h,
    obtain ‚ü®z, hz, hrz‚ü© := h,
    specialize h1 z hz 0 (mem_ball_self hr),
    have h7 := h1.eventually_constant_or_nhds_le_map_nhds_aux.resolve_left hrz,
    rw [show gray z 0 = g z‚ÇÄ, by simp [gray, ray], ‚Üê map_compose] at h7,
    refine h7.trans (map_mono _),
    have h10 : continuous (Œª (t : ‚ÑÇ), z‚ÇÄ + t ‚Ä¢ z),
      from continuous_const.add (continuous_id'.smul continuous_const),
    simpa using h10.tendsto 0 }
end

/-- The *open mapping theorem* for holomorphic functions, global version: if a function `g : E ‚Üí ‚ÑÇ`
is analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the
sense that it maps any open set contained in `U` to an open set in `‚ÑÇ`). -/
theorem analytic_on.is_constant_or_is_open (hg : analytic_on ‚ÑÇ g U) (hU : is_preconnected U) :
  (‚àÉ w, ‚àÄ z ‚àà U, g z = w) ‚à® (‚àÄ s ‚äÜ U, is_open s ‚Üí is_open (g '' s)) :=
begin
  by_cases ‚àÉ z‚ÇÄ ‚àà U, ‚àÄ·∂† z in ùìù z‚ÇÄ, g z = g z‚ÇÄ,
  { obtain ‚ü®z‚ÇÄ, hz‚ÇÄ, h‚ü© := h,
    exact or.inl ‚ü®g z‚ÇÄ, hg.eq_on_of_preconnected_of_eventually_eq analytic_on_const hU hz‚ÇÄ h‚ü© },
  { push_neg at h,
    refine or.inr (Œª s hs1 hs2, is_open_iff_mem_nhds.mpr _),
    rintro z ‚ü®w, hw1, rfl‚ü©,
    exact (hg w (hs1 hw1)).eventually_constant_or_nhds_le_map_nhds.resolve_left (h w (hs1 hw1))
      (image_mem_map (hs2.mem_nhds hw1)) }
end
